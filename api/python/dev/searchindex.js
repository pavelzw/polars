Search.setIndex({"alltitles": {"ABS": [[1380, "abs"]], "ACOS": [[1383, "acos"]], "ACOSD": [[1383, "acosd"]], "ARRAY_AGG": [[1376, "array-agg"]], "ARRAY_CONTAINS": [[1376, "array-contains"]], "ARRAY_GET": [[1376, "array-get"]], "ARRAY_LENGTH": [[1376, "array-length"]], "ARRAY_LOWER": [[1376, "array-lower"]], "ARRAY_MEAN": [[1376, "array-mean"]], "ARRAY_REVERSE": [[1376, "array-reverse"]], "ARRAY_SUM": [[1376, "array-sum"]], "ARRAY_TO_STRING": [[1376, "array-to-string"]], "ARRAY_UNIQUE": [[1376, "array-unique"]], "ARRAY_UPPER": [[1376, "array-upper"]], "ASIN": [[1383, "asin"]], "ASIND": [[1383, "asind"]], "ATAN": [[1383, "atan"]], "ATAN2": [[1383, "atan2"]], "ATAN2D": [[1383, "atan2d"]], "ATAND": [[1383, "atand"]], "AVG": [[1375, "avg"]], "Aggregate": [[1375, null]], "Aggregation": [[204, null], [357, null], [857, null], [966, null]], "Aliases": [[1375, null], [1375, null], [1380, null], [1380, null], [1381, null], [1381, null]], "Array": [[835, null], [1350, null], [1376, null]], "Asserts": [[1389, "asserts"]], "Attributes": [[345, null], [954, null], [1351, null]], "Available registrations": [[1, "available-registrations"]], "Avro": [[856, "avro"]], "BIT_AND": [[1377, "bit-and"]], "BIT_COUNT": [[1377, "bit-count"]], "BIT_LENGTH": [[1381, "bit-length"]], "BIT_OR": [[1377, "bit-or"]], "BIT_XOR": [[1377, "bit-xor"]], "Binary": [[836, null], [849, "binary"], [1352, null]], "Bitwise": [[1377, null]], "Boolean": [[837, null], [1353, null]], "CAST": [[1384, "cast"]], "CBRT": [[1380, "cbrt"]], "CEIL": [[1380, "ceil"]], "COALESCE": [[1378, "coalesce"]], "CONCAT": [[1381, "concat"]], "CONCAT_WS": [[1381, "concat-ws"]], "COS": [[1383, "cos"]], "COSD": [[1383, "cosd"]], "COT": [[1383, "cot"]], "COTD": [[1383, "cotd"]], "COUNT": [[1375, "count"]], "CREATE TABLE": [[1388, "create-table"]], "CSV": [[856, "csv"]], "Catalog": [[201, null]], "Categories": [[838, null], [1354, null]], "Clipboard": [[856, "clipboard"]], "Cloud Credentials": [[856, "cloud-credentials"]], "Columns / names": [[840, null]], "Comparison": [[849, "comparison"], [1362, "comparison"]], "Computation": [[346, null], [841, null], [1355, null]], "Conditional": [[1378, null]], "Config": [[203, null]], "Config load, save, state": [[203, "config-load-save-state"]], "Config options": [[203, "config-options"]], "Conjunction": [[849, "conjunction"]], "Conversion": [[854, "conversion"]], "DATE": [[1381, "date"]], "DATE_PART": [[1382, "date-part"]], "DEGREES": [[1383, "degrees"]], "DELETE": [[1388, "delete"]], "DISTINCT": [[1374, "distinct"]], "DIV": [[1380, "div"]], "DROP TABLES": [[1388, "drop-tables"]], "Data types": [[355, null]], "DataFrame": [[350, null]], "DataType": [[355, "datatype"]], "Database": [[856, "database"]], "Delta Lake": [[856, "delta-lake"]], "Descriptive": [[347, null], [955, null], [1356, null]], "Documentation": [[1386, null], [1386, null], [1386, null]], "ENDS_WITH": [[1381, "ends-with"]], "EXCEPT": [[1387, "except"]], "EXP": [[1380, "exp"]], "EXPLAIN": [[1388, "explain"]], "EXTRACT": [[1382, "extract"]], "Errors": [[356, "errors"]], "Examples": [[1, "examples"], [965, "examples"], [1389, "examples"]], "Excel / ODS": [[856, "excel-ods"]], "Exceptions": [[356, null]], "Export": [[348, null], [1357, null]], "Expression SQL": [[1386, "expression-sql"]], "Expression plugins": [[963, "expression-plugins"]], "Expressions": [[843, null]], "Extending the API": [[1, null]], "FIRST": [[1375, "first"]], "FLOOR": [[1380, "floor"]], "FROM": [[1374, "from"]], "Feather / IPC": [[856, "feather-ipc"]], "Frame SQL": [[1386, "frame-sql"]], "Functions": [[842, null], [854, null], [965, "functions"]], "GPUEngine": [[956, null]], "GREATEST": [[1378, "greatest"]], "GROUP BY": [[1374, "group-by"]], "Global SQL": [[1386, "global-sql"]], "GroupBy": [[349, null], [957, null]], "HAVING": [[1374, "having"]], "IF": [[1378, "if"]], "IFNULL": [[1378, "ifnull"]], "INITCAP": [[1381, "initcap"]], "INTERSECT": [[1387, "intersect"]], "IO plugins": [[963, "io-plugins"]], "Iceberg": [[856, "iceberg"]], "Importing": [[965, "importing"]], "InProcessQuery": [[958, null]], "Index": [[0, null]], "Input/output": [[856, null]], "Introduction": [[1386, "introduction"]], "JOIN": [[1374, "join"]], "JSON": [[856, "json"]], "LAST": [[1375, "last"]], "LEAST": [[1378, "least"]], "LEFT": [[1381, "left"]], "LENGTH": [[1381, "length"]], "LIMIT": [[1374, "limit"]], "LN": [[1380, "ln"]], "LOG": [[1380, "log"]], "LOG10": [[1380, "log10"]], "LOG1P": [[1380, "log1p"]], "LOG2": [[1380, "log2"]], "LOWER": [[1381, "lower"]], "LTRIM": [[1381, "ltrim"]], "LazyFrame": [[959, null]], "List": [[844, null], [1359, null]], "MAX": [[1375, "max"]], "MEDIAN": [[1375, "median"]], "MIN": [[1375, "min"]], "MOD": [[1380, "mod"]], "Manipulation/selection": [[352, null], [847, null], [961, null], [1361, null]], "Math": [[1380, null]], "Meta": [[845, null]], "Metadata": [[962, null]], "Methods": [[1386, "methods"]], "Miscellaneous": [[351, null], [846, null], [854, "miscellaneous"], [960, null], [1360, null]], "Multiple Config instances": [[203, "multiple-config-instances"]], "Multiple queries": [[854, "multiple-queries"]], "NORMALIZE": [[1381, "normalize"]], "NULLIF": [[1378, "nullif"]], "Name": [[848, null]], "Nested": [[355, "nested"]], "Numeric": [[355, "numeric"], [849, "numeric"], [1362, "numeric"]], "OCTET_LENGTH": [[1381, "octet-length"]], "OFFSET": [[1374, "offset"]], "ORDER BY": [[1374, "order-by"]], "Operators": [[849, null], [1362, null]], "Other": [[355, "other"]], "PI": [[1380, "pi"]], "POW": [[1380, "pow"]], "Panic": [[356, "panic"]], "Parametric testing": [[1389, "parametric-testing"]], "Parquet": [[856, "parquet"]], "Partition": [[856, "partition"]], "Plot": [[353, null], [1363, null]], "Plugins": [[963, null]], "Polars strategies": [[1389, "polars-strategies"]], "Profiles": [[1389, "profiles"]], "Providing new functionality": [[1, "providing-new-functionality"]], "PyArrow Datasets": [[856, "pyarrow-datasets"]], "Python API": [[1386, null]], "Python API reference": [[855, null]], "QUANTILE_CONT": [[1375, "quantile-cont"]], "QUANTILE_DISC": [[1375, "quantile-disc"]], "Querying": [[1386, "querying"]], "RADIANS": [[1383, "radians"]], "REGEXP_LIKE": [[1381, "regexp-like"]], "REPLACE": [[1381, "replace"]], "REVERSE": [[1381, "reverse"]], "RIGHT": [[1381, "right"]], "ROUND": [[1380, "round"]], "RTRIM": [[1381, "rtrim"]], "Random": [[854, "random"]], "SELECT": [[1374, "select"]], "SHOW TABLES": [[1388, "show-tables"]], "SIGN": [[1380, "sign"]], "SIN": [[1383, "sin"]], "SIND": [[1383, "sind"]], "SPLIT_PART": [[1381, "split-part"]], "SQL Clauses": [[1374, null]], "SQL Functions": [[1379, null]], "SQL Interface": [[1385, null]], "SQLContext": [[1386, "sqlcontext"]], "SQRT": [[1380, "sqrt"]], "STARTS_WITH": [[1381, "starts-with"]], "STDDEV": [[1375, "stddev"]], "STRFTIME": [[1382, "strftime"]], "STRING_TO_ARRAY": [[1381, "string-to-array"]], "STRPOS": [[1381, "strpos"]], "STRPTIME": [[1381, "strptime"]], "SUBSTR": [[1381, "substr"]], "SUM": [[1375, "sum"]], "Schema": [[964, null]], "Selectors": [[965, null]], "Serialization": [[351, "serialization"], [960, "serialization"]], "Series": [[1358, null]], "Set Operations": [[1387, null]], "Set operations": [[965, "set-operations"]], "Strategy helpers": [[1389, "strategy-helpers"]], "String": [[355, "string"], [850, null], [1364, null], [1381, null]], "StringCache": [[854, "stringcache"]], "Struct": [[851, null], [1365, null]], "Style": [[354, null]], "TAN": [[1383, "tan"]], "TAND": [[1383, "tand"]], "TIMESTAMP": [[1381, "timestamp"]], "TRUNCATE": [[1388, "truncate"]], "TRY_CAST": [[1384, "try-cast"]], "Table Operations": [[1388, null]], "Temporal": [[355, "temporal"], [852, null], [1366, null], [1382, null]], "Testing": [[1389, null]], "Trigonometry": [[1383, null]], "Types": [[1384, null]], "UNION": [[1387, "union"]], "UNION ALL": [[1387, "union-all"]], "UNION BY NAME": [[1387, "union-by-name"]], "UNNEST": [[1376, "unnest"], [1388, "unnest"]], "UPPER": [[1381, "upper"]], "Unity Catalog": [[202, null]], "Use as a context manager": [[203, "use-as-a-context-manager"]], "Use as a decorator": [[203, "use-as-a-decorator"]], "VARIANCE": [[1375, "variance"]], "WHERE": [[1374, "where"]], "Warnings": [[356, "warnings"]], "Window": [[853, null]], "polars.Catalog": [[188, null]], "polars.Catalog.get_table_info": [[189, null]], "polars.Catalog.list_catalogs": [[190, null]], "polars.Catalog.list_namespaces": [[191, null]], "polars.Catalog.list_tables": [[192, null]], "polars.Catalog.scan_table": [[193, null]], "polars.Config.load": [[2, null]], "polars.Config.load_from_file": [[3, null]], "polars.Config.restore_defaults": [[4, null]], "polars.Config.save": [[5, null]], "polars.Config.save_to_file": [[6, null]], "polars.Config.set_ascii_tables": [[7, null]], "polars.Config.set_auto_structify": [[8, null]], "polars.Config.set_decimal_separator": [[9, null]], "polars.Config.set_engine_affinity": [[10, null]], "polars.Config.set_float_precision": [[11, null]], "polars.Config.set_fmt_float": [[12, null]], "polars.Config.set_fmt_str_lengths": [[13, null]], "polars.Config.set_fmt_table_cell_list_len": [[14, null]], "polars.Config.set_streaming_chunk_size": [[15, null]], "polars.Config.set_tbl_cell_alignment": [[16, null]], "polars.Config.set_tbl_cell_numeric_alignment": [[17, null]], "polars.Config.set_tbl_cols": [[18, null]], "polars.Config.set_tbl_column_data_type_inline": [[19, null]], "polars.Config.set_tbl_dataframe_shape_below": [[20, null]], "polars.Config.set_tbl_formatting": [[21, null]], "polars.Config.set_tbl_hide_column_data_types": [[22, null]], "polars.Config.set_tbl_hide_column_names": [[23, null]], "polars.Config.set_tbl_hide_dataframe_shape": [[24, null]], "polars.Config.set_tbl_hide_dtype_separator": [[25, null]], "polars.Config.set_tbl_rows": [[26, null]], "polars.Config.set_tbl_width_chars": [[27, null]], "polars.Config.set_thousands_separator": [[28, null]], "polars.Config.set_trim_decimal_zeros": [[29, null]], "polars.Config.set_verbose": [[30, null]], "polars.Config.state": [[31, null]], "polars.CredentialProvider": [[32, null]], "polars.CredentialProviderAWS": [[33, null]], "polars.CredentialProviderAzure": [[34, null]], "polars.CredentialProviderGCP": [[35, null]], "polars.DataFrame.__array__": [[205, null]], "polars.DataFrame.__arrow_c_stream__": [[206, null]], "polars.DataFrame.__dataframe__": [[207, null]], "polars.DataFrame.__getitem__": [[208, null]], "polars.DataFrame.approx_n_unique": [[209, null]], "polars.DataFrame.bottom_k": [[210, null]], "polars.DataFrame.cast": [[211, null]], "polars.DataFrame.clear": [[212, null]], "polars.DataFrame.clone": [[213, null]], "polars.DataFrame.collect_schema": [[214, null]], "polars.DataFrame.columns": [[215, null]], "polars.DataFrame.corr": [[216, null]], "polars.DataFrame.count": [[217, null]], "polars.DataFrame.describe": [[218, null]], "polars.DataFrame.deserialize": [[219, null]], "polars.DataFrame.drop": [[220, null]], "polars.DataFrame.drop_in_place": [[221, null]], "polars.DataFrame.drop_nans": [[222, null]], "polars.DataFrame.drop_nulls": [[223, null]], "polars.DataFrame.dtypes": [[224, null]], "polars.DataFrame.equals": [[225, null]], "polars.DataFrame.estimated_size": [[226, null]], "polars.DataFrame.explode": [[227, null]], "polars.DataFrame.extend": [[228, null]], "polars.DataFrame.fill_nan": [[229, null]], "polars.DataFrame.fill_null": [[230, null]], "polars.DataFrame.filter": [[231, null]], "polars.DataFrame.flags": [[232, null]], "polars.DataFrame.fold": [[233, null]], "polars.DataFrame.gather_every": [[234, null]], "polars.DataFrame.get_column": [[235, null]], "polars.DataFrame.get_column_index": [[236, null]], "polars.DataFrame.get_columns": [[237, null]], "polars.DataFrame.glimpse": [[238, null]], "polars.DataFrame.group_by": [[239, null]], "polars.DataFrame.group_by_dynamic": [[240, null]], "polars.DataFrame.hash_rows": [[241, null]], "polars.DataFrame.head": [[242, null]], "polars.DataFrame.height": [[243, null]], "polars.DataFrame.hstack": [[244, null]], "polars.DataFrame.insert_column": [[245, null]], "polars.DataFrame.interpolate": [[246, null]], "polars.DataFrame.is_duplicated": [[247, null]], "polars.DataFrame.is_empty": [[248, null]], "polars.DataFrame.is_unique": [[249, null]], "polars.DataFrame.item": [[250, null]], "polars.DataFrame.iter_columns": [[251, null]], "polars.DataFrame.iter_rows": [[252, null]], "polars.DataFrame.iter_slices": [[253, null]], "polars.DataFrame.join": [[254, null]], "polars.DataFrame.join_asof": [[255, null]], "polars.DataFrame.join_where": [[256, null]], "polars.DataFrame.lazy": [[257, null]], "polars.DataFrame.limit": [[258, null]], "polars.DataFrame.map_rows": [[259, null]], "polars.DataFrame.max": [[260, null]], "polars.DataFrame.max_horizontal": [[261, null]], "polars.DataFrame.mean": [[262, null]], "polars.DataFrame.mean_horizontal": [[263, null]], "polars.DataFrame.median": [[264, null]], "polars.DataFrame.melt": [[265, null]], "polars.DataFrame.merge_sorted": [[266, null]], "polars.DataFrame.min": [[267, null]], "polars.DataFrame.min_horizontal": [[268, null]], "polars.DataFrame.n_chunks": [[269, null]], "polars.DataFrame.n_unique": [[270, null]], "polars.DataFrame.null_count": [[271, null]], "polars.DataFrame.partition_by": [[272, null]], "polars.DataFrame.pipe": [[273, null]], "polars.DataFrame.pivot": [[274, null]], "polars.DataFrame.product": [[275, null]], "polars.DataFrame.quantile": [[276, null]], "polars.DataFrame.rechunk": [[277, null]], "polars.DataFrame.remove": [[278, null]], "polars.DataFrame.rename": [[279, null]], "polars.DataFrame.replace_column": [[280, null]], "polars.DataFrame.reverse": [[281, null]], "polars.DataFrame.rolling": [[282, null]], "polars.DataFrame.row": [[283, null]], "polars.DataFrame.rows": [[284, null]], "polars.DataFrame.rows_by_key": [[285, null]], "polars.DataFrame.sample": [[286, null]], "polars.DataFrame.schema": [[287, null]], "polars.DataFrame.select": [[288, null]], "polars.DataFrame.select_seq": [[289, null]], "polars.DataFrame.serialize": [[290, null]], "polars.DataFrame.set_sorted": [[291, null]], "polars.DataFrame.shape": [[292, null]], "polars.DataFrame.shift": [[293, null]], "polars.DataFrame.shrink_to_fit": [[294, null]], "polars.DataFrame.slice": [[295, null]], "polars.DataFrame.sort": [[296, null]], "polars.DataFrame.sql": [[297, null]], "polars.DataFrame.std": [[298, null]], "polars.DataFrame.sum": [[299, null]], "polars.DataFrame.sum_horizontal": [[300, null]], "polars.DataFrame.tail": [[301, null]], "polars.DataFrame.to_arrow": [[302, null]], "polars.DataFrame.to_dict": [[303, null]], "polars.DataFrame.to_dicts": [[304, null]], "polars.DataFrame.to_dummies": [[305, null]], "polars.DataFrame.to_init_repr": [[306, null]], "polars.DataFrame.to_jax": [[307, null]], "polars.DataFrame.to_numpy": [[308, null]], "polars.DataFrame.to_pandas": [[309, null]], "polars.DataFrame.to_series": [[310, null]], "polars.DataFrame.to_struct": [[311, null]], "polars.DataFrame.to_torch": [[312, null]], "polars.DataFrame.top_k": [[313, null]], "polars.DataFrame.transpose": [[314, null]], "polars.DataFrame.unique": [[315, null]], "polars.DataFrame.unnest": [[316, null]], "polars.DataFrame.unpivot": [[317, null]], "polars.DataFrame.unstack": [[318, null]], "polars.DataFrame.update": [[319, null]], "polars.DataFrame.upsample": [[320, null]], "polars.DataFrame.var": [[321, null]], "polars.DataFrame.vstack": [[322, null]], "polars.DataFrame.width": [[323, null]], "polars.DataFrame.with_columns": [[324, null]], "polars.DataFrame.with_columns_seq": [[325, null]], "polars.DataFrame.with_row_count": [[326, null]], "polars.DataFrame.with_row_index": [[327, null]], "polars.DataFrame.write_avro": [[36, null]], "polars.DataFrame.write_clipboard": [[37, null]], "polars.DataFrame.write_csv": [[38, null]], "polars.DataFrame.write_database": [[39, null]], "polars.DataFrame.write_delta": [[40, null]], "polars.DataFrame.write_excel": [[41, null]], "polars.DataFrame.write_iceberg": [[42, null]], "polars.DataFrame.write_ipc": [[43, null]], "polars.DataFrame.write_ipc_stream": [[44, null]], "polars.DataFrame.write_json": [[45, null]], "polars.DataFrame.write_ndjson": [[46, null]], "polars.DataFrame.write_parquet": [[47, null]], "polars.Expr.abs": [[358, null]], "polars.Expr.add": [[359, null]], "polars.Expr.agg_groups": [[360, null]], "polars.Expr.alias": [[361, null]], "polars.Expr.all": [[362, null]], "polars.Expr.and_": [[363, null]], "polars.Expr.any": [[364, null]], "polars.Expr.append": [[365, null]], "polars.Expr.approx_n_unique": [[366, null]], "polars.Expr.arccos": [[367, null]], "polars.Expr.arccosh": [[368, null]], "polars.Expr.arcsin": [[369, null]], "polars.Expr.arcsinh": [[370, null]], "polars.Expr.arctan": [[371, null]], "polars.Expr.arctanh": [[372, null]], "polars.Expr.arg_max": [[373, null]], "polars.Expr.arg_min": [[374, null]], "polars.Expr.arg_sort": [[375, null]], "polars.Expr.arg_true": [[376, null]], "polars.Expr.arg_unique": [[377, null]], "polars.Expr.arr.all": [[378, null]], "polars.Expr.arr.any": [[379, null]], "polars.Expr.arr.arg_max": [[380, null]], "polars.Expr.arr.arg_min": [[381, null]], "polars.Expr.arr.contains": [[382, null]], "polars.Expr.arr.count_matches": [[383, null]], "polars.Expr.arr.explode": [[384, null]], "polars.Expr.arr.first": [[385, null]], "polars.Expr.arr.get": [[386, null]], "polars.Expr.arr.join": [[387, null]], "polars.Expr.arr.last": [[388, null]], "polars.Expr.arr.max": [[389, null]], "polars.Expr.arr.median": [[390, null]], "polars.Expr.arr.min": [[391, null]], "polars.Expr.arr.n_unique": [[392, null]], "polars.Expr.arr.reverse": [[393, null]], "polars.Expr.arr.shift": [[394, null]], "polars.Expr.arr.sort": [[395, null]], "polars.Expr.arr.std": [[396, null]], "polars.Expr.arr.sum": [[397, null]], "polars.Expr.arr.to_list": [[398, null]], "polars.Expr.arr.to_struct": [[399, null]], "polars.Expr.arr.unique": [[400, null]], "polars.Expr.arr.var": [[401, null]], "polars.Expr.backward_fill": [[402, null]], "polars.Expr.bin.contains": [[403, null]], "polars.Expr.bin.decode": [[404, null]], "polars.Expr.bin.encode": [[405, null]], "polars.Expr.bin.ends_with": [[406, null]], "polars.Expr.bin.reinterpret": [[407, null]], "polars.Expr.bin.size": [[408, null]], "polars.Expr.bin.starts_with": [[409, null]], "polars.Expr.bitwise_and": [[410, null]], "polars.Expr.bitwise_count_ones": [[411, null]], "polars.Expr.bitwise_count_zeros": [[412, null]], "polars.Expr.bitwise_leading_ones": [[413, null]], "polars.Expr.bitwise_leading_zeros": [[414, null]], "polars.Expr.bitwise_or": [[415, null]], "polars.Expr.bitwise_trailing_ones": [[416, null]], "polars.Expr.bitwise_trailing_zeros": [[417, null]], "polars.Expr.bitwise_xor": [[418, null]], "polars.Expr.bottom_k": [[419, null]], "polars.Expr.bottom_k_by": [[420, null]], "polars.Expr.cast": [[421, null]], "polars.Expr.cat.ends_with": [[422, null]], "polars.Expr.cat.get_categories": [[423, null]], "polars.Expr.cat.len_bytes": [[424, null]], "polars.Expr.cat.len_chars": [[425, null]], "polars.Expr.cat.starts_with": [[426, null]], "polars.Expr.cbrt": [[427, null]], "polars.Expr.ceil": [[428, null]], "polars.Expr.clip": [[429, null]], "polars.Expr.cos": [[430, null]], "polars.Expr.cosh": [[431, null]], "polars.Expr.cot": [[432, null]], "polars.Expr.count": [[433, null]], "polars.Expr.cum_count": [[434, null]], "polars.Expr.cum_max": [[435, null]], "polars.Expr.cum_min": [[436, null]], "polars.Expr.cum_prod": [[437, null]], "polars.Expr.cum_sum": [[438, null]], "polars.Expr.cumulative_eval": [[439, null]], "polars.Expr.cut": [[440, null]], "polars.Expr.degrees": [[441, null]], "polars.Expr.deserialize": [[442, null]], "polars.Expr.diff": [[443, null]], "polars.Expr.dot": [[444, null]], "polars.Expr.drop_nans": [[445, null]], "polars.Expr.drop_nulls": [[446, null]], "polars.Expr.dt.add_business_days": [[447, null]], "polars.Expr.dt.base_utc_offset": [[448, null]], "polars.Expr.dt.cast_time_unit": [[449, null]], "polars.Expr.dt.century": [[450, null]], "polars.Expr.dt.combine": [[451, null]], "polars.Expr.dt.convert_time_zone": [[452, null]], "polars.Expr.dt.date": [[453, null]], "polars.Expr.dt.datetime": [[454, null]], "polars.Expr.dt.day": [[455, null]], "polars.Expr.dt.dst_offset": [[456, null]], "polars.Expr.dt.epoch": [[457, null]], "polars.Expr.dt.hour": [[458, null]], "polars.Expr.dt.is_business_day": [[459, null]], "polars.Expr.dt.is_leap_year": [[460, null]], "polars.Expr.dt.iso_year": [[461, null]], "polars.Expr.dt.microsecond": [[462, null]], "polars.Expr.dt.millennium": [[463, null]], "polars.Expr.dt.millisecond": [[464, null]], "polars.Expr.dt.minute": [[465, null]], "polars.Expr.dt.month": [[466, null]], "polars.Expr.dt.month_end": [[467, null]], "polars.Expr.dt.month_start": [[468, null]], "polars.Expr.dt.nanosecond": [[469, null]], "polars.Expr.dt.offset_by": [[470, null]], "polars.Expr.dt.ordinal_day": [[471, null]], "polars.Expr.dt.quarter": [[472, null]], "polars.Expr.dt.replace": [[473, null]], "polars.Expr.dt.replace_time_zone": [[474, null]], "polars.Expr.dt.round": [[475, null]], "polars.Expr.dt.second": [[476, null]], "polars.Expr.dt.strftime": [[477, null]], "polars.Expr.dt.time": [[478, null]], "polars.Expr.dt.timestamp": [[479, null]], "polars.Expr.dt.to_string": [[480, null]], "polars.Expr.dt.total_days": [[481, null]], "polars.Expr.dt.total_hours": [[482, null]], "polars.Expr.dt.total_microseconds": [[483, null]], "polars.Expr.dt.total_milliseconds": [[484, null]], "polars.Expr.dt.total_minutes": [[485, null]], "polars.Expr.dt.total_nanoseconds": [[486, null]], "polars.Expr.dt.total_seconds": [[487, null]], "polars.Expr.dt.truncate": [[488, null]], "polars.Expr.dt.week": [[489, null]], "polars.Expr.dt.weekday": [[490, null]], "polars.Expr.dt.with_time_unit": [[491, null]], "polars.Expr.dt.year": [[492, null]], "polars.Expr.entropy": [[493, null]], "polars.Expr.eq": [[494, null]], "polars.Expr.eq_missing": [[495, null]], "polars.Expr.ewm_mean": [[496, null]], "polars.Expr.ewm_mean_by": [[497, null]], "polars.Expr.ewm_std": [[498, null]], "polars.Expr.ewm_var": [[499, null]], "polars.Expr.exclude": [[500, null]], "polars.Expr.exp": [[501, null]], "polars.Expr.explode": [[502, null]], "polars.Expr.extend_constant": [[503, null]], "polars.Expr.fill_nan": [[504, null]], "polars.Expr.fill_null": [[505, null]], "polars.Expr.filter": [[506, null]], "polars.Expr.first": [[507, null]], "polars.Expr.flatten": [[508, null]], "polars.Expr.floor": [[509, null]], "polars.Expr.floordiv": [[510, null]], "polars.Expr.forward_fill": [[511, null]], "polars.Expr.from_json": [[512, null]], "polars.Expr.gather": [[513, null]], "polars.Expr.gather_every": [[514, null]], "polars.Expr.ge": [[515, null]], "polars.Expr.get": [[516, null]], "polars.Expr.gt": [[517, null]], "polars.Expr.has_nulls": [[518, null]], "polars.Expr.hash": [[519, null]], "polars.Expr.head": [[520, null]], "polars.Expr.hist": [[521, null]], "polars.Expr.implode": [[522, null]], "polars.Expr.index_of": [[523, null]], "polars.Expr.inspect": [[524, null]], "polars.Expr.interpolate": [[525, null]], "polars.Expr.interpolate_by": [[526, null]], "polars.Expr.is_between": [[527, null]], "polars.Expr.is_duplicated": [[528, null]], "polars.Expr.is_finite": [[529, null]], "polars.Expr.is_first_distinct": [[530, null]], "polars.Expr.is_in": [[531, null]], "polars.Expr.is_infinite": [[532, null]], "polars.Expr.is_last_distinct": [[533, null]], "polars.Expr.is_nan": [[534, null]], "polars.Expr.is_not_nan": [[535, null]], "polars.Expr.is_not_null": [[536, null]], "polars.Expr.is_null": [[537, null]], "polars.Expr.is_unique": [[538, null]], "polars.Expr.kurtosis": [[539, null]], "polars.Expr.last": [[540, null]], "polars.Expr.le": [[541, null]], "polars.Expr.len": [[542, null]], "polars.Expr.limit": [[543, null]], "polars.Expr.list.all": [[544, null]], "polars.Expr.list.any": [[545, null]], "polars.Expr.list.arg_max": [[546, null]], "polars.Expr.list.arg_min": [[547, null]], "polars.Expr.list.concat": [[548, null]], "polars.Expr.list.contains": [[549, null]], "polars.Expr.list.count_matches": [[550, null]], "polars.Expr.list.diff": [[551, null]], "polars.Expr.list.drop_nulls": [[552, null]], "polars.Expr.list.eval": [[553, null]], "polars.Expr.list.explode": [[554, null]], "polars.Expr.list.first": [[555, null]], "polars.Expr.list.gather": [[556, null]], "polars.Expr.list.gather_every": [[557, null]], "polars.Expr.list.get": [[558, null]], "polars.Expr.list.head": [[559, null]], "polars.Expr.list.join": [[560, null]], "polars.Expr.list.last": [[561, null]], "polars.Expr.list.len": [[562, null]], "polars.Expr.list.max": [[563, null]], "polars.Expr.list.mean": [[564, null]], "polars.Expr.list.median": [[565, null]], "polars.Expr.list.min": [[566, null]], "polars.Expr.list.n_unique": [[567, null]], "polars.Expr.list.reverse": [[568, null]], "polars.Expr.list.sample": [[569, null]], "polars.Expr.list.set_difference": [[570, null]], "polars.Expr.list.set_intersection": [[571, null]], "polars.Expr.list.set_symmetric_difference": [[572, null]], "polars.Expr.list.set_union": [[573, null]], "polars.Expr.list.shift": [[574, null]], "polars.Expr.list.slice": [[575, null]], "polars.Expr.list.sort": [[576, null]], "polars.Expr.list.std": [[577, null]], "polars.Expr.list.sum": [[578, null]], "polars.Expr.list.tail": [[579, null]], "polars.Expr.list.to_array": [[580, null]], "polars.Expr.list.to_struct": [[581, null]], "polars.Expr.list.unique": [[582, null]], "polars.Expr.list.var": [[583, null]], "polars.Expr.log": [[584, null]], "polars.Expr.log10": [[585, null]], "polars.Expr.log1p": [[586, null]], "polars.Expr.lower_bound": [[587, null]], "polars.Expr.lt": [[588, null]], "polars.Expr.map_batches": [[589, null]], "polars.Expr.map_elements": [[590, null]], "polars.Expr.max": [[591, null]], "polars.Expr.mean": [[592, null]], "polars.Expr.median": [[593, null]], "polars.Expr.meta.eq": [[594, null]], "polars.Expr.meta.has_multiple_outputs": [[595, null]], "polars.Expr.meta.is_column": [[596, null]], "polars.Expr.meta.is_column_selection": [[597, null]], "polars.Expr.meta.is_literal": [[598, null]], "polars.Expr.meta.is_regex_projection": [[599, null]], "polars.Expr.meta.ne": [[600, null]], "polars.Expr.meta.output_name": [[601, null]], "polars.Expr.meta.pop": [[602, null]], "polars.Expr.meta.root_names": [[603, null]], "polars.Expr.meta.serialize": [[604, null]], "polars.Expr.meta.show_graph": [[605, null]], "polars.Expr.meta.tree_format": [[606, null]], "polars.Expr.meta.undo_aliases": [[607, null]], "polars.Expr.meta.write_json": [[608, null]], "polars.Expr.min": [[609, null]], "polars.Expr.mod": [[610, null]], "polars.Expr.mode": [[611, null]], "polars.Expr.mul": [[612, null]], "polars.Expr.n_unique": [[613, null]], "polars.Expr.name.keep": [[614, null]], "polars.Expr.name.map": [[615, null]], "polars.Expr.name.map_fields": [[616, null]], "polars.Expr.name.prefix": [[617, null]], "polars.Expr.name.prefix_fields": [[618, null]], "polars.Expr.name.suffix": [[619, null]], "polars.Expr.name.suffix_fields": [[620, null]], "polars.Expr.name.to_lowercase": [[621, null]], "polars.Expr.name.to_uppercase": [[622, null]], "polars.Expr.nan_max": [[623, null]], "polars.Expr.nan_min": [[624, null]], "polars.Expr.ne": [[625, null]], "polars.Expr.ne_missing": [[626, null]], "polars.Expr.neg": [[627, null]], "polars.Expr.not_": [[628, null]], "polars.Expr.null_count": [[629, null]], "polars.Expr.or_": [[630, null]], "polars.Expr.over": [[631, null]], "polars.Expr.pct_change": [[632, null]], "polars.Expr.peak_max": [[633, null]], "polars.Expr.peak_min": [[634, null]], "polars.Expr.pipe": [[635, null]], "polars.Expr.pow": [[636, null]], "polars.Expr.product": [[637, null]], "polars.Expr.qcut": [[638, null]], "polars.Expr.quantile": [[639, null]], "polars.Expr.radians": [[640, null]], "polars.Expr.rank": [[641, null]], "polars.Expr.rechunk": [[642, null]], "polars.Expr.reinterpret": [[643, null]], "polars.Expr.repeat_by": [[644, null]], "polars.Expr.replace": [[645, null]], "polars.Expr.replace_strict": [[646, null]], "polars.Expr.reshape": [[647, null]], "polars.Expr.reverse": [[648, null]], "polars.Expr.rle": [[649, null]], "polars.Expr.rle_id": [[650, null]], "polars.Expr.rolling": [[651, null]], "polars.Expr.rolling_kurtosis": [[652, null]], "polars.Expr.rolling_map": [[653, null]], "polars.Expr.rolling_max": [[654, null]], "polars.Expr.rolling_max_by": [[655, null]], "polars.Expr.rolling_mean": [[656, null]], "polars.Expr.rolling_mean_by": [[657, null]], "polars.Expr.rolling_median": [[658, null]], "polars.Expr.rolling_median_by": [[659, null]], "polars.Expr.rolling_min": [[660, null]], "polars.Expr.rolling_min_by": [[661, null]], "polars.Expr.rolling_quantile": [[662, null]], "polars.Expr.rolling_quantile_by": [[663, null]], "polars.Expr.rolling_skew": [[664, null]], "polars.Expr.rolling_std": [[665, null]], "polars.Expr.rolling_std_by": [[666, null]], "polars.Expr.rolling_sum": [[667, null]], "polars.Expr.rolling_sum_by": [[668, null]], "polars.Expr.rolling_var": [[669, null]], "polars.Expr.rolling_var_by": [[670, null]], "polars.Expr.round": [[671, null]], "polars.Expr.round_sig_figs": [[672, null]], "polars.Expr.sample": [[673, null]], "polars.Expr.search_sorted": [[674, null]], "polars.Expr.set_sorted": [[675, null]], "polars.Expr.shift": [[676, null]], "polars.Expr.shrink_dtype": [[677, null]], "polars.Expr.shuffle": [[678, null]], "polars.Expr.sign": [[679, null]], "polars.Expr.sin": [[680, null]], "polars.Expr.sinh": [[681, null]], "polars.Expr.skew": [[682, null]], "polars.Expr.slice": [[683, null]], "polars.Expr.sort": [[684, null]], "polars.Expr.sort_by": [[685, null]], "polars.Expr.sqrt": [[686, null]], "polars.Expr.std": [[687, null]], "polars.Expr.str.concat": [[688, null]], "polars.Expr.str.contains": [[689, null]], "polars.Expr.str.contains_any": [[690, null]], "polars.Expr.str.count_matches": [[691, null]], "polars.Expr.str.decode": [[692, null]], "polars.Expr.str.encode": [[693, null]], "polars.Expr.str.ends_with": [[694, null]], "polars.Expr.str.escape_regex": [[695, null]], "polars.Expr.str.explode": [[696, null]], "polars.Expr.str.extract": [[697, null]], "polars.Expr.str.extract_all": [[698, null]], "polars.Expr.str.extract_groups": [[699, null]], "polars.Expr.str.extract_many": [[700, null]], "polars.Expr.str.find": [[701, null]], "polars.Expr.str.find_many": [[702, null]], "polars.Expr.str.head": [[703, null]], "polars.Expr.str.join": [[704, null]], "polars.Expr.str.json_decode": [[705, null]], "polars.Expr.str.json_path_match": [[706, null]], "polars.Expr.str.len_bytes": [[707, null]], "polars.Expr.str.len_chars": [[708, null]], "polars.Expr.str.normalize": [[709, null]], "polars.Expr.str.pad_end": [[710, null]], "polars.Expr.str.pad_start": [[711, null]], "polars.Expr.str.replace": [[712, null]], "polars.Expr.str.replace_all": [[713, null]], "polars.Expr.str.replace_many": [[714, null]], "polars.Expr.str.reverse": [[715, null]], "polars.Expr.str.slice": [[716, null]], "polars.Expr.str.split": [[717, null]], "polars.Expr.str.split_exact": [[718, null]], "polars.Expr.str.splitn": [[719, null]], "polars.Expr.str.starts_with": [[720, null]], "polars.Expr.str.strip_chars": [[721, null]], "polars.Expr.str.strip_chars_end": [[722, null]], "polars.Expr.str.strip_chars_start": [[723, null]], "polars.Expr.str.strip_prefix": [[724, null]], "polars.Expr.str.strip_suffix": [[725, null]], "polars.Expr.str.strptime": [[726, null]], "polars.Expr.str.tail": [[727, null]], "polars.Expr.str.to_date": [[728, null]], "polars.Expr.str.to_datetime": [[729, null]], "polars.Expr.str.to_decimal": [[730, null]], "polars.Expr.str.to_integer": [[731, null]], "polars.Expr.str.to_lowercase": [[732, null]], "polars.Expr.str.to_time": [[733, null]], "polars.Expr.str.to_titlecase": [[734, null]], "polars.Expr.str.to_uppercase": [[735, null]], "polars.Expr.str.zfill": [[736, null]], "polars.Expr.struct.field": [[737, null]], "polars.Expr.struct.json_encode": [[738, null]], "polars.Expr.struct.rename_fields": [[739, null]], "polars.Expr.struct.unnest": [[740, null]], "polars.Expr.struct.with_fields": [[741, null]], "polars.Expr.sub": [[742, null]], "polars.Expr.sum": [[743, null]], "polars.Expr.tail": [[744, null]], "polars.Expr.tan": [[745, null]], "polars.Expr.tanh": [[746, null]], "polars.Expr.to_physical": [[747, null]], "polars.Expr.top_k": [[748, null]], "polars.Expr.top_k_by": [[749, null]], "polars.Expr.truediv": [[750, null]], "polars.Expr.unique": [[751, null]], "polars.Expr.unique_counts": [[752, null]], "polars.Expr.upper_bound": [[753, null]], "polars.Expr.value_counts": [[754, null]], "polars.Expr.var": [[755, null]], "polars.Expr.where": [[756, null]], "polars.Expr.xor": [[757, null]], "polars.LazyFrame.approx_n_unique": [[858, null]], "polars.LazyFrame.bottom_k": [[859, null]], "polars.LazyFrame.cache": [[860, null]], "polars.LazyFrame.cast": [[861, null]], "polars.LazyFrame.clear": [[862, null]], "polars.LazyFrame.clone": [[863, null]], "polars.LazyFrame.collect": [[864, null]], "polars.LazyFrame.collect_async": [[865, null]], "polars.LazyFrame.collect_schema": [[866, null]], "polars.LazyFrame.columns": [[867, null]], "polars.LazyFrame.count": [[868, null]], "polars.LazyFrame.describe": [[869, null]], "polars.LazyFrame.deserialize": [[870, null]], "polars.LazyFrame.drop": [[871, null]], "polars.LazyFrame.drop_nans": [[872, null]], "polars.LazyFrame.drop_nulls": [[873, null]], "polars.LazyFrame.dtypes": [[874, null]], "polars.LazyFrame.explain": [[875, null]], "polars.LazyFrame.explode": [[876, null]], "polars.LazyFrame.fill_nan": [[877, null]], "polars.LazyFrame.fill_null": [[878, null]], "polars.LazyFrame.filter": [[879, null]], "polars.LazyFrame.first": [[880, null]], "polars.LazyFrame.gather_every": [[881, null]], "polars.LazyFrame.group_by": [[882, null]], "polars.LazyFrame.group_by_dynamic": [[883, null]], "polars.LazyFrame.head": [[884, null]], "polars.LazyFrame.inspect": [[885, null]], "polars.LazyFrame.interpolate": [[886, null]], "polars.LazyFrame.join": [[887, null]], "polars.LazyFrame.join_asof": [[888, null]], "polars.LazyFrame.join_where": [[889, null]], "polars.LazyFrame.last": [[890, null]], "polars.LazyFrame.lazy": [[891, null]], "polars.LazyFrame.limit": [[892, null]], "polars.LazyFrame.map_batches": [[893, null]], "polars.LazyFrame.max": [[894, null]], "polars.LazyFrame.mean": [[895, null]], "polars.LazyFrame.median": [[896, null]], "polars.LazyFrame.melt": [[897, null]], "polars.LazyFrame.merge_sorted": [[898, null]], "polars.LazyFrame.min": [[899, null]], "polars.LazyFrame.null_count": [[900, null]], "polars.LazyFrame.pipe": [[901, null]], "polars.LazyFrame.profile": [[902, null]], "polars.LazyFrame.quantile": [[903, null]], "polars.LazyFrame.remote": [[904, null]], "polars.LazyFrame.remove": [[905, null]], "polars.LazyFrame.rename": [[906, null]], "polars.LazyFrame.reverse": [[907, null]], "polars.LazyFrame.rolling": [[908, null]], "polars.LazyFrame.schema": [[909, null]], "polars.LazyFrame.select": [[910, null]], "polars.LazyFrame.select_seq": [[911, null]], "polars.LazyFrame.serialize": [[912, null]], "polars.LazyFrame.set_sorted": [[913, null]], "polars.LazyFrame.shift": [[914, null]], "polars.LazyFrame.show_graph": [[915, null]], "polars.LazyFrame.sink_csv": [[48, null]], "polars.LazyFrame.sink_ipc": [[49, null]], "polars.LazyFrame.sink_ndjson": [[50, null]], "polars.LazyFrame.sink_parquet": [[51, null]], "polars.LazyFrame.slice": [[916, null]], "polars.LazyFrame.sort": [[917, null]], "polars.LazyFrame.sql": [[918, null]], "polars.LazyFrame.std": [[919, null]], "polars.LazyFrame.sum": [[920, null]], "polars.LazyFrame.tail": [[921, null]], "polars.LazyFrame.top_k": [[922, null]], "polars.LazyFrame.unique": [[923, null]], "polars.LazyFrame.unnest": [[924, null]], "polars.LazyFrame.unpivot": [[925, null]], "polars.LazyFrame.update": [[926, null]], "polars.LazyFrame.var": [[927, null]], "polars.LazyFrame.width": [[928, null]], "polars.LazyFrame.with_columns": [[929, null]], "polars.LazyFrame.with_columns_seq": [[930, null]], "polars.LazyFrame.with_context": [[931, null]], "polars.LazyFrame.with_row_count": [[932, null]], "polars.LazyFrame.with_row_index": [[933, null]], "polars.PartitionByKey": [[52, null]], "polars.PartitionMaxSize": [[53, null]], "polars.PartitionParted": [[54, null]], "polars.SQLContext.execute": [[1367, null]], "polars.SQLContext.execute_global": [[1368, null]], "polars.SQLContext.register": [[1369, null]], "polars.SQLContext.register_globals": [[1370, null]], "polars.SQLContext.register_many": [[1371, null]], "polars.SQLContext.tables": [[1372, null]], "polars.SQLContext.unregister": [[1373, null]], "polars.Series.__array__": [[967, null]], "polars.Series.__arrow_c_stream__": [[968, null]], "polars.Series.__getitem__": [[969, null]], "polars.Series.abs": [[970, null]], "polars.Series.alias": [[971, null]], "polars.Series.all": [[972, null]], "polars.Series.any": [[973, null]], "polars.Series.append": [[974, null]], "polars.Series.approx_n_unique": [[975, null]], "polars.Series.arccos": [[976, null]], "polars.Series.arccosh": [[977, null]], "polars.Series.arcsin": [[978, null]], "polars.Series.arcsinh": [[979, null]], "polars.Series.arctan": [[980, null]], "polars.Series.arctanh": [[981, null]], "polars.Series.arg_max": [[982, null]], "polars.Series.arg_min": [[983, null]], "polars.Series.arg_sort": [[984, null]], "polars.Series.arg_true": [[985, null]], "polars.Series.arg_unique": [[986, null]], "polars.Series.arr.all": [[987, null]], "polars.Series.arr.any": [[988, null]], "polars.Series.arr.arg_max": [[989, null]], "polars.Series.arr.arg_min": [[990, null]], "polars.Series.arr.contains": [[991, null]], "polars.Series.arr.count_matches": [[992, null]], "polars.Series.arr.explode": [[993, null]], "polars.Series.arr.first": [[994, null]], "polars.Series.arr.get": [[995, null]], "polars.Series.arr.join": [[996, null]], "polars.Series.arr.last": [[997, null]], "polars.Series.arr.max": [[998, null]], "polars.Series.arr.median": [[999, null]], "polars.Series.arr.min": [[1000, null]], "polars.Series.arr.n_unique": [[1001, null]], "polars.Series.arr.reverse": [[1002, null]], "polars.Series.arr.shift": [[1003, null]], "polars.Series.arr.sort": [[1004, null]], "polars.Series.arr.std": [[1005, null]], "polars.Series.arr.sum": [[1006, null]], "polars.Series.arr.to_list": [[1007, null]], "polars.Series.arr.to_struct": [[1008, null]], "polars.Series.arr.unique": [[1009, null]], "polars.Series.arr.var": [[1010, null]], "polars.Series.backward_fill": [[1011, null]], "polars.Series.bin.contains": [[1012, null]], "polars.Series.bin.decode": [[1013, null]], "polars.Series.bin.encode": [[1014, null]], "polars.Series.bin.ends_with": [[1015, null]], "polars.Series.bin.reinterpret": [[1016, null]], "polars.Series.bin.size": [[1017, null]], "polars.Series.bin.starts_with": [[1018, null]], "polars.Series.bitwise_and": [[1019, null]], "polars.Series.bitwise_count_ones": [[1020, null]], "polars.Series.bitwise_count_zeros": [[1021, null]], "polars.Series.bitwise_leading_ones": [[1022, null]], "polars.Series.bitwise_leading_zeros": [[1023, null]], "polars.Series.bitwise_or": [[1024, null]], "polars.Series.bitwise_trailing_ones": [[1025, null]], "polars.Series.bitwise_trailing_zeros": [[1026, null]], "polars.Series.bitwise_xor": [[1027, null]], "polars.Series.bottom_k": [[1028, null]], "polars.Series.cast": [[1029, null]], "polars.Series.cat.ends_with": [[1030, null]], "polars.Series.cat.get_categories": [[1031, null]], "polars.Series.cat.is_local": [[1032, null]], "polars.Series.cat.len_bytes": [[1033, null]], "polars.Series.cat.len_chars": [[1034, null]], "polars.Series.cat.starts_with": [[1035, null]], "polars.Series.cat.to_local": [[1036, null]], "polars.Series.cat.uses_lexical_ordering": [[1037, null]], "polars.Series.cbrt": [[1038, null]], "polars.Series.ceil": [[1039, null]], "polars.Series.chunk_lengths": [[1040, null]], "polars.Series.clear": [[1041, null]], "polars.Series.clip": [[1042, null]], "polars.Series.clone": [[1043, null]], "polars.Series.cos": [[1044, null]], "polars.Series.cosh": [[1045, null]], "polars.Series.cot": [[1046, null]], "polars.Series.count": [[1047, null]], "polars.Series.cum_count": [[1048, null]], "polars.Series.cum_max": [[1049, null]], "polars.Series.cum_min": [[1050, null]], "polars.Series.cum_prod": [[1051, null]], "polars.Series.cum_sum": [[1052, null]], "polars.Series.cumulative_eval": [[1053, null]], "polars.Series.cut": [[1054, null]], "polars.Series.describe": [[1055, null]], "polars.Series.diff": [[1056, null]], "polars.Series.dot": [[1057, null]], "polars.Series.drop_nans": [[1058, null]], "polars.Series.drop_nulls": [[1059, null]], "polars.Series.dt.add_business_days": [[1060, null]], "polars.Series.dt.base_utc_offset": [[1061, null]], "polars.Series.dt.cast_time_unit": [[1062, null]], "polars.Series.dt.century": [[1063, null]], "polars.Series.dt.combine": [[1064, null]], "polars.Series.dt.convert_time_zone": [[1065, null]], "polars.Series.dt.date": [[1066, null]], "polars.Series.dt.datetime": [[1067, null]], "polars.Series.dt.day": [[1068, null]], "polars.Series.dt.dst_offset": [[1069, null]], "polars.Series.dt.epoch": [[1070, null]], "polars.Series.dt.hour": [[1071, null]], "polars.Series.dt.is_business_day": [[1072, null]], "polars.Series.dt.is_leap_year": [[1073, null]], "polars.Series.dt.iso_year": [[1074, null]], "polars.Series.dt.max": [[1075, null]], "polars.Series.dt.mean": [[1076, null]], "polars.Series.dt.median": [[1077, null]], "polars.Series.dt.microsecond": [[1078, null]], "polars.Series.dt.millennium": [[1079, null]], "polars.Series.dt.millisecond": [[1080, null]], "polars.Series.dt.min": [[1081, null]], "polars.Series.dt.minute": [[1082, null]], "polars.Series.dt.month": [[1083, null]], "polars.Series.dt.month_end": [[1084, null]], "polars.Series.dt.month_start": [[1085, null]], "polars.Series.dt.nanosecond": [[1086, null]], "polars.Series.dt.offset_by": [[1087, null]], "polars.Series.dt.ordinal_day": [[1088, null]], "polars.Series.dt.quarter": [[1089, null]], "polars.Series.dt.replace": [[1090, null]], "polars.Series.dt.replace_time_zone": [[1091, null]], "polars.Series.dt.round": [[1092, null]], "polars.Series.dt.second": [[1093, null]], "polars.Series.dt.strftime": [[1094, null]], "polars.Series.dt.time": [[1095, null]], "polars.Series.dt.timestamp": [[1096, null]], "polars.Series.dt.to_string": [[1097, null]], "polars.Series.dt.total_days": [[1098, null]], "polars.Series.dt.total_hours": [[1099, null]], "polars.Series.dt.total_microseconds": [[1100, null]], "polars.Series.dt.total_milliseconds": [[1101, null]], "polars.Series.dt.total_minutes": [[1102, null]], "polars.Series.dt.total_nanoseconds": [[1103, null]], "polars.Series.dt.total_seconds": [[1104, null]], "polars.Series.dt.truncate": [[1105, null]], "polars.Series.dt.week": [[1106, null]], "polars.Series.dt.weekday": [[1107, null]], "polars.Series.dt.with_time_unit": [[1108, null]], "polars.Series.dt.year": [[1109, null]], "polars.Series.dtype": [[1110, null]], "polars.Series.entropy": [[1111, null]], "polars.Series.eq": [[1112, null]], "polars.Series.eq_missing": [[1113, null]], "polars.Series.equals": [[1114, null]], "polars.Series.estimated_size": [[1115, null]], "polars.Series.ewm_mean": [[1116, null]], "polars.Series.ewm_mean_by": [[1117, null]], "polars.Series.ewm_std": [[1118, null]], "polars.Series.ewm_var": [[1119, null]], "polars.Series.exp": [[1120, null]], "polars.Series.explode": [[1121, null]], "polars.Series.extend": [[1122, null]], "polars.Series.extend_constant": [[1123, null]], "polars.Series.fill_nan": [[1124, null]], "polars.Series.fill_null": [[1125, null]], "polars.Series.filter": [[1126, null]], "polars.Series.first": [[1127, null]], "polars.Series.flags": [[1128, null]], "polars.Series.floor": [[1129, null]], "polars.Series.forward_fill": [[1130, null]], "polars.Series.gather": [[1131, null]], "polars.Series.gather_every": [[1132, null]], "polars.Series.ge": [[1133, null]], "polars.Series.get_chunks": [[1134, null]], "polars.Series.gt": [[1135, null]], "polars.Series.has_nulls": [[1136, null]], "polars.Series.has_validity": [[1137, null]], "polars.Series.hash": [[1138, null]], "polars.Series.head": [[1139, null]], "polars.Series.hist": [[1140, null]], "polars.Series.implode": [[1141, null]], "polars.Series.index_of": [[1142, null]], "polars.Series.interpolate": [[1143, null]], "polars.Series.interpolate_by": [[1144, null]], "polars.Series.is_between": [[1145, null]], "polars.Series.is_duplicated": [[1146, null]], "polars.Series.is_empty": [[1147, null]], "polars.Series.is_finite": [[1148, null]], "polars.Series.is_first_distinct": [[1149, null]], "polars.Series.is_in": [[1150, null]], "polars.Series.is_infinite": [[1151, null]], "polars.Series.is_last_distinct": [[1152, null]], "polars.Series.is_nan": [[1153, null]], "polars.Series.is_not_nan": [[1154, null]], "polars.Series.is_not_null": [[1155, null]], "polars.Series.is_null": [[1156, null]], "polars.Series.is_sorted": [[1157, null]], "polars.Series.is_unique": [[1158, null]], "polars.Series.item": [[1159, null]], "polars.Series.kurtosis": [[1160, null]], "polars.Series.last": [[1161, null]], "polars.Series.le": [[1162, null]], "polars.Series.len": [[1163, null]], "polars.Series.limit": [[1164, null]], "polars.Series.list.all": [[1165, null]], "polars.Series.list.any": [[1166, null]], "polars.Series.list.arg_max": [[1167, null]], "polars.Series.list.arg_min": [[1168, null]], "polars.Series.list.concat": [[1169, null]], "polars.Series.list.contains": [[1170, null]], "polars.Series.list.count_matches": [[1171, null]], "polars.Series.list.diff": [[1172, null]], "polars.Series.list.drop_nulls": [[1173, null]], "polars.Series.list.eval": [[1174, null]], "polars.Series.list.explode": [[1175, null]], "polars.Series.list.first": [[1176, null]], "polars.Series.list.gather": [[1177, null]], "polars.Series.list.gather_every": [[1178, null]], "polars.Series.list.get": [[1179, null]], "polars.Series.list.head": [[1180, null]], "polars.Series.list.join": [[1181, null]], "polars.Series.list.last": [[1182, null]], "polars.Series.list.len": [[1183, null]], "polars.Series.list.max": [[1184, null]], "polars.Series.list.mean": [[1185, null]], "polars.Series.list.median": [[1186, null]], "polars.Series.list.min": [[1187, null]], "polars.Series.list.n_unique": [[1188, null]], "polars.Series.list.reverse": [[1189, null]], "polars.Series.list.sample": [[1190, null]], "polars.Series.list.set_difference": [[1191, null]], "polars.Series.list.set_intersection": [[1192, null]], "polars.Series.list.set_symmetric_difference": [[1193, null]], "polars.Series.list.set_union": [[1194, null]], "polars.Series.list.shift": [[1195, null]], "polars.Series.list.slice": [[1196, null]], "polars.Series.list.sort": [[1197, null]], "polars.Series.list.std": [[1198, null]], "polars.Series.list.sum": [[1199, null]], "polars.Series.list.tail": [[1200, null]], "polars.Series.list.to_array": [[1201, null]], "polars.Series.list.to_struct": [[1202, null]], "polars.Series.list.unique": [[1203, null]], "polars.Series.list.var": [[1204, null]], "polars.Series.log": [[1205, null]], "polars.Series.log10": [[1206, null]], "polars.Series.log1p": [[1207, null]], "polars.Series.lower_bound": [[1208, null]], "polars.Series.lt": [[1209, null]], "polars.Series.map_elements": [[1210, null]], "polars.Series.max": [[1211, null]], "polars.Series.mean": [[1212, null]], "polars.Series.median": [[1213, null]], "polars.Series.min": [[1214, null]], "polars.Series.mode": [[1215, null]], "polars.Series.n_chunks": [[1216, null]], "polars.Series.n_unique": [[1217, null]], "polars.Series.name": [[1218, null]], "polars.Series.nan_max": [[1219, null]], "polars.Series.nan_min": [[1220, null]], "polars.Series.ne": [[1221, null]], "polars.Series.ne_missing": [[1222, null]], "polars.Series.new_from_index": [[1223, null]], "polars.Series.not_": [[1224, null]], "polars.Series.null_count": [[1225, null]], "polars.Series.pct_change": [[1226, null]], "polars.Series.peak_max": [[1227, null]], "polars.Series.peak_min": [[1228, null]], "polars.Series.pow": [[1229, null]], "polars.Series.product": [[1230, null]], "polars.Series.qcut": [[1231, null]], "polars.Series.quantile": [[1232, null]], "polars.Series.rank": [[1233, null]], "polars.Series.rechunk": [[1234, null]], "polars.Series.reinterpret": [[1235, null]], "polars.Series.rename": [[1236, null]], "polars.Series.replace": [[1237, null]], "polars.Series.replace_strict": [[1238, null]], "polars.Series.reshape": [[1239, null]], "polars.Series.reverse": [[1240, null]], "polars.Series.rle": [[1241, null]], "polars.Series.rle_id": [[1242, null]], "polars.Series.rolling_kurtosis": [[1243, null]], "polars.Series.rolling_map": [[1244, null]], "polars.Series.rolling_max": [[1245, null]], "polars.Series.rolling_mean": [[1246, null]], "polars.Series.rolling_median": [[1247, null]], "polars.Series.rolling_min": [[1248, null]], "polars.Series.rolling_quantile": [[1249, null]], "polars.Series.rolling_skew": [[1250, null]], "polars.Series.rolling_std": [[1251, null]], "polars.Series.rolling_sum": [[1252, null]], "polars.Series.rolling_var": [[1253, null]], "polars.Series.round": [[1254, null]], "polars.Series.round_sig_figs": [[1255, null]], "polars.Series.sample": [[1256, null]], "polars.Series.scatter": [[1257, null]], "polars.Series.search_sorted": [[1258, null]], "polars.Series.set": [[1259, null]], "polars.Series.set_sorted": [[1260, null]], "polars.Series.shape": [[1261, null]], "polars.Series.shift": [[1262, null]], "polars.Series.shrink_dtype": [[1263, null]], "polars.Series.shrink_to_fit": [[1264, null]], "polars.Series.shuffle": [[1265, null]], "polars.Series.sign": [[1266, null]], "polars.Series.sin": [[1267, null]], "polars.Series.sinh": [[1268, null]], "polars.Series.skew": [[1269, null]], "polars.Series.slice": [[1270, null]], "polars.Series.sort": [[1271, null]], "polars.Series.sqrt": [[1272, null]], "polars.Series.std": [[1273, null]], "polars.Series.str.concat": [[1274, null]], "polars.Series.str.contains": [[1275, null]], "polars.Series.str.contains_any": [[1276, null]], "polars.Series.str.count_matches": [[1277, null]], "polars.Series.str.decode": [[1278, null]], "polars.Series.str.encode": [[1279, null]], "polars.Series.str.ends_with": [[1280, null]], "polars.Series.str.escape_regex": [[1281, null]], "polars.Series.str.explode": [[1282, null]], "polars.Series.str.extract": [[1283, null]], "polars.Series.str.extract_all": [[1284, null]], "polars.Series.str.extract_groups": [[1285, null]], "polars.Series.str.extract_many": [[1286, null]], "polars.Series.str.find": [[1287, null]], "polars.Series.str.find_many": [[1288, null]], "polars.Series.str.head": [[1289, null]], "polars.Series.str.join": [[1290, null]], "polars.Series.str.json_decode": [[1291, null]], "polars.Series.str.json_path_match": [[1292, null]], "polars.Series.str.len_bytes": [[1293, null]], "polars.Series.str.len_chars": [[1294, null]], "polars.Series.str.normalize": [[1295, null]], "polars.Series.str.pad_end": [[1296, null]], "polars.Series.str.pad_start": [[1297, null]], "polars.Series.str.replace": [[1298, null]], "polars.Series.str.replace_all": [[1299, null]], "polars.Series.str.replace_many": [[1300, null]], "polars.Series.str.reverse": [[1301, null]], "polars.Series.str.slice": [[1302, null]], "polars.Series.str.split": [[1303, null]], "polars.Series.str.split_exact": [[1304, null]], "polars.Series.str.splitn": [[1305, null]], "polars.Series.str.starts_with": [[1306, null]], "polars.Series.str.strip_chars": [[1307, null]], "polars.Series.str.strip_chars_end": [[1308, null]], "polars.Series.str.strip_chars_start": [[1309, null]], "polars.Series.str.strip_prefix": [[1310, null]], "polars.Series.str.strip_suffix": [[1311, null]], "polars.Series.str.strptime": [[1312, null]], "polars.Series.str.tail": [[1313, null]], "polars.Series.str.to_date": [[1314, null]], "polars.Series.str.to_datetime": [[1315, null]], "polars.Series.str.to_decimal": [[1316, null]], "polars.Series.str.to_integer": [[1317, null]], "polars.Series.str.to_lowercase": [[1318, null]], "polars.Series.str.to_time": [[1319, null]], "polars.Series.str.to_titlecase": [[1320, null]], "polars.Series.str.to_uppercase": [[1321, null]], "polars.Series.str.zfill": [[1322, null]], "polars.Series.struct.field": [[1323, null]], "polars.Series.struct.fields": [[1324, null]], "polars.Series.struct.json_encode": [[1325, null]], "polars.Series.struct.rename_fields": [[1326, null]], "polars.Series.struct.schema": [[1327, null]], "polars.Series.struct.unnest": [[1328, null]], "polars.Series.sum": [[1329, null]], "polars.Series.tail": [[1330, null]], "polars.Series.tan": [[1331, null]], "polars.Series.tanh": [[1332, null]], "polars.Series.to_arrow": [[1333, null]], "polars.Series.to_dummies": [[1334, null]], "polars.Series.to_frame": [[1335, null]], "polars.Series.to_init_repr": [[1336, null]], "polars.Series.to_jax": [[1337, null]], "polars.Series.to_list": [[1338, null]], "polars.Series.to_numpy": [[1339, null]], "polars.Series.to_pandas": [[1340, null]], "polars.Series.to_physical": [[1341, null]], "polars.Series.to_torch": [[1342, null]], "polars.Series.top_k": [[1343, null]], "polars.Series.unique": [[1344, null]], "polars.Series.unique_counts": [[1345, null]], "polars.Series.upper_bound": [[1346, null]], "polars.Series.value_counts": [[1347, null]], "polars.Series.var": [[1348, null]], "polars.Series.zip_with": [[1349, null]], "polars.StringCache": [[55, null]], "polars.align_frames": [[56, null]], "polars.all": [[758, null]], "polars.all_horizontal": [[759, null]], "polars.any": [[760, null]], "polars.any_horizontal": [[761, null]], "polars.api.register_dataframe_namespace": [[57, null]], "polars.api.register_expr_namespace": [[58, null]], "polars.api.register_lazyframe_namespace": [[59, null]], "polars.api.register_series_namespace": [[60, null]], "polars.approx_n_unique": [[762, null]], "polars.arange": [[763, null]], "polars.arctan2": [[764, null]], "polars.arctan2d": [[765, null]], "polars.arg_sort_by": [[766, null]], "polars.arg_where": [[767, null]], "polars.build_info": [[61, null]], "polars.business_day_count": [[768, null]], "polars.catalog.unity.CatalogInfo": [[194, null]], "polars.catalog.unity.ColumnInfo": [[195, null]], "polars.catalog.unity.DataSourceFormat": [[196, null]], "polars.catalog.unity.NamespaceInfo": [[197, null]], "polars.catalog.unity.TableInfo": [[198, null]], "polars.catalog.unity.TableInfo.get_polars_schema": [[199, null]], "polars.catalog.unity.TableType": [[200, null]], "polars.coalesce": [[769, null]], "polars.col": [[839, null]], "polars.collect_all": [[62, null]], "polars.collect_all_async": [[63, null]], "polars.concat": [[64, null]], "polars.concat_arr": [[770, null]], "polars.concat_list": [[771, null]], "polars.concat_str": [[772, null]], "polars.corr": [[773, null]], "polars.count": [[774, null]], "polars.cov": [[775, null]], "polars.cum_count": [[776, null]], "polars.cum_fold": [[777, null]], "polars.cum_reduce": [[778, null]], "polars.cum_sum": [[779, null]], "polars.cum_sum_horizontal": [[780, null]], "polars.dataframe.group_by.GroupBy.__iter__": [[328, null]], "polars.dataframe.group_by.GroupBy.agg": [[329, null]], "polars.dataframe.group_by.GroupBy.all": [[330, null]], "polars.dataframe.group_by.GroupBy.count": [[331, null]], "polars.dataframe.group_by.GroupBy.first": [[332, null]], "polars.dataframe.group_by.GroupBy.head": [[333, null]], "polars.dataframe.group_by.GroupBy.last": [[334, null]], "polars.dataframe.group_by.GroupBy.len": [[335, null]], "polars.dataframe.group_by.GroupBy.map_groups": [[336, null]], "polars.dataframe.group_by.GroupBy.max": [[337, null]], "polars.dataframe.group_by.GroupBy.mean": [[338, null]], "polars.dataframe.group_by.GroupBy.median": [[339, null]], "polars.dataframe.group_by.GroupBy.min": [[340, null]], "polars.dataframe.group_by.GroupBy.n_unique": [[341, null]], "polars.dataframe.group_by.GroupBy.quantile": [[342, null]], "polars.dataframe.group_by.GroupBy.sum": [[343, null]], "polars.dataframe.group_by.GroupBy.tail": [[344, null]], "polars.datatypes.Array": [[65, null]], "polars.datatypes.Binary": [[66, null]], "polars.datatypes.Boolean": [[67, null]], "polars.datatypes.Categorical": [[68, null]], "polars.datatypes.DataType": [[69, null]], "polars.datatypes.Date": [[70, null]], "polars.datatypes.Datetime": [[71, null]], "polars.datatypes.Decimal": [[72, null]], "polars.datatypes.Duration": [[73, null]], "polars.datatypes.Enum": [[74, null]], "polars.datatypes.Field": [[75, null]], "polars.datatypes.Float32": [[76, null]], "polars.datatypes.Float64": [[77, null]], "polars.datatypes.Int128": [[78, null]], "polars.datatypes.Int16": [[79, null]], "polars.datatypes.Int32": [[80, null]], "polars.datatypes.Int64": [[81, null]], "polars.datatypes.Int8": [[82, null]], "polars.datatypes.List": [[83, null]], "polars.datatypes.Null": [[84, null]], "polars.datatypes.Object": [[85, null]], "polars.datatypes.String": [[86, null]], "polars.datatypes.Struct": [[87, null]], "polars.datatypes.Time": [[88, null]], "polars.datatypes.UInt16": [[89, null]], "polars.datatypes.UInt32": [[90, null]], "polars.datatypes.UInt64": [[91, null]], "polars.datatypes.UInt8": [[92, null]], "polars.datatypes.Unknown": [[93, null]], "polars.datatypes.Utf8": [[94, null]], "polars.date": [[781, null]], "polars.date_range": [[782, null]], "polars.date_ranges": [[783, null]], "polars.datetime": [[784, null]], "polars.datetime_range": [[785, null]], "polars.datetime_ranges": [[786, null]], "polars.defer": [[95, null]], "polars.disable_string_cache": [[96, null]], "polars.duration": [[787, null]], "polars.element": [[788, null]], "polars.enable_string_cache": [[97, null]], "polars.escape_regex": [[98, null]], "polars.exceptions.CategoricalRemappingWarning": [[99, null]], "polars.exceptions.ChronoFormatWarning": [[100, null]], "polars.exceptions.ColumnNotFoundError": [[101, null]], "polars.exceptions.ComputeError": [[102, null]], "polars.exceptions.CustomUFuncWarning": [[103, null]], "polars.exceptions.DataOrientationWarning": [[104, null]], "polars.exceptions.DuplicateError": [[105, null]], "polars.exceptions.InvalidOperationError": [[106, null]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[107, null]], "polars.exceptions.ModuleUpgradeRequiredError": [[108, null]], "polars.exceptions.NoDataError": [[109, null]], "polars.exceptions.NoRowsReturnedError": [[110, null]], "polars.exceptions.OutOfBoundsError": [[111, null]], "polars.exceptions.PanicException": [[112, null]], "polars.exceptions.ParameterCollisionError": [[113, null]], "polars.exceptions.PerformanceWarning": [[114, null]], "polars.exceptions.PolarsError": [[115, null]], "polars.exceptions.PolarsInefficientMapWarning": [[116, null]], "polars.exceptions.PolarsWarning": [[117, null]], "polars.exceptions.RowsError": [[118, null]], "polars.exceptions.SQLInterfaceError": [[119, null]], "polars.exceptions.SQLSyntaxError": [[120, null]], "polars.exceptions.SchemaError": [[121, null]], "polars.exceptions.SchemaFieldNotFoundError": [[122, null]], "polars.exceptions.ShapeError": [[123, null]], "polars.exceptions.StringCacheMismatchError": [[124, null]], "polars.exceptions.StructFieldNotFoundError": [[125, null]], "polars.exceptions.TooManyRowsReturnedError": [[126, null]], "polars.exceptions.UnstableWarning": [[127, null]], "polars.exceptions.UnsuitableSQLError": [[128, null]], "polars.exclude": [[789, null]], "polars.explain_all": [[129, null]], "polars.first": [[790, null]], "polars.fold": [[791, null]], "polars.format": [[792, null]], "polars.from_arrow": [[130, null]], "polars.from_dataframe": [[131, null]], "polars.from_dict": [[132, null]], "polars.from_dicts": [[133, null]], "polars.from_epoch": [[793, null]], "polars.from_numpy": [[134, null]], "polars.from_pandas": [[135, null]], "polars.from_records": [[136, null]], "polars.from_repr": [[137, null]], "polars.get_index_type": [[138, null]], "polars.groups": [[794, null]], "polars.head": [[795, null]], "polars.implode": [[796, null]], "polars.int_range": [[797, null]], "polars.int_ranges": [[798, null]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[139, null]], "polars.io.partition.BasePartitionContext": [[140, null]], "polars.io.partition.KeyedPartition": [[141, null]], "polars.io.partition.KeyedPartitionContext": [[142, null]], "polars.io.plugins.register_io_source": [[143, null]], "polars.json_normalize": [[144, null]], "polars.last": [[799, null]], "polars.lazyframe.engine_config.GPUEngine": [[934, null]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[935, null]], "polars.lazyframe.group_by.LazyGroupBy.all": [[936, null]], "polars.lazyframe.group_by.LazyGroupBy.count": [[937, null]], "polars.lazyframe.group_by.LazyGroupBy.first": [[938, null]], "polars.lazyframe.group_by.LazyGroupBy.head": [[939, null]], "polars.lazyframe.group_by.LazyGroupBy.last": [[940, null]], "polars.lazyframe.group_by.LazyGroupBy.len": [[941, null]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[942, null]], "polars.lazyframe.group_by.LazyGroupBy.max": [[943, null]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[944, null]], "polars.lazyframe.group_by.LazyGroupBy.median": [[945, null]], "polars.lazyframe.group_by.LazyGroupBy.min": [[946, null]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[947, null]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[948, null]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[949, null]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[950, null]], "polars.lazyframe.in_process.InProcessQuery.cancel": [[951, null]], "polars.lazyframe.in_process.InProcessQuery.fetch": [[952, null]], "polars.lazyframe.in_process.InProcessQuery.fetch_blocking": [[953, null]], "polars.len": [[800, null]], "polars.linear_space": [[801, null]], "polars.linear_spaces": [[802, null]], "polars.lit": [[803, null]], "polars.map_batches": [[804, null]], "polars.map_groups": [[805, null]], "polars.max": [[806, null]], "polars.max_horizontal": [[807, null]], "polars.mean": [[808, null]], "polars.mean_horizontal": [[809, null]], "polars.median": [[810, null]], "polars.min": [[811, null]], "polars.min_horizontal": [[812, null]], "polars.n_unique": [[813, null]], "polars.nth": [[814, null]], "polars.ones": [[815, null]], "polars.plugins.register_plugin_function": [[145, null]], "polars.quantile": [[816, null]], "polars.read_avro": [[146, null]], "polars.read_clipboard": [[147, null]], "polars.read_csv": [[148, null]], "polars.read_csv_batched": [[149, null]], "polars.read_database": [[150, null]], "polars.read_database_uri": [[151, null]], "polars.read_delta": [[152, null]], "polars.read_excel": [[153, null]], "polars.read_ipc": [[154, null]], "polars.read_ipc_schema": [[155, null]], "polars.read_ipc_stream": [[156, null]], "polars.read_json": [[157, null]], "polars.read_ndjson": [[158, null]], "polars.read_ods": [[159, null]], "polars.read_parquet": [[160, null]], "polars.read_parquet_metadata": [[161, null]], "polars.read_parquet_schema": [[162, null]], "polars.reduce": [[817, null]], "polars.repeat": [[818, null]], "polars.rolling_corr": [[819, null]], "polars.rolling_cov": [[820, null]], "polars.scan_csv": [[163, null]], "polars.scan_delta": [[164, null]], "polars.scan_iceberg": [[165, null]], "polars.scan_ipc": [[166, null]], "polars.scan_ndjson": [[167, null]], "polars.scan_parquet": [[168, null]], "polars.scan_pyarrow_dataset": [[169, null]], "polars.select": [[821, null]], "polars.set_random_seed": [[170, null]], "polars.show_versions": [[171, null]], "polars.sql": [[822, null]], "polars.sql_expr": [[823, null]], "polars.std": [[824, null]], "polars.struct": [[825, null]], "polars.sum": [[826, null]], "polars.sum_horizontal": [[827, null]], "polars.tail": [[828, null]], "polars.testing.assert_frame_equal": [[172, null]], "polars.testing.assert_frame_not_equal": [[173, null]], "polars.testing.assert_series_equal": [[174, null]], "polars.testing.assert_series_not_equal": [[175, null]], "polars.testing.parametric.column": [[176, null]], "polars.testing.parametric.columns": [[177, null]], "polars.testing.parametric.create_list_strategy": [[178, null]], "polars.testing.parametric.dataframes": [[179, null]], "polars.testing.parametric.dtypes": [[180, null]], "polars.testing.parametric.lists": [[181, null]], "polars.testing.parametric.load_profile": [[182, null]], "polars.testing.parametric.series": [[183, null]], "polars.testing.parametric.set_profile": [[184, null]], "polars.thread_pool_size": [[185, null]], "polars.threadpool_size": [[186, null]], "polars.time": [[829, null]], "polars.time_range": [[830, null]], "polars.time_ranges": [[831, null]], "polars.using_string_cache": [[187, null]], "polars.var": [[832, null]], "polars.when": [[833, null]], "polars.zeros": [[834, null]]}, "docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_engine_affinity", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.CredentialProvider", "reference/api/polars.CredentialProviderAWS", "reference/api/polars.CredentialProviderAzure", "reference/api/polars.CredentialProviderGCP", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_iceberg", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.PartitionByKey", "reference/api/polars.PartitionMaxSize", "reference/api/polars.PartitionParted", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Field", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int128", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.defer", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.escape_regex", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.explain_all", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.io.partition.BasePartitionContext", "reference/api/polars.io.partition.KeyedPartition", "reference/api/polars.io.partition.KeyedPartitionContext", "reference/api/polars.io.plugins.register_io_source", "reference/api/polars.json_normalize", "reference/api/polars.plugins.register_plugin_function", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_metadata", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/catalog/api/polars.Catalog", "reference/catalog/api/polars.Catalog.get_table_info", "reference/catalog/api/polars.Catalog.list_catalogs", "reference/catalog/api/polars.Catalog.list_namespaces", "reference/catalog/api/polars.Catalog.list_tables", "reference/catalog/api/polars.Catalog.scan_table", "reference/catalog/api/polars.catalog.unity.CatalogInfo", "reference/catalog/api/polars.catalog.unity.ColumnInfo", "reference/catalog/api/polars.catalog.unity.DataSourceFormat", "reference/catalog/api/polars.catalog.unity.NamespaceInfo", "reference/catalog/api/polars.catalog.unity.TableInfo", "reference/catalog/api/polars.catalog.unity.TableInfo.get_polars_schema", "reference/catalog/api/polars.catalog.unity.TableType", "reference/catalog/index", "reference/catalog/unity", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__array__", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.__getitem__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nans", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.join_where", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.remove", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unpivot", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.reinterpret", "reference/expressions/api/polars.Expr.bin.size", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bitwise_and", "reference/expressions/api/polars.Expr.bitwise_count_ones", "reference/expressions/api/polars.Expr.bitwise_count_zeros", "reference/expressions/api/polars.Expr.bitwise_leading_ones", "reference/expressions/api/polars.Expr.bitwise_leading_zeros", "reference/expressions/api/polars.Expr.bitwise_or", "reference/expressions/api/polars.Expr.bitwise_trailing_ones", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros", "reference/expressions/api/polars.Expr.bitwise_xor", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.ends_with", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.len_bytes", "reference/expressions/api/polars.Expr.cat.len_chars", "reference/expressions/api/polars.Expr.cat.starts_with", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_business_day", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.index_of", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_literal", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.show_graph", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.replace_strict", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_kurtosis", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.escape_regex", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.extract_many", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.find_many", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.normalize", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.unnest", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_arr", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.linear_space", "reference/expressions/api/polars.linear_spaces", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nans", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.join_where", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.remote", "reference/lazyframe/api/polars.LazyFrame.remove", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.unpivot", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/gpu_engine", "reference/lazyframe/group_by", "reference/lazyframe/in_process", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.__array__", "reference/series/api/polars.Series.__arrow_c_stream__", "reference/series/api/polars.Series.__getitem__", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.approx_n_unique", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.backward_fill", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.reinterpret", "reference/series/api/polars.Series.bin.size", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bitwise_and", "reference/series/api/polars.Series.bitwise_count_ones", "reference/series/api/polars.Series.bitwise_count_zeros", "reference/series/api/polars.Series.bitwise_leading_ones", "reference/series/api/polars.Series.bitwise_leading_zeros", "reference/series/api/polars.Series.bitwise_or", "reference/series/api/polars.Series.bitwise_trailing_ones", "reference/series/api/polars.Series.bitwise_trailing_zeros", "reference/series/api/polars.Series.bitwise_xor", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.ends_with", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.len_bytes", "reference/series/api/polars.Series.cat.len_chars", "reference/series/api/polars.Series.cat.starts_with", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.count", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_business_day", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.eq", "reference/series/api/polars.Series.eq_missing", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.first", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.forward_fill", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.ge", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.gt", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.index_of", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.last", "reference/series/api/polars.Series.le", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.lt", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.ne", "reference/series/api/polars.Series.ne_missing", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.pow", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.replace_strict", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_kurtosis", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.escape_regex", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.extract_many", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.find_many", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.normalize", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/operators", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/bitwise", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/functions/types", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_engine_affinity.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.CredentialProvider.rst", "reference/api/polars.CredentialProviderAWS.rst", "reference/api/polars.CredentialProviderAzure.rst", "reference/api/polars.CredentialProviderGCP.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_iceberg.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.PartitionByKey.rst", "reference/api/polars.PartitionMaxSize.rst", "reference/api/polars.PartitionParted.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Field.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int128.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.defer.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.escape_regex.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.explain_all.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.io.partition.BasePartitionContext.rst", "reference/api/polars.io.partition.KeyedPartition.rst", "reference/api/polars.io.partition.KeyedPartitionContext.rst", "reference/api/polars.io.plugins.register_io_source.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.plugins.register_plugin_function.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_metadata.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/catalog/api/polars.Catalog.rst", "reference/catalog/api/polars.Catalog.get_table_info.rst", "reference/catalog/api/polars.Catalog.list_catalogs.rst", "reference/catalog/api/polars.Catalog.list_namespaces.rst", "reference/catalog/api/polars.Catalog.list_tables.rst", "reference/catalog/api/polars.Catalog.scan_table.rst", "reference/catalog/api/polars.catalog.unity.CatalogInfo.rst", "reference/catalog/api/polars.catalog.unity.ColumnInfo.rst", "reference/catalog/api/polars.catalog.unity.DataSourceFormat.rst", "reference/catalog/api/polars.catalog.unity.NamespaceInfo.rst", "reference/catalog/api/polars.catalog.unity.TableInfo.rst", "reference/catalog/api/polars.catalog.unity.TableInfo.get_polars_schema.rst", "reference/catalog/api/polars.catalog.unity.TableType.rst", "reference/catalog/index.rst", "reference/catalog/unity.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__array__.rst", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.__getitem__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nans.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.join_where.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.remove.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unpivot.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.reinterpret.rst", "reference/expressions/api/polars.Expr.bin.size.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bitwise_and.rst", "reference/expressions/api/polars.Expr.bitwise_count_ones.rst", "reference/expressions/api/polars.Expr.bitwise_count_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_leading_ones.rst", "reference/expressions/api/polars.Expr.bitwise_leading_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_or.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_ones.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_xor.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.ends_with.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.len_bytes.rst", "reference/expressions/api/polars.Expr.cat.len_chars.rst", "reference/expressions/api/polars.Expr.cat.starts_with.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_business_day.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.index_of.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_literal.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.show_graph.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.replace_strict.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_kurtosis.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.escape_regex.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.extract_many.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.find_many.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.normalize.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.unnest.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_arr.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.linear_space.rst", "reference/expressions/api/polars.linear_spaces.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nans.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.join_where.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.remote.rst", "reference/lazyframe/api/polars.LazyFrame.remove.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.unpivot.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/gpu_engine.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/in_process.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.__array__.rst", "reference/series/api/polars.Series.__arrow_c_stream__.rst", "reference/series/api/polars.Series.__getitem__.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.approx_n_unique.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.backward_fill.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.reinterpret.rst", "reference/series/api/polars.Series.bin.size.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bitwise_and.rst", "reference/series/api/polars.Series.bitwise_count_ones.rst", "reference/series/api/polars.Series.bitwise_count_zeros.rst", "reference/series/api/polars.Series.bitwise_leading_ones.rst", "reference/series/api/polars.Series.bitwise_leading_zeros.rst", "reference/series/api/polars.Series.bitwise_or.rst", "reference/series/api/polars.Series.bitwise_trailing_ones.rst", "reference/series/api/polars.Series.bitwise_trailing_zeros.rst", "reference/series/api/polars.Series.bitwise_xor.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.ends_with.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.len_bytes.rst", "reference/series/api/polars.Series.cat.len_chars.rst", "reference/series/api/polars.Series.cat.starts_with.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.count.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_business_day.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.eq.rst", "reference/series/api/polars.Series.eq_missing.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.first.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.forward_fill.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.ge.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.gt.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.index_of.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.last.rst", "reference/series/api/polars.Series.le.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.lt.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.ne.rst", "reference/series/api/polars.Series.ne_missing.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.pow.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.replace_strict.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_kurtosis.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.escape_regex.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.extract_many.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.find_many.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.normalize.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/operators.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/bitwise.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/functions/types.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "indexentries": {"__array__() (polars.dataframe method)": [[205, "polars.DataFrame.__array__", false]], "__array__() (polars.series method)": [[967, "polars.Series.__array__", false]], "__arrow_c_stream__() (polars.dataframe method)": [[206, "polars.DataFrame.__arrow_c_stream__", false]], "__arrow_c_stream__() (polars.series method)": [[968, "polars.Series.__arrow_c_stream__", false]], "__dataframe__() (polars.dataframe method)": [[207, "polars.DataFrame.__dataframe__", false]], "__enter__() (polars.sqlcontext method)": [[1386, "polars.SQLContext.__enter__", false]], "__exit__() (polars.sqlcontext method)": [[1386, "polars.SQLContext.__exit__", false]], "__getitem__() (polars.dataframe method)": [[208, "polars.DataFrame.__getitem__", false]], "__getitem__() (polars.series method)": [[969, "polars.Series.__getitem__", false]], "__init__() (polars.catalog method)": [[188, "polars.Catalog.__init__", false]], "__init__() (polars.catalog.unity.cataloginfo method)": [[194, "polars.catalog.unity.CatalogInfo.__init__", false]], "__init__() (polars.catalog.unity.columninfo method)": [[195, "polars.catalog.unity.ColumnInfo.__init__", false]], "__init__() (polars.catalog.unity.namespaceinfo method)": [[197, "polars.catalog.unity.NamespaceInfo.__init__", false]], "__init__() (polars.catalog.unity.tableinfo method)": [[198, "polars.catalog.unity.TableInfo.__init__", false]], "__init__() (polars.credentialprovider method)": [[32, "polars.CredentialProvider.__init__", false]], "__init__() (polars.credentialprovideraws method)": [[33, "polars.CredentialProviderAWS.__init__", false]], "__init__() (polars.credentialproviderazure method)": [[34, "polars.CredentialProviderAzure.__init__", false]], "__init__() (polars.credentialprovidergcp method)": [[35, "polars.CredentialProviderGCP.__init__", false]], "__init__() (polars.datatypes.array method)": [[65, "polars.datatypes.Array.__init__", false]], "__init__() (polars.datatypes.binary method)": [[66, "polars.datatypes.Binary.__init__", false]], "__init__() (polars.datatypes.boolean method)": [[67, "polars.datatypes.Boolean.__init__", false]], "__init__() (polars.datatypes.categorical method)": [[68, "polars.datatypes.Categorical.__init__", false]], "__init__() (polars.datatypes.datatype method)": [[69, "polars.datatypes.DataType.__init__", false]], "__init__() (polars.datatypes.date method)": [[70, "polars.datatypes.Date.__init__", false]], "__init__() (polars.datatypes.datetime method)": [[71, "polars.datatypes.Datetime.__init__", false]], "__init__() (polars.datatypes.decimal method)": [[72, "polars.datatypes.Decimal.__init__", false]], "__init__() (polars.datatypes.duration method)": [[73, "polars.datatypes.Duration.__init__", false]], "__init__() (polars.datatypes.enum method)": [[74, "polars.datatypes.Enum.__init__", false]], "__init__() (polars.datatypes.field method)": [[75, "polars.datatypes.Field.__init__", false]], "__init__() (polars.datatypes.float32 method)": [[76, "polars.datatypes.Float32.__init__", false]], "__init__() (polars.datatypes.float64 method)": [[77, "polars.datatypes.Float64.__init__", false]], "__init__() (polars.datatypes.int128 method)": [[78, "polars.datatypes.Int128.__init__", false]], "__init__() (polars.datatypes.int16 method)": [[79, "polars.datatypes.Int16.__init__", false]], "__init__() (polars.datatypes.int32 method)": [[80, "polars.datatypes.Int32.__init__", false]], "__init__() (polars.datatypes.int64 method)": [[81, "polars.datatypes.Int64.__init__", false]], "__init__() (polars.datatypes.int8 method)": [[82, "polars.datatypes.Int8.__init__", false]], "__init__() (polars.datatypes.list method)": [[83, "polars.datatypes.List.__init__", false]], "__init__() (polars.datatypes.null method)": [[84, "polars.datatypes.Null.__init__", false]], "__init__() (polars.datatypes.object method)": [[85, "polars.datatypes.Object.__init__", false]], "__init__() (polars.datatypes.string method)": [[86, "polars.datatypes.String.__init__", false]], "__init__() (polars.datatypes.struct method)": [[87, "polars.datatypes.Struct.__init__", false]], "__init__() (polars.datatypes.time method)": [[88, "polars.datatypes.Time.__init__", false]], "__init__() (polars.datatypes.uint16 method)": [[89, "polars.datatypes.UInt16.__init__", false]], "__init__() (polars.datatypes.uint32 method)": [[90, "polars.datatypes.UInt32.__init__", false]], "__init__() (polars.datatypes.uint64 method)": [[91, "polars.datatypes.UInt64.__init__", false]], "__init__() (polars.datatypes.uint8 method)": [[92, "polars.datatypes.UInt8.__init__", false]], "__init__() (polars.datatypes.unknown method)": [[93, "polars.datatypes.Unknown.__init__", false]], "__init__() (polars.io.partition.basepartitioncontext method)": [[140, "polars.io.partition.BasePartitionContext.__init__", false]], "__init__() (polars.io.partition.keyedpartition method)": [[141, "polars.io.partition.KeyedPartition.__init__", false]], "__init__() (polars.io.partition.keyedpartitioncontext method)": [[142, "polars.io.partition.KeyedPartitionContext.__init__", false]], "__init__() (polars.lazyframe.engine_config.gpuengine method)": [[934, "polars.lazyframe.engine_config.GPUEngine.__init__", false]], "__init__() (polars.partitionbykey method)": [[52, "polars.PartitionByKey.__init__", false]], "__init__() (polars.partitionmaxsize method)": [[53, "polars.PartitionMaxSize.__init__", false]], "__init__() (polars.partitionparted method)": [[54, "polars.PartitionParted.__init__", false]], "__init__() (polars.sqlcontext method)": [[1386, "polars.SQLContext.__init__", false]], "__init__() (polars.stringcache method)": [[55, "polars.StringCache.__init__", false]], "__init__() (polars.testing.parametric.column method)": [[176, "polars.testing.parametric.column.__init__", false]], "__iter__() (polars.dataframe.group_by.groupby method)": [[328, "polars.dataframe.group_by.GroupBy.__iter__", false]], "abs() (polars.expr method)": [[358, "polars.Expr.abs", false]], "abs() (polars.series method)": [[970, "polars.Series.abs", false]], "add() (polars.expr method)": [[359, "polars.Expr.add", false]], "add_business_days() (polars.expr.dt method)": [[447, "polars.Expr.dt.add_business_days", false]], "add_business_days() (polars.series.dt method)": [[1060, "polars.Series.dt.add_business_days", false]], "agg() (polars.dataframe.group_by.groupby method)": [[329, "polars.dataframe.group_by.GroupBy.agg", false]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[935, "polars.lazyframe.group_by.LazyGroupBy.agg", false]], "agg_groups() (polars.expr method)": [[360, "polars.Expr.agg_groups", false]], "alias() (polars.expr method)": [[361, "polars.Expr.alias", false]], "alias() (polars.series method)": [[971, "polars.Series.alias", false]], "align_frames() (in module polars)": [[56, "polars.align_frames", false]], "all() (in module polars)": [[758, "polars.all", false]], "all() (in module polars.selectors)": [[965, "polars.selectors.all", false]], "all() (polars.dataframe.group_by.groupby method)": [[330, "polars.dataframe.group_by.GroupBy.all", false]], "all() (polars.expr method)": [[362, "polars.Expr.all", false]], "all() (polars.expr.arr method)": [[378, "polars.Expr.arr.all", false]], "all() (polars.expr.list method)": [[544, "polars.Expr.list.all", false]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[936, "polars.lazyframe.group_by.LazyGroupBy.all", false]], "all() (polars.series method)": [[972, "polars.Series.all", false]], "all() (polars.series.arr method)": [[987, "polars.Series.arr.all", false]], "all() (polars.series.list method)": [[1165, "polars.Series.list.all", false]], "all_horizontal() (in module polars)": [[759, "polars.all_horizontal", false]], "alpha() (in module polars.selectors)": [[965, "polars.selectors.alpha", false]], "alphanumeric() (in module polars.selectors)": [[965, "polars.selectors.alphanumeric", false]], "and_() (polars.expr method)": [[363, "polars.Expr.and_", false]], "any() (in module polars)": [[760, "polars.any", false]], "any() (polars.expr method)": [[364, "polars.Expr.any", false]], "any() (polars.expr.arr method)": [[379, "polars.Expr.arr.any", false]], "any() (polars.expr.list method)": [[545, "polars.Expr.list.any", false]], "any() (polars.series method)": [[973, "polars.Series.any", false]], "any() (polars.series.arr method)": [[988, "polars.Series.arr.any", false]], "any() (polars.series.list method)": [[1166, "polars.Series.list.any", false]], "any_horizontal() (in module polars)": [[761, "polars.any_horizontal", false]], "append() (polars.expr method)": [[365, "polars.Expr.append", false]], "append() (polars.series method)": [[974, "polars.Series.append", false]], "approx_n_unique() (in module polars)": [[762, "polars.approx_n_unique", false]], "approx_n_unique() (polars.dataframe method)": [[209, "polars.DataFrame.approx_n_unique", false]], "approx_n_unique() (polars.expr method)": [[366, "polars.Expr.approx_n_unique", false]], "approx_n_unique() (polars.lazyframe method)": [[858, "polars.LazyFrame.approx_n_unique", false]], "approx_n_unique() (polars.series method)": [[975, "polars.Series.approx_n_unique", false]], "arange() (in module polars)": [[763, "polars.arange", false]], "arccos() (polars.expr method)": [[367, "polars.Expr.arccos", false]], "arccos() (polars.series method)": [[976, "polars.Series.arccos", false]], "arccosh() (polars.expr method)": [[368, "polars.Expr.arccosh", false]], "arccosh() (polars.series method)": [[977, "polars.Series.arccosh", false]], "arcsin() (polars.expr method)": [[369, "polars.Expr.arcsin", false]], "arcsin() (polars.series method)": [[978, "polars.Series.arcsin", false]], "arcsinh() (polars.expr method)": [[370, "polars.Expr.arcsinh", false]], "arcsinh() (polars.series method)": [[979, "polars.Series.arcsinh", false]], "arctan() (polars.expr method)": [[371, "polars.Expr.arctan", false]], "arctan() (polars.series method)": [[980, "polars.Series.arctan", false]], "arctan2() (in module polars)": [[764, "polars.arctan2", false]], "arctan2d() (in module polars)": [[765, "polars.arctan2d", false]], "arctanh() (polars.expr method)": [[372, "polars.Expr.arctanh", false]], "arctanh() (polars.series method)": [[981, "polars.Series.arctanh", false]], "arg_max() (polars.expr method)": [[373, "polars.Expr.arg_max", false]], "arg_max() (polars.expr.arr method)": [[380, "polars.Expr.arr.arg_max", false]], "arg_max() (polars.expr.list method)": [[546, "polars.Expr.list.arg_max", false]], "arg_max() (polars.series method)": [[982, "polars.Series.arg_max", false]], "arg_max() (polars.series.arr method)": [[989, "polars.Series.arr.arg_max", false]], "arg_max() (polars.series.list method)": [[1167, "polars.Series.list.arg_max", false]], "arg_min() (polars.expr method)": [[374, "polars.Expr.arg_min", false]], "arg_min() (polars.expr.arr method)": [[381, "polars.Expr.arr.arg_min", false]], "arg_min() (polars.expr.list method)": [[547, "polars.Expr.list.arg_min", false]], "arg_min() (polars.series method)": [[983, "polars.Series.arg_min", false]], "arg_min() (polars.series.arr method)": [[990, "polars.Series.arr.arg_min", false]], "arg_min() (polars.series.list method)": [[1168, "polars.Series.list.arg_min", false]], "arg_sort() (polars.expr method)": [[375, "polars.Expr.arg_sort", false]], "arg_sort() (polars.series method)": [[984, "polars.Series.arg_sort", false]], "arg_sort_by() (in module polars)": [[766, "polars.arg_sort_by", false]], "arg_true() (polars.expr method)": [[376, "polars.Expr.arg_true", false]], "arg_true() (polars.series method)": [[985, "polars.Series.arg_true", false]], "arg_unique() (polars.expr method)": [[377, "polars.Expr.arg_unique", false]], "arg_unique() (polars.series method)": [[986, "polars.Series.arg_unique", false]], "arg_where() (in module polars)": [[767, "polars.arg_where", false]], "array (class in polars.datatypes)": [[65, "polars.datatypes.Array", false]], "assert_frame_equal() (in module polars.testing)": [[172, "polars.testing.assert_frame_equal", false]], "assert_frame_not_equal() (in module polars.testing)": [[173, "polars.testing.assert_frame_not_equal", false]], "assert_series_equal() (in module polars.testing)": [[174, "polars.testing.assert_series_equal", false]], "assert_series_not_equal() (in module polars.testing)": [[175, "polars.testing.assert_series_not_equal", false]], "backward_fill() (polars.expr method)": [[402, "polars.Expr.backward_fill", false]], "backward_fill() (polars.series method)": [[1011, "polars.Series.backward_fill", false]], "base_utc_offset() (polars.expr.dt method)": [[448, "polars.Expr.dt.base_utc_offset", false]], "base_utc_offset() (polars.series.dt method)": [[1061, "polars.Series.dt.base_utc_offset", false]], "basepartitioncontext (class in polars.io.partition)": [[140, "polars.io.partition.BasePartitionContext", false]], "binary (class in polars.datatypes)": [[66, "polars.datatypes.Binary", false]], "binary() (in module polars.selectors)": [[965, "polars.selectors.binary", false]], "bitwise_and() (polars.expr method)": [[410, "polars.Expr.bitwise_and", false]], "bitwise_and() (polars.series method)": [[1019, "polars.Series.bitwise_and", false]], "bitwise_count_ones() (polars.expr method)": [[411, "polars.Expr.bitwise_count_ones", false]], "bitwise_count_ones() (polars.series method)": [[1020, "polars.Series.bitwise_count_ones", false]], "bitwise_count_zeros() (polars.expr method)": [[412, "polars.Expr.bitwise_count_zeros", false]], "bitwise_count_zeros() (polars.series method)": [[1021, "polars.Series.bitwise_count_zeros", false]], "bitwise_leading_ones() (polars.expr method)": [[413, "polars.Expr.bitwise_leading_ones", false]], "bitwise_leading_ones() (polars.series method)": [[1022, "polars.Series.bitwise_leading_ones", false]], "bitwise_leading_zeros() (polars.expr method)": [[414, "polars.Expr.bitwise_leading_zeros", false]], "bitwise_leading_zeros() (polars.series method)": [[1023, "polars.Series.bitwise_leading_zeros", false]], "bitwise_or() (polars.expr method)": [[415, "polars.Expr.bitwise_or", false]], "bitwise_or() (polars.series method)": [[1024, "polars.Series.bitwise_or", false]], "bitwise_trailing_ones() (polars.expr method)": [[416, "polars.Expr.bitwise_trailing_ones", false]], "bitwise_trailing_ones() (polars.series method)": [[1025, "polars.Series.bitwise_trailing_ones", false]], "bitwise_trailing_zeros() (polars.expr method)": [[417, "polars.Expr.bitwise_trailing_zeros", false]], "bitwise_trailing_zeros() (polars.series method)": [[1026, "polars.Series.bitwise_trailing_zeros", false]], "bitwise_xor() (polars.expr method)": [[418, "polars.Expr.bitwise_xor", false]], "bitwise_xor() (polars.series method)": [[1027, "polars.Series.bitwise_xor", false]], "boolean (class in polars.datatypes)": [[67, "polars.datatypes.Boolean", false]], "boolean() (in module polars.selectors)": [[965, "polars.selectors.boolean", false]], "bottom_k() (polars.dataframe method)": [[210, "polars.DataFrame.bottom_k", false]], "bottom_k() (polars.expr method)": [[419, "polars.Expr.bottom_k", false]], "bottom_k() (polars.lazyframe method)": [[859, "polars.LazyFrame.bottom_k", false]], "bottom_k() (polars.series method)": [[1028, "polars.Series.bottom_k", false]], "bottom_k_by() (polars.expr method)": [[420, "polars.Expr.bottom_k_by", false]], "build_info() (in module polars)": [[61, "polars.build_info", false]], "business_day_count() (in module polars)": [[768, "polars.business_day_count", false]], "by_dtype() (in module polars.selectors)": [[965, "polars.selectors.by_dtype", false]], "by_index() (in module polars.selectors)": [[965, "polars.selectors.by_index", false]], "by_name() (in module polars.selectors)": [[965, "polars.selectors.by_name", false]], "cache() (polars.lazyframe method)": [[860, "polars.LazyFrame.cache", false]], "cancel() (polars.lazyframe.in_process.inprocessquery method)": [[951, "polars.lazyframe.in_process.InProcessQuery.cancel", false]], "cast() (polars.dataframe method)": [[211, "polars.DataFrame.cast", false]], "cast() (polars.expr method)": [[421, "polars.Expr.cast", false]], "cast() (polars.lazyframe method)": [[861, "polars.LazyFrame.cast", false]], "cast() (polars.series method)": [[1029, "polars.Series.cast", false]], "cast_time_unit() (polars.expr.dt method)": [[449, "polars.Expr.dt.cast_time_unit", false]], "cast_time_unit() (polars.series.dt method)": [[1062, "polars.Series.dt.cast_time_unit", false]], "catalog (class in polars)": [[188, "polars.Catalog", false]], "cataloginfo (class in polars.catalog.unity)": [[194, "polars.catalog.unity.CatalogInfo", false]], "categorical (class in polars.datatypes)": [[68, "polars.datatypes.Categorical", false]], "categorical() (in module polars.selectors)": [[965, "polars.selectors.categorical", false]], "categoricalremappingwarning": [[99, "polars.exceptions.CategoricalRemappingWarning", false]], "cbrt() (polars.expr method)": [[427, "polars.Expr.cbrt", false]], "cbrt() (polars.series method)": [[1038, "polars.Series.cbrt", false]], "ceil() (polars.expr method)": [[428, "polars.Expr.ceil", false]], "ceil() (polars.series method)": [[1039, "polars.Series.ceil", false]], "century() (polars.expr.dt method)": [[450, "polars.Expr.dt.century", false]], "century() (polars.series.dt method)": [[1063, "polars.Series.dt.century", false]], "chronoformatwarning": [[100, "polars.exceptions.ChronoFormatWarning", false]], "chunk_lengths() (polars.series method)": [[1040, "polars.Series.chunk_lengths", false]], "clear() (polars.dataframe method)": [[212, "polars.DataFrame.clear", false]], "clear() (polars.lazyframe method)": [[862, "polars.LazyFrame.clear", false]], "clear() (polars.series method)": [[1041, "polars.Series.clear", false]], "clip() (polars.expr method)": [[429, "polars.Expr.clip", false]], "clip() (polars.series method)": [[1042, "polars.Series.clip", false]], "clone() (polars.dataframe method)": [[213, "polars.DataFrame.clone", false]], "clone() (polars.lazyframe method)": [[863, "polars.LazyFrame.clone", false]], "clone() (polars.series method)": [[1043, "polars.Series.clone", false]], "coalesce() (in module polars)": [[769, "polars.coalesce", false]], "collect() (polars.lazyframe method)": [[864, "polars.LazyFrame.collect", false]], "collect_all() (in module polars)": [[62, "polars.collect_all", false]], "collect_all_async() (in module polars)": [[63, "polars.collect_all_async", false]], "collect_async() (polars.lazyframe method)": [[865, "polars.LazyFrame.collect_async", false]], "collect_schema() (polars.dataframe method)": [[214, "polars.DataFrame.collect_schema", false]], "collect_schema() (polars.lazyframe method)": [[866, "polars.LazyFrame.collect_schema", false]], "column (class in polars.testing.parametric)": [[176, "polars.testing.parametric.column", false]], "columninfo (class in polars.catalog.unity)": [[195, "polars.catalog.unity.ColumnInfo", false]], "columnnotfounderror": [[101, "polars.exceptions.ColumnNotFoundError", false]], "columns (polars.dataframe property)": [[215, "polars.DataFrame.columns", false]], "columns (polars.lazyframe property)": [[867, "polars.LazyFrame.columns", false]], "columns() (in module polars.testing.parametric)": [[177, "polars.testing.parametric.columns", false]], "combine() (polars.expr.dt method)": [[451, "polars.Expr.dt.combine", false]], "combine() (polars.series.dt method)": [[1064, "polars.Series.dt.combine", false]], "computeerror": [[102, "polars.exceptions.ComputeError", false]], "concat() (in module polars)": [[64, "polars.concat", false]], "concat() (polars.expr.list method)": [[548, "polars.Expr.list.concat", false]], "concat() (polars.expr.str method)": [[688, "polars.Expr.str.concat", false]], "concat() (polars.series.list method)": [[1169, "polars.Series.list.concat", false]], "concat() (polars.series.str method)": [[1274, "polars.Series.str.concat", false]], "concat_arr() (in module polars)": [[770, "polars.concat_arr", false]], "concat_list() (in module polars)": [[771, "polars.concat_list", false]], "concat_str() (in module polars)": [[772, "polars.concat_str", false]], "contains() (in module polars.selectors)": [[965, "polars.selectors.contains", false]], "contains() (polars.expr.arr method)": [[382, "polars.Expr.arr.contains", false]], "contains() (polars.expr.bin method)": [[403, "polars.Expr.bin.contains", false]], "contains() (polars.expr.list method)": [[549, "polars.Expr.list.contains", false]], "contains() (polars.expr.str method)": [[689, "polars.Expr.str.contains", false]], "contains() (polars.series.arr method)": [[991, "polars.Series.arr.contains", false]], "contains() (polars.series.bin method)": [[1012, "polars.Series.bin.contains", false]], "contains() (polars.series.list method)": [[1170, "polars.Series.list.contains", false]], "contains() (polars.series.str method)": [[1275, "polars.Series.str.contains", false]], "contains_any() (polars.expr.str method)": [[690, "polars.Expr.str.contains_any", false]], "contains_any() (polars.series.str method)": [[1276, "polars.Series.str.contains_any", false]], "convert_time_zone() (polars.expr.dt method)": [[452, "polars.Expr.dt.convert_time_zone", false]], "convert_time_zone() (polars.series.dt method)": [[1065, "polars.Series.dt.convert_time_zone", false]], "corr() (in module polars)": [[773, "polars.corr", false]], "corr() (polars.dataframe method)": [[216, "polars.DataFrame.corr", false]], "cos() (polars.expr method)": [[430, "polars.Expr.cos", false]], "cos() (polars.series method)": [[1044, "polars.Series.cos", false]], "cosh() (polars.expr method)": [[431, "polars.Expr.cosh", false]], "cosh() (polars.series method)": [[1045, "polars.Series.cosh", false]], "cot() (polars.expr method)": [[432, "polars.Expr.cot", false]], "cot() (polars.series method)": [[1046, "polars.Series.cot", false]], "count() (in module polars)": [[774, "polars.count", false]], "count() (polars.dataframe method)": [[217, "polars.DataFrame.count", false]], "count() (polars.dataframe.group_by.groupby method)": [[331, "polars.dataframe.group_by.GroupBy.count", false]], "count() (polars.expr method)": [[433, "polars.Expr.count", false]], "count() (polars.lazyframe method)": [[868, "polars.LazyFrame.count", false]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[937, "polars.lazyframe.group_by.LazyGroupBy.count", false]], "count() (polars.series method)": [[1047, "polars.Series.count", false]], "count_matches() (polars.expr.arr method)": [[383, "polars.Expr.arr.count_matches", false]], "count_matches() (polars.expr.list method)": [[550, "polars.Expr.list.count_matches", false]], "count_matches() (polars.expr.str method)": [[691, "polars.Expr.str.count_matches", false]], "count_matches() (polars.series.arr method)": [[992, "polars.Series.arr.count_matches", false]], "count_matches() (polars.series.list method)": [[1171, "polars.Series.list.count_matches", false]], "count_matches() (polars.series.str method)": [[1277, "polars.Series.str.count_matches", false]], "cov() (in module polars)": [[775, "polars.cov", false]], "create_list_strategy() (in module polars.testing.parametric)": [[178, "polars.testing.parametric.create_list_strategy", false]], "credentialprovider (class in polars)": [[32, "polars.CredentialProvider", false]], "credentialprovideraws (class in polars)": [[33, "polars.CredentialProviderAWS", false]], "credentialproviderazure (class in polars)": [[34, "polars.CredentialProviderAzure", false]], "credentialprovidergcp (class in polars)": [[35, "polars.CredentialProviderGCP", false]], "cum_count() (in module polars)": [[776, "polars.cum_count", false]], "cum_count() (polars.expr method)": [[434, "polars.Expr.cum_count", false]], "cum_count() (polars.series method)": [[1048, "polars.Series.cum_count", false]], "cum_fold() (in module polars)": [[777, "polars.cum_fold", false]], "cum_max() (polars.expr method)": [[435, "polars.Expr.cum_max", false]], "cum_max() (polars.series method)": [[1049, "polars.Series.cum_max", false]], "cum_min() (polars.expr method)": [[436, "polars.Expr.cum_min", false]], "cum_min() (polars.series method)": [[1050, "polars.Series.cum_min", false]], "cum_prod() (polars.expr method)": [[437, "polars.Expr.cum_prod", false]], "cum_prod() (polars.series method)": [[1051, "polars.Series.cum_prod", false]], "cum_reduce() (in module polars)": [[778, "polars.cum_reduce", false]], "cum_sum() (in module polars)": [[779, "polars.cum_sum", false]], "cum_sum() (polars.expr method)": [[438, "polars.Expr.cum_sum", false]], "cum_sum() (polars.series method)": [[1052, "polars.Series.cum_sum", false]], "cum_sum_horizontal() (in module polars)": [[780, "polars.cum_sum_horizontal", false]], "cumulative_eval() (polars.expr method)": [[439, "polars.Expr.cumulative_eval", false]], "cumulative_eval() (polars.series method)": [[1053, "polars.Series.cumulative_eval", false]], "customufuncwarning": [[103, "polars.exceptions.CustomUFuncWarning", false]], "cut() (polars.expr method)": [[440, "polars.Expr.cut", false]], "cut() (polars.series method)": [[1054, "polars.Series.cut", false]], "dataframes() (in module polars.testing.parametric)": [[179, "polars.testing.parametric.dataframes", false]], "dataorientationwarning": [[104, "polars.exceptions.DataOrientationWarning", false]], "datasourceformat (in module polars.catalog.unity)": [[196, "polars.catalog.unity.DataSourceFormat", false]], "datatype (class in polars.datatypes)": [[69, "polars.datatypes.DataType", false]], "date (class in polars.datatypes)": [[70, "polars.datatypes.Date", false]], "date() (in module polars)": [[781, "polars.date", false]], "date() (in module polars.selectors)": [[965, "polars.selectors.date", false]], "date() (polars.expr.dt method)": [[453, "polars.Expr.dt.date", false]], "date() (polars.series.dt method)": [[1066, "polars.Series.dt.date", false]], "date_range() (in module polars)": [[782, "polars.date_range", false]], "date_ranges() (in module polars)": [[783, "polars.date_ranges", false]], "datetime (class in polars.datatypes)": [[71, "polars.datatypes.Datetime", false]], "datetime() (in module polars)": [[784, "polars.datetime", false]], "datetime() (in module polars.selectors)": [[965, "polars.selectors.datetime", false]], "datetime() (polars.expr.dt method)": [[454, "polars.Expr.dt.datetime", false]], "datetime() (polars.series.dt method)": [[1067, "polars.Series.dt.datetime", false]], "datetime_range() (in module polars)": [[785, "polars.datetime_range", false]], "datetime_ranges() (in module polars)": [[786, "polars.datetime_ranges", false]], "day() (polars.expr.dt method)": [[455, "polars.Expr.dt.day", false]], "day() (polars.series.dt method)": [[1068, "polars.Series.dt.day", false]], "decimal (class in polars.datatypes)": [[72, "polars.datatypes.Decimal", false]], "decimal() (in module polars.selectors)": [[965, "polars.selectors.decimal", false]], "decode() (polars.expr.bin method)": [[404, "polars.Expr.bin.decode", false]], "decode() (polars.expr.str method)": [[692, "polars.Expr.str.decode", false]], "decode() (polars.series.bin method)": [[1013, "polars.Series.bin.decode", false]], "decode() (polars.series.str method)": [[1278, "polars.Series.str.decode", false]], "defer() (in module polars)": [[95, "polars.defer", false]], "degrees() (polars.expr method)": [[441, "polars.Expr.degrees", false]], "describe() (polars.dataframe method)": [[218, "polars.DataFrame.describe", false]], "describe() (polars.lazyframe method)": [[869, "polars.LazyFrame.describe", false]], "describe() (polars.series method)": [[1055, "polars.Series.describe", false]], "deserialize() (polars.dataframe class method)": [[219, "polars.DataFrame.deserialize", false]], "deserialize() (polars.expr class method)": [[442, "polars.Expr.deserialize", false]], "deserialize() (polars.lazyframe class method)": [[870, "polars.LazyFrame.deserialize", false]], "diff() (polars.expr method)": [[443, "polars.Expr.diff", false]], "diff() (polars.expr.list method)": [[551, "polars.Expr.list.diff", false]], "diff() (polars.series method)": [[1056, "polars.Series.diff", false]], "diff() (polars.series.list method)": [[1172, "polars.Series.list.diff", false]], "digit() (in module polars.selectors)": [[965, "polars.selectors.digit", false]], "disable_string_cache() (in module polars)": [[96, "polars.disable_string_cache", false]], "dot() (polars.expr method)": [[444, "polars.Expr.dot", false]], "dot() (polars.series method)": [[1057, "polars.Series.dot", false]], "drop() (polars.dataframe method)": [[220, "polars.DataFrame.drop", false]], "drop() (polars.lazyframe method)": [[871, "polars.LazyFrame.drop", false]], "drop_in_place() (polars.dataframe method)": [[221, "polars.DataFrame.drop_in_place", false]], "drop_nans() (polars.dataframe method)": [[222, "polars.DataFrame.drop_nans", false]], "drop_nans() (polars.expr method)": [[445, "polars.Expr.drop_nans", false]], "drop_nans() (polars.lazyframe method)": [[872, "polars.LazyFrame.drop_nans", false]], "drop_nans() (polars.series method)": [[1058, "polars.Series.drop_nans", false]], "drop_nulls() (polars.dataframe method)": [[223, "polars.DataFrame.drop_nulls", false]], "drop_nulls() (polars.expr method)": [[446, "polars.Expr.drop_nulls", false]], "drop_nulls() (polars.expr.list method)": [[552, "polars.Expr.list.drop_nulls", false]], "drop_nulls() (polars.lazyframe method)": [[873, "polars.LazyFrame.drop_nulls", false]], "drop_nulls() (polars.series method)": [[1059, "polars.Series.drop_nulls", false]], "drop_nulls() (polars.series.list method)": [[1173, "polars.Series.list.drop_nulls", false]], "dst_offset() (polars.expr.dt method)": [[456, "polars.Expr.dt.dst_offset", false]], "dst_offset() (polars.series.dt method)": [[1069, "polars.Series.dt.dst_offset", false]], "dtype (polars.series property)": [[1110, "polars.Series.dtype", false]], "dtypes (polars.dataframe property)": [[224, "polars.DataFrame.dtypes", false]], "dtypes (polars.lazyframe property)": [[874, "polars.LazyFrame.dtypes", false]], "dtypes() (in module polars.testing.parametric)": [[180, "polars.testing.parametric.dtypes", false]], "duplicateerror": [[105, "polars.exceptions.DuplicateError", false]], "duration (class in polars.datatypes)": [[73, "polars.datatypes.Duration", false]], "duration() (in module polars)": [[787, "polars.duration", false]], "duration() (in module polars.selectors)": [[965, "polars.selectors.duration", false]], "element() (in module polars)": [[788, "polars.element", false]], "enable_string_cache() (in module polars)": [[97, "polars.enable_string_cache", false]], "encode() (polars.expr.bin method)": [[405, "polars.Expr.bin.encode", false]], "encode() (polars.expr.str method)": [[693, "polars.Expr.str.encode", false]], "encode() (polars.series.bin method)": [[1014, "polars.Series.bin.encode", false]], "encode() (polars.series.str method)": [[1279, "polars.Series.str.encode", false]], "ends_with() (in module polars.selectors)": [[965, "polars.selectors.ends_with", false]], "ends_with() (polars.expr.bin method)": [[406, "polars.Expr.bin.ends_with", false]], "ends_with() (polars.expr.cat method)": [[422, "polars.Expr.cat.ends_with", false]], "ends_with() (polars.expr.str method)": [[694, "polars.Expr.str.ends_with", false]], "ends_with() (polars.series.bin method)": [[1015, "polars.Series.bin.ends_with", false]], "ends_with() (polars.series.cat method)": [[1030, "polars.Series.cat.ends_with", false]], "ends_with() (polars.series.str method)": [[1280, "polars.Series.str.ends_with", false]], "entropy() (polars.expr method)": [[493, "polars.Expr.entropy", false]], "entropy() (polars.series method)": [[1111, "polars.Series.entropy", false]], "enum (class in polars.datatypes)": [[74, "polars.datatypes.Enum", false]], "epoch() (polars.expr.dt method)": [[457, "polars.Expr.dt.epoch", false]], "epoch() (polars.series.dt method)": [[1070, "polars.Series.dt.epoch", false]], "eq() (polars.expr method)": [[494, "polars.Expr.eq", false]], "eq() (polars.expr.meta method)": [[594, "polars.Expr.meta.eq", false]], "eq() (polars.series method)": [[1112, "polars.Series.eq", false]], "eq_missing() (polars.expr method)": [[495, "polars.Expr.eq_missing", false]], "eq_missing() (polars.series method)": [[1113, "polars.Series.eq_missing", false]], "equals() (polars.dataframe method)": [[225, "polars.DataFrame.equals", false]], "equals() (polars.series method)": [[1114, "polars.Series.equals", false]], "escape_regex() (in module polars)": [[98, "polars.escape_regex", false]], "escape_regex() (polars.expr.str method)": [[695, "polars.Expr.str.escape_regex", false]], "escape_regex() (polars.series.str method)": [[1281, "polars.Series.str.escape_regex", false]], "estimated_size() (polars.dataframe method)": [[226, "polars.DataFrame.estimated_size", false]], "estimated_size() (polars.series method)": [[1115, "polars.Series.estimated_size", false]], "eval() (polars.expr.list method)": [[553, "polars.Expr.list.eval", false]], "eval() (polars.series.list method)": [[1174, "polars.Series.list.eval", false]], "ewm_mean() (polars.expr method)": [[496, "polars.Expr.ewm_mean", false]], "ewm_mean() (polars.series method)": [[1116, "polars.Series.ewm_mean", false]], "ewm_mean_by() (polars.expr method)": [[497, "polars.Expr.ewm_mean_by", false]], "ewm_mean_by() (polars.series method)": [[1117, "polars.Series.ewm_mean_by", false]], "ewm_std() (polars.expr method)": [[498, "polars.Expr.ewm_std", false]], "ewm_std() (polars.series method)": [[1118, "polars.Series.ewm_std", false]], "ewm_var() (polars.expr method)": [[499, "polars.Expr.ewm_var", false]], "ewm_var() (polars.series method)": [[1119, "polars.Series.ewm_var", false]], "exclude() (in module polars)": [[789, "polars.exclude", false]], "exclude() (in module polars.selectors)": [[965, "polars.selectors.exclude", false]], "exclude() (polars.expr method)": [[500, "polars.Expr.exclude", false]], "execute() (polars.sqlcontext method)": [[1367, "polars.SQLContext.execute", false]], "execute_global() (polars.sqlcontext class method)": [[1368, "polars.SQLContext.execute_global", false]], "exp() (polars.expr method)": [[501, "polars.Expr.exp", false]], "exp() (polars.series method)": [[1120, "polars.Series.exp", false]], "expand_selector() (in module polars.selectors)": [[965, "polars.selectors.expand_selector", false]], "explain() (polars.lazyframe method)": [[875, "polars.LazyFrame.explain", false]], "explain_all() (in module polars)": [[129, "polars.explain_all", false]], "explode() (polars.dataframe method)": [[227, "polars.DataFrame.explode", false]], "explode() (polars.expr method)": [[502, "polars.Expr.explode", false]], "explode() (polars.expr.arr method)": [[384, "polars.Expr.arr.explode", false]], "explode() (polars.expr.list method)": [[554, "polars.Expr.list.explode", false]], "explode() (polars.expr.str method)": [[696, "polars.Expr.str.explode", false]], "explode() (polars.lazyframe method)": [[876, "polars.LazyFrame.explode", false]], "explode() (polars.series method)": [[1121, "polars.Series.explode", false]], "explode() (polars.series.arr method)": [[993, "polars.Series.arr.explode", false]], "explode() (polars.series.list method)": [[1175, "polars.Series.list.explode", false]], "explode() (polars.series.str method)": [[1282, "polars.Series.str.explode", false]], "extend() (polars.dataframe method)": [[228, "polars.DataFrame.extend", false]], "extend() (polars.series method)": [[1122, "polars.Series.extend", false]], "extend_constant() (polars.expr method)": [[503, "polars.Expr.extend_constant", false]], "extend_constant() (polars.series method)": [[1123, "polars.Series.extend_constant", false]], "extract() (polars.expr.str method)": [[697, "polars.Expr.str.extract", false]], "extract() (polars.series.str method)": [[1283, "polars.Series.str.extract", false]], "extract_all() (polars.expr.str method)": [[698, "polars.Expr.str.extract_all", false]], "extract_all() (polars.series.str method)": [[1284, "polars.Series.str.extract_all", false]], "extract_groups() (polars.expr.str method)": [[699, "polars.Expr.str.extract_groups", false]], "extract_groups() (polars.series.str method)": [[1285, "polars.Series.str.extract_groups", false]], "extract_many() (polars.expr.str method)": [[700, "polars.Expr.str.extract_many", false]], "extract_many() (polars.series.str method)": [[1286, "polars.Series.str.extract_many", false]], "fetch() (polars.lazyframe.in_process.inprocessquery method)": [[952, "polars.lazyframe.in_process.InProcessQuery.fetch", false]], "fetch_blocking() (polars.lazyframe.in_process.inprocessquery method)": [[953, "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", false]], "field (class in polars.datatypes)": [[75, "polars.datatypes.Field", false]], "field() (polars.expr.struct method)": [[737, "polars.Expr.struct.field", false]], "field() (polars.series.struct method)": [[1323, "polars.Series.struct.field", false]], "fields (polars.series.struct attribute)": [[1324, "polars.Series.struct.fields", false]], "fill_nan() (polars.dataframe method)": [[229, "polars.DataFrame.fill_nan", false]], "fill_nan() (polars.expr method)": [[504, "polars.Expr.fill_nan", false]], "fill_nan() (polars.lazyframe method)": [[877, "polars.LazyFrame.fill_nan", false]], "fill_nan() (polars.series method)": [[1124, "polars.Series.fill_nan", false]], "fill_null() (polars.dataframe method)": [[230, "polars.DataFrame.fill_null", false]], "fill_null() (polars.expr method)": [[505, "polars.Expr.fill_null", false]], "fill_null() (polars.lazyframe method)": [[878, "polars.LazyFrame.fill_null", false]], "fill_null() (polars.series method)": [[1125, "polars.Series.fill_null", false]], "filter() (polars.dataframe method)": [[231, "polars.DataFrame.filter", false]], "filter() (polars.expr method)": [[506, "polars.Expr.filter", false]], "filter() (polars.lazyframe method)": [[879, "polars.LazyFrame.filter", false]], "filter() (polars.series method)": [[1126, "polars.Series.filter", false]], "find() (polars.expr.str method)": [[701, "polars.Expr.str.find", false]], "find() (polars.series.str method)": [[1287, "polars.Series.str.find", false]], "find_many() (polars.expr.str method)": [[702, "polars.Expr.str.find_many", false]], "find_many() (polars.series.str method)": [[1288, "polars.Series.str.find_many", false]], "first() (in module polars)": [[790, "polars.first", false]], "first() (in module polars.selectors)": [[965, "polars.selectors.first", false]], "first() (polars.dataframe.group_by.groupby method)": [[332, "polars.dataframe.group_by.GroupBy.first", false]], "first() (polars.expr method)": [[507, "polars.Expr.first", false]], "first() (polars.expr.arr method)": [[385, "polars.Expr.arr.first", false]], "first() (polars.expr.list method)": [[555, "polars.Expr.list.first", false]], "first() (polars.lazyframe method)": [[880, "polars.LazyFrame.first", false]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[938, "polars.lazyframe.group_by.LazyGroupBy.first", false]], "first() (polars.series method)": [[1127, "polars.Series.first", false]], "first() (polars.series.arr method)": [[994, "polars.Series.arr.first", false]], "first() (polars.series.list method)": [[1176, "polars.Series.list.first", false]], "flags (polars.dataframe property)": [[232, "polars.DataFrame.flags", false]], "flags (polars.series property)": [[1128, "polars.Series.flags", false]], "flatten() (polars.expr method)": [[508, "polars.Expr.flatten", false]], "float() (in module polars.selectors)": [[965, "polars.selectors.float", false]], "float32 (class in polars.datatypes)": [[76, "polars.datatypes.Float32", false]], "float64 (class in polars.datatypes)": [[77, "polars.datatypes.Float64", false]], "floor() (polars.expr method)": [[509, "polars.Expr.floor", false]], "floor() (polars.series method)": [[1129, "polars.Series.floor", false]], "floordiv() (polars.expr method)": [[510, "polars.Expr.floordiv", false]], "fold() (in module polars)": [[791, "polars.fold", false]], "fold() (polars.dataframe method)": [[233, "polars.DataFrame.fold", false]], "format() (in module polars)": [[792, "polars.format", false]], "forward_fill() (polars.expr method)": [[511, "polars.Expr.forward_fill", false]], "forward_fill() (polars.series method)": [[1130, "polars.Series.forward_fill", false]], "from_arrow() (in module polars)": [[130, "polars.from_arrow", false]], "from_dataframe() (in module polars)": [[131, "polars.from_dataframe", false]], "from_dict() (in module polars)": [[132, "polars.from_dict", false]], "from_dicts() (in module polars)": [[133, "polars.from_dicts", false]], "from_epoch() (in module polars)": [[793, "polars.from_epoch", false]], "from_json() (polars.expr class method)": [[512, "polars.Expr.from_json", false]], "from_numpy() (in module polars)": [[134, "polars.from_numpy", false]], "from_pandas() (in module polars)": [[135, "polars.from_pandas", false]], "from_records() (in module polars)": [[136, "polars.from_records", false]], "from_repr() (in module polars)": [[137, "polars.from_repr", false]], "gather() (polars.expr method)": [[513, "polars.Expr.gather", false]], "gather() (polars.expr.list method)": [[556, "polars.Expr.list.gather", false]], "gather() (polars.series method)": [[1131, "polars.Series.gather", false]], "gather() (polars.series.list method)": [[1177, "polars.Series.list.gather", false]], "gather_every() (polars.dataframe method)": [[234, "polars.DataFrame.gather_every", false]], "gather_every() (polars.expr method)": [[514, "polars.Expr.gather_every", false]], "gather_every() (polars.expr.list method)": [[557, "polars.Expr.list.gather_every", false]], "gather_every() (polars.lazyframe method)": [[881, "polars.LazyFrame.gather_every", false]], "gather_every() (polars.series method)": [[1132, "polars.Series.gather_every", false]], "gather_every() (polars.series.list method)": [[1178, "polars.Series.list.gather_every", false]], "ge() (polars.expr method)": [[515, "polars.Expr.ge", false]], "ge() (polars.series method)": [[1133, "polars.Series.ge", false]], "get() (polars.expr method)": [[516, "polars.Expr.get", false]], "get() (polars.expr.arr method)": [[386, "polars.Expr.arr.get", false]], "get() (polars.expr.list method)": [[558, "polars.Expr.list.get", false]], "get() (polars.series.arr method)": [[995, "polars.Series.arr.get", false]], "get() (polars.series.list method)": [[1179, "polars.Series.list.get", false]], "get_categories() (polars.expr.cat method)": [[423, "polars.Expr.cat.get_categories", false]], "get_categories() (polars.series.cat method)": [[1031, "polars.Series.cat.get_categories", false]], "get_chunks() (polars.series method)": [[1134, "polars.Series.get_chunks", false]], "get_column() (polars.dataframe method)": [[235, "polars.DataFrame.get_column", false]], "get_column_index() (polars.dataframe method)": [[236, "polars.DataFrame.get_column_index", false]], "get_columns() (polars.dataframe method)": [[237, "polars.DataFrame.get_columns", false]], "get_index_type() (in module polars)": [[138, "polars.get_index_type", false]], "get_polars_schema() (polars.catalog.unity.tableinfo method)": [[199, "polars.catalog.unity.TableInfo.get_polars_schema", false]], "get_table_info() (polars.catalog method)": [[189, "polars.Catalog.get_table_info", false]], "glimpse() (polars.dataframe method)": [[238, "polars.DataFrame.glimpse", false]], "gpuengine (class in polars.lazyframe.engine_config)": [[934, "polars.lazyframe.engine_config.GPUEngine", false]], "group_by() (polars.dataframe method)": [[239, "polars.DataFrame.group_by", false]], "group_by() (polars.lazyframe method)": [[882, "polars.LazyFrame.group_by", false]], "group_by_dynamic() (polars.dataframe method)": [[240, "polars.DataFrame.group_by_dynamic", false]], "group_by_dynamic() (polars.lazyframe method)": [[883, "polars.LazyFrame.group_by_dynamic", false]], "groups() (in module polars)": [[794, "polars.groups", false]], "gt() (polars.expr method)": [[517, "polars.Expr.gt", false]], "gt() (polars.series method)": [[1135, "polars.Series.gt", false]], "has_multiple_outputs() (polars.expr.meta method)": [[595, "polars.Expr.meta.has_multiple_outputs", false]], "has_nulls() (polars.expr method)": [[518, "polars.Expr.has_nulls", false]], "has_nulls() (polars.series method)": [[1136, "polars.Series.has_nulls", false]], "has_validity() (polars.series method)": [[1137, "polars.Series.has_validity", false]], "hash() (polars.expr method)": [[519, "polars.Expr.hash", false]], "hash() (polars.series method)": [[1138, "polars.Series.hash", false]], "hash_rows() (polars.dataframe method)": [[241, "polars.DataFrame.hash_rows", false]], "head() (in module polars)": [[795, "polars.head", false]], "head() (polars.dataframe method)": [[242, "polars.DataFrame.head", false]], "head() (polars.dataframe.group_by.groupby method)": [[333, "polars.dataframe.group_by.GroupBy.head", false]], "head() (polars.expr method)": [[520, "polars.Expr.head", false]], "head() (polars.expr.list method)": [[559, "polars.Expr.list.head", false]], "head() (polars.expr.str method)": [[703, "polars.Expr.str.head", false]], "head() (polars.lazyframe method)": [[884, "polars.LazyFrame.head", false]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[939, "polars.lazyframe.group_by.LazyGroupBy.head", false]], "head() (polars.series method)": [[1139, "polars.Series.head", false]], "head() (polars.series.list method)": [[1180, "polars.Series.list.head", false]], "head() (polars.series.str method)": [[1289, "polars.Series.str.head", false]], "height (polars.dataframe property)": [[243, "polars.DataFrame.height", false]], "hist() (polars.expr method)": [[521, "polars.Expr.hist", false]], "hist() (polars.series method)": [[1140, "polars.Series.hist", false]], "hour() (polars.expr.dt method)": [[458, "polars.Expr.dt.hour", false]], "hour() (polars.series.dt method)": [[1071, "polars.Series.dt.hour", false]], "hstack() (polars.dataframe method)": [[244, "polars.DataFrame.hstack", false]], "implode() (in module polars)": [[796, "polars.implode", false]], "implode() (polars.expr method)": [[522, "polars.Expr.implode", false]], "implode() (polars.series method)": [[1141, "polars.Series.implode", false]], "index_of() (polars.expr method)": [[523, "polars.Expr.index_of", false]], "index_of() (polars.series method)": [[1142, "polars.Series.index_of", false]], "insert_column() (polars.dataframe method)": [[245, "polars.DataFrame.insert_column", false]], "inspect() (polars.expr method)": [[524, "polars.Expr.inspect", false]], "inspect() (polars.lazyframe method)": [[885, "polars.LazyFrame.inspect", false]], "int128 (class in polars.datatypes)": [[78, "polars.datatypes.Int128", false]], "int16 (class in polars.datatypes)": [[79, "polars.datatypes.Int16", false]], "int32 (class in polars.datatypes)": [[80, "polars.datatypes.Int32", false]], "int64 (class in polars.datatypes)": [[81, "polars.datatypes.Int64", false]], "int8 (class in polars.datatypes)": [[82, "polars.datatypes.Int8", false]], "int_range() (in module polars)": [[797, "polars.int_range", false]], "int_ranges() (in module polars)": [[798, "polars.int_ranges", false]], "integer() (in module polars.selectors)": [[965, "polars.selectors.integer", false]], "interpolate() (polars.dataframe method)": [[246, "polars.DataFrame.interpolate", false]], "interpolate() (polars.expr method)": [[525, "polars.Expr.interpolate", false]], "interpolate() (polars.lazyframe method)": [[886, "polars.LazyFrame.interpolate", false]], "interpolate() (polars.series method)": [[1143, "polars.Series.interpolate", false]], "interpolate_by() (polars.expr method)": [[526, "polars.Expr.interpolate_by", false]], "interpolate_by() (polars.series method)": [[1144, "polars.Series.interpolate_by", false]], "invalidoperationerror": [[106, "polars.exceptions.InvalidOperationError", false]], "is_between() (polars.expr method)": [[527, "polars.Expr.is_between", false]], "is_between() (polars.series method)": [[1145, "polars.Series.is_between", false]], "is_business_day() (polars.expr.dt method)": [[459, "polars.Expr.dt.is_business_day", false]], "is_business_day() (polars.series.dt method)": [[1072, "polars.Series.dt.is_business_day", false]], "is_column() (polars.expr.meta method)": [[596, "polars.Expr.meta.is_column", false]], "is_column_selection() (polars.expr.meta method)": [[597, "polars.Expr.meta.is_column_selection", false]], "is_duplicated() (polars.dataframe method)": [[247, "polars.DataFrame.is_duplicated", false]], "is_duplicated() (polars.expr method)": [[528, "polars.Expr.is_duplicated", false]], "is_duplicated() (polars.series method)": [[1146, "polars.Series.is_duplicated", false]], "is_empty() (polars.dataframe method)": [[248, "polars.DataFrame.is_empty", false]], "is_empty() (polars.series method)": [[1147, "polars.Series.is_empty", false]], "is_finite() (polars.expr method)": [[529, "polars.Expr.is_finite", false]], "is_finite() (polars.series method)": [[1148, "polars.Series.is_finite", false]], "is_first_distinct() (polars.expr method)": [[530, "polars.Expr.is_first_distinct", false]], "is_first_distinct() (polars.series method)": [[1149, "polars.Series.is_first_distinct", false]], "is_in() (polars.expr method)": [[531, "polars.Expr.is_in", false]], "is_in() (polars.series method)": [[1150, "polars.Series.is_in", false]], "is_infinite() (polars.expr method)": [[532, "polars.Expr.is_infinite", false]], "is_infinite() (polars.series method)": [[1151, "polars.Series.is_infinite", false]], "is_last_distinct() (polars.expr method)": [[533, "polars.Expr.is_last_distinct", false]], "is_last_distinct() (polars.series method)": [[1152, "polars.Series.is_last_distinct", false]], "is_leap_year() (polars.expr.dt method)": [[460, "polars.Expr.dt.is_leap_year", false]], "is_leap_year() (polars.series.dt method)": [[1073, "polars.Series.dt.is_leap_year", false]], "is_literal() (polars.expr.meta method)": [[598, "polars.Expr.meta.is_literal", false]], "is_local() (polars.series.cat method)": [[1032, "polars.Series.cat.is_local", false]], "is_nan() (polars.expr method)": [[534, "polars.Expr.is_nan", false]], "is_nan() (polars.series method)": [[1153, "polars.Series.is_nan", false]], "is_not_nan() (polars.expr method)": [[535, "polars.Expr.is_not_nan", false]], "is_not_nan() (polars.series method)": [[1154, "polars.Series.is_not_nan", false]], "is_not_null() (polars.expr method)": [[536, "polars.Expr.is_not_null", false]], "is_not_null() (polars.series method)": [[1155, "polars.Series.is_not_null", false]], "is_null() (polars.expr method)": [[537, "polars.Expr.is_null", false]], "is_null() (polars.series method)": [[1156, "polars.Series.is_null", false]], "is_regex_projection() (polars.expr.meta method)": [[599, "polars.Expr.meta.is_regex_projection", false]], "is_selector() (in module polars.selectors)": [[965, "polars.selectors.is_selector", false]], "is_sorted() (polars.series method)": [[1157, "polars.Series.is_sorted", false]], "is_unique() (polars.dataframe method)": [[249, "polars.DataFrame.is_unique", false]], "is_unique() (polars.expr method)": [[538, "polars.Expr.is_unique", false]], "is_unique() (polars.series method)": [[1158, "polars.Series.is_unique", false]], "iso_year() (polars.expr.dt method)": [[461, "polars.Expr.dt.iso_year", false]], "iso_year() (polars.series.dt method)": [[1074, "polars.Series.dt.iso_year", false]], "item() (polars.dataframe method)": [[250, "polars.DataFrame.item", false]], "item() (polars.series method)": [[1159, "polars.Series.item", false]], "iter_columns() (polars.dataframe method)": [[251, "polars.DataFrame.iter_columns", false]], "iter_rows() (polars.dataframe method)": [[252, "polars.DataFrame.iter_rows", false]], "iter_slices() (polars.dataframe method)": [[253, "polars.DataFrame.iter_slices", false]], "join() (polars.dataframe method)": [[254, "polars.DataFrame.join", false]], "join() (polars.expr.arr method)": [[387, "polars.Expr.arr.join", false]], "join() (polars.expr.list method)": [[560, "polars.Expr.list.join", false]], "join() (polars.expr.str method)": [[704, "polars.Expr.str.join", false]], "join() (polars.lazyframe method)": [[887, "polars.LazyFrame.join", false]], "join() (polars.series.arr method)": [[996, "polars.Series.arr.join", false]], "join() (polars.series.list method)": [[1181, "polars.Series.list.join", false]], "join() (polars.series.str method)": [[1290, "polars.Series.str.join", false]], "join_asof() (polars.dataframe method)": [[255, "polars.DataFrame.join_asof", false]], "join_asof() (polars.lazyframe method)": [[888, "polars.LazyFrame.join_asof", false]], "join_where() (polars.dataframe method)": [[256, "polars.DataFrame.join_where", false]], "join_where() (polars.lazyframe method)": [[889, "polars.LazyFrame.join_where", false]], "json_decode() (polars.expr.str method)": [[705, "polars.Expr.str.json_decode", false]], "json_decode() (polars.series.str method)": [[1291, "polars.Series.str.json_decode", false]], "json_encode() (polars.expr.struct method)": [[738, "polars.Expr.struct.json_encode", false]], "json_encode() (polars.series.struct method)": [[1325, "polars.Series.struct.json_encode", false]], "json_normalize() (in module polars)": [[144, "polars.json_normalize", false]], "json_path_match() (polars.expr.str method)": [[706, "polars.Expr.str.json_path_match", false]], "json_path_match() (polars.series.str method)": [[1292, "polars.Series.str.json_path_match", false]], "keep() (polars.expr.name method)": [[614, "polars.Expr.name.keep", false]], "keyedpartition (class in polars.io.partition)": [[141, "polars.io.partition.KeyedPartition", false]], "keyedpartitioncontext (class in polars.io.partition)": [[142, "polars.io.partition.KeyedPartitionContext", false]], "kurtosis() (polars.expr method)": [[539, "polars.Expr.kurtosis", false]], "kurtosis() (polars.series method)": [[1160, "polars.Series.kurtosis", false]], "last() (in module polars)": [[799, "polars.last", false]], "last() (in module polars.selectors)": [[965, "polars.selectors.last", false]], "last() (polars.dataframe.group_by.groupby method)": [[334, "polars.dataframe.group_by.GroupBy.last", false]], "last() (polars.expr method)": [[540, "polars.Expr.last", false]], "last() (polars.expr.arr method)": [[388, "polars.Expr.arr.last", false]], "last() (polars.expr.list method)": [[561, "polars.Expr.list.last", false]], "last() (polars.lazyframe method)": [[890, "polars.LazyFrame.last", false]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[940, "polars.lazyframe.group_by.LazyGroupBy.last", false]], "last() (polars.series method)": [[1161, "polars.Series.last", false]], "last() (polars.series.arr method)": [[997, "polars.Series.arr.last", false]], "last() (polars.series.list method)": [[1182, "polars.Series.list.last", false]], "lazy() (polars.dataframe method)": [[257, "polars.DataFrame.lazy", false]], "lazy() (polars.lazyframe method)": [[891, "polars.LazyFrame.lazy", false]], "le() (polars.expr method)": [[541, "polars.Expr.le", false]], "le() (polars.series method)": [[1162, "polars.Series.le", false]], "len() (in module polars)": [[800, "polars.len", false]], "len() (polars.dataframe.group_by.groupby method)": [[335, "polars.dataframe.group_by.GroupBy.len", false]], "len() (polars.expr method)": [[542, "polars.Expr.len", false]], "len() (polars.expr.list method)": [[562, "polars.Expr.list.len", false]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[941, "polars.lazyframe.group_by.LazyGroupBy.len", false]], "len() (polars.series method)": [[1163, "polars.Series.len", false]], "len() (polars.series.list method)": [[1183, "polars.Series.list.len", false]], "len_bytes() (polars.expr.cat method)": [[424, "polars.Expr.cat.len_bytes", false]], "len_bytes() (polars.expr.str method)": [[707, "polars.Expr.str.len_bytes", false]], "len_bytes() (polars.series.cat method)": [[1033, "polars.Series.cat.len_bytes", false]], "len_bytes() (polars.series.str method)": [[1293, "polars.Series.str.len_bytes", false]], "len_chars() (polars.expr.cat method)": [[425, "polars.Expr.cat.len_chars", false]], "len_chars() (polars.expr.str method)": [[708, "polars.Expr.str.len_chars", false]], "len_chars() (polars.series.cat method)": [[1034, "polars.Series.cat.len_chars", false]], "len_chars() (polars.series.str method)": [[1294, "polars.Series.str.len_chars", false]], "limit() (polars.dataframe method)": [[258, "polars.DataFrame.limit", false]], "limit() (polars.expr method)": [[543, "polars.Expr.limit", false]], "limit() (polars.lazyframe method)": [[892, "polars.LazyFrame.limit", false]], "limit() (polars.series method)": [[1164, "polars.Series.limit", false]], "linear_space() (in module polars)": [[801, "polars.linear_space", false]], "linear_spaces() (in module polars)": [[802, "polars.linear_spaces", false]], "list (class in polars.datatypes)": [[83, "polars.datatypes.List", false]], "list_catalogs() (polars.catalog method)": [[190, "polars.Catalog.list_catalogs", false]], "list_namespaces() (polars.catalog method)": [[191, "polars.Catalog.list_namespaces", false]], "list_tables() (polars.catalog method)": [[192, "polars.Catalog.list_tables", false]], "lists() (in module polars.testing.parametric)": [[181, "polars.testing.parametric.lists", false]], "lit() (in module polars)": [[803, "polars.lit", false]], "load() (polars.config class method)": [[2, "polars.Config.load", false]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file", false]], "load_profile() (in module polars.testing.parametric)": [[182, "polars.testing.parametric.load_profile", false]], "log() (polars.expr method)": [[584, "polars.Expr.log", false]], "log() (polars.series method)": [[1205, "polars.Series.log", false]], "log10() (polars.expr method)": [[585, "polars.Expr.log10", false]], "log10() (polars.series method)": [[1206, "polars.Series.log10", false]], "log1p() (polars.expr method)": [[586, "polars.Expr.log1p", false]], "log1p() (polars.series method)": [[1207, "polars.Series.log1p", false]], "lower_bound() (polars.expr method)": [[587, "polars.Expr.lower_bound", false]], "lower_bound() (polars.series method)": [[1208, "polars.Series.lower_bound", false]], "lt() (polars.expr method)": [[588, "polars.Expr.lt", false]], "lt() (polars.series method)": [[1209, "polars.Series.lt", false]], "map() (polars.expr.name method)": [[615, "polars.Expr.name.map", false]], "map_batches() (in module polars)": [[804, "polars.map_batches", false]], "map_batches() (polars.expr method)": [[589, "polars.Expr.map_batches", false]], "map_batches() (polars.lazyframe method)": [[893, "polars.LazyFrame.map_batches", false]], "map_elements() (polars.expr method)": [[590, "polars.Expr.map_elements", false]], "map_elements() (polars.series method)": [[1210, "polars.Series.map_elements", false]], "map_fields() (polars.expr.name method)": [[616, "polars.Expr.name.map_fields", false]], "map_groups() (in module polars)": [[805, "polars.map_groups", false]], "map_groups() (polars.dataframe.group_by.groupby method)": [[336, "polars.dataframe.group_by.GroupBy.map_groups", false]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[942, "polars.lazyframe.group_by.LazyGroupBy.map_groups", false]], "map_rows() (polars.dataframe method)": [[259, "polars.DataFrame.map_rows", false]], "mapwithoutreturndtypewarning": [[107, "polars.exceptions.MapWithoutReturnDtypeWarning", false]], "matches() (in module polars.selectors)": [[965, "polars.selectors.matches", false]], "max() (in module polars)": [[806, "polars.max", false]], "max() (polars.dataframe method)": [[260, "polars.DataFrame.max", false]], "max() (polars.dataframe.group_by.groupby method)": [[337, "polars.dataframe.group_by.GroupBy.max", false]], "max() (polars.expr method)": [[591, "polars.Expr.max", false]], "max() (polars.expr.arr method)": [[389, "polars.Expr.arr.max", false]], "max() (polars.expr.list method)": [[563, "polars.Expr.list.max", false]], "max() (polars.lazyframe method)": [[894, "polars.LazyFrame.max", false]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[943, "polars.lazyframe.group_by.LazyGroupBy.max", false]], "max() (polars.series method)": [[1211, "polars.Series.max", false]], "max() (polars.series.arr method)": [[998, "polars.Series.arr.max", false]], "max() (polars.series.dt method)": [[1075, "polars.Series.dt.max", false]], "max() (polars.series.list method)": [[1184, "polars.Series.list.max", false]], "max_horizontal() (in module polars)": [[807, "polars.max_horizontal", false]], "max_horizontal() (polars.dataframe method)": [[261, "polars.DataFrame.max_horizontal", false]], "mean() (in module polars)": [[808, "polars.mean", false]], "mean() (polars.dataframe method)": [[262, "polars.DataFrame.mean", false]], "mean() (polars.dataframe.group_by.groupby method)": [[338, "polars.dataframe.group_by.GroupBy.mean", false]], "mean() (polars.expr method)": [[592, "polars.Expr.mean", false]], "mean() (polars.expr.list method)": [[564, "polars.Expr.list.mean", false]], "mean() (polars.lazyframe method)": [[895, "polars.LazyFrame.mean", false]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[944, "polars.lazyframe.group_by.LazyGroupBy.mean", false]], "mean() (polars.series method)": [[1212, "polars.Series.mean", false]], "mean() (polars.series.dt method)": [[1076, "polars.Series.dt.mean", false]], "mean() (polars.series.list method)": [[1185, "polars.Series.list.mean", false]], "mean_horizontal() (in module polars)": [[809, "polars.mean_horizontal", false]], "mean_horizontal() (polars.dataframe method)": [[263, "polars.DataFrame.mean_horizontal", false]], "median() (in module polars)": [[810, "polars.median", false]], "median() (polars.dataframe method)": [[264, "polars.DataFrame.median", false]], "median() (polars.dataframe.group_by.groupby method)": [[339, "polars.dataframe.group_by.GroupBy.median", false]], "median() (polars.expr method)": [[593, "polars.Expr.median", false]], "median() (polars.expr.arr method)": [[390, "polars.Expr.arr.median", false]], "median() (polars.expr.list method)": [[565, "polars.Expr.list.median", false]], "median() (polars.lazyframe method)": [[896, "polars.LazyFrame.median", false]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[945, "polars.lazyframe.group_by.LazyGroupBy.median", false]], "median() (polars.series method)": [[1213, "polars.Series.median", false]], "median() (polars.series.arr method)": [[999, "polars.Series.arr.median", false]], "median() (polars.series.dt method)": [[1077, "polars.Series.dt.median", false]], "median() (polars.series.list method)": [[1186, "polars.Series.list.median", false]], "melt() (polars.dataframe method)": [[265, "polars.DataFrame.melt", false]], "melt() (polars.lazyframe method)": [[897, "polars.LazyFrame.melt", false]], "merge_sorted() (polars.dataframe method)": [[266, "polars.DataFrame.merge_sorted", false]], "merge_sorted() (polars.lazyframe method)": [[898, "polars.LazyFrame.merge_sorted", false]], "microsecond() (polars.expr.dt method)": [[462, "polars.Expr.dt.microsecond", false]], "microsecond() (polars.series.dt method)": [[1078, "polars.Series.dt.microsecond", false]], "millennium() (polars.expr.dt method)": [[463, "polars.Expr.dt.millennium", false]], "millennium() (polars.series.dt method)": [[1079, "polars.Series.dt.millennium", false]], "millisecond() (polars.expr.dt method)": [[464, "polars.Expr.dt.millisecond", false]], "millisecond() (polars.series.dt method)": [[1080, "polars.Series.dt.millisecond", false]], "min() (in module polars)": [[811, "polars.min", false]], "min() (polars.dataframe method)": [[267, "polars.DataFrame.min", false]], "min() (polars.dataframe.group_by.groupby method)": [[340, "polars.dataframe.group_by.GroupBy.min", false]], "min() (polars.expr method)": [[609, "polars.Expr.min", false]], "min() (polars.expr.arr method)": [[391, "polars.Expr.arr.min", false]], "min() (polars.expr.list method)": [[566, "polars.Expr.list.min", false]], "min() (polars.lazyframe method)": [[899, "polars.LazyFrame.min", false]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[946, "polars.lazyframe.group_by.LazyGroupBy.min", false]], "min() (polars.series method)": [[1214, "polars.Series.min", false]], "min() (polars.series.arr method)": [[1000, "polars.Series.arr.min", false]], "min() (polars.series.dt method)": [[1081, "polars.Series.dt.min", false]], "min() (polars.series.list method)": [[1187, "polars.Series.list.min", false]], "min_horizontal() (in module polars)": [[812, "polars.min_horizontal", false]], "min_horizontal() (polars.dataframe method)": [[268, "polars.DataFrame.min_horizontal", false]], "minute() (polars.expr.dt method)": [[465, "polars.Expr.dt.minute", false]], "minute() (polars.series.dt method)": [[1082, "polars.Series.dt.minute", false]], "mod() (polars.expr method)": [[610, "polars.Expr.mod", false]], "mode() (polars.expr method)": [[611, "polars.Expr.mode", false]], "mode() (polars.series method)": [[1215, "polars.Series.mode", false]], "module": [[965, "module-polars.selectors", false]], "moduleupgraderequirederror": [[108, "polars.exceptions.ModuleUpgradeRequiredError", false]], "month() (polars.expr.dt method)": [[466, "polars.Expr.dt.month", false]], "month() (polars.series.dt method)": [[1083, "polars.Series.dt.month", false]], "month_end() (polars.expr.dt method)": [[467, "polars.Expr.dt.month_end", false]], "month_end() (polars.series.dt method)": [[1084, "polars.Series.dt.month_end", false]], "month_start() (polars.expr.dt method)": [[468, "polars.Expr.dt.month_start", false]], "month_start() (polars.series.dt method)": [[1085, "polars.Series.dt.month_start", false]], "mul() (polars.expr method)": [[612, "polars.Expr.mul", false]], "n_chunks() (polars.dataframe method)": [[269, "polars.DataFrame.n_chunks", false]], "n_chunks() (polars.series method)": [[1216, "polars.Series.n_chunks", false]], "n_unique() (in module polars)": [[813, "polars.n_unique", false]], "n_unique() (polars.dataframe method)": [[270, "polars.DataFrame.n_unique", false]], "n_unique() (polars.dataframe.group_by.groupby method)": [[341, "polars.dataframe.group_by.GroupBy.n_unique", false]], "n_unique() (polars.expr method)": [[613, "polars.Expr.n_unique", false]], "n_unique() (polars.expr.arr method)": [[392, "polars.Expr.arr.n_unique", false]], "n_unique() (polars.expr.list method)": [[567, "polars.Expr.list.n_unique", false]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[947, "polars.lazyframe.group_by.LazyGroupBy.n_unique", false]], "n_unique() (polars.series method)": [[1217, "polars.Series.n_unique", false]], "n_unique() (polars.series.arr method)": [[1001, "polars.Series.arr.n_unique", false]], "n_unique() (polars.series.list method)": [[1188, "polars.Series.list.n_unique", false]], "name (polars.series property)": [[1218, "polars.Series.name", false]], "namespaceinfo (class in polars.catalog.unity)": [[197, "polars.catalog.unity.NamespaceInfo", false]], "nan_max() (polars.expr method)": [[623, "polars.Expr.nan_max", false]], "nan_max() (polars.series method)": [[1219, "polars.Series.nan_max", false]], "nan_min() (polars.expr method)": [[624, "polars.Expr.nan_min", false]], "nan_min() (polars.series method)": [[1220, "polars.Series.nan_min", false]], "nanosecond() (polars.expr.dt method)": [[469, "polars.Expr.dt.nanosecond", false]], "nanosecond() (polars.series.dt method)": [[1086, "polars.Series.dt.nanosecond", false]], "ne() (polars.expr method)": [[625, "polars.Expr.ne", false]], "ne() (polars.expr.meta method)": [[600, "polars.Expr.meta.ne", false]], "ne() (polars.series method)": [[1221, "polars.Series.ne", false]], "ne_missing() (polars.expr method)": [[626, "polars.Expr.ne_missing", false]], "ne_missing() (polars.series method)": [[1222, "polars.Series.ne_missing", false]], "neg() (polars.expr method)": [[627, "polars.Expr.neg", false]], "new_from_index() (polars.series method)": [[1223, "polars.Series.new_from_index", false]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[139, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", false]], "nodataerror": [[109, "polars.exceptions.NoDataError", false]], "normalize() (polars.expr.str method)": [[709, "polars.Expr.str.normalize", false]], "normalize() (polars.series.str method)": [[1295, "polars.Series.str.normalize", false]], "norowsreturnederror": [[110, "polars.exceptions.NoRowsReturnedError", false]], "not_() (polars.expr method)": [[628, "polars.Expr.not_", false]], "not_() (polars.series method)": [[1224, "polars.Series.not_", false]], "nth() (in module polars)": [[814, "polars.nth", false]], "null (class in polars.datatypes)": [[84, "polars.datatypes.Null", false]], "null_count() (polars.dataframe method)": [[271, "polars.DataFrame.null_count", false]], "null_count() (polars.expr method)": [[629, "polars.Expr.null_count", false]], "null_count() (polars.lazyframe method)": [[900, "polars.LazyFrame.null_count", false]], "null_count() (polars.series method)": [[1225, "polars.Series.null_count", false]], "numeric() (in module polars.selectors)": [[965, "polars.selectors.numeric", false]], "object (class in polars.datatypes)": [[85, "polars.datatypes.Object", false]], "offset_by() (polars.expr.dt method)": [[470, "polars.Expr.dt.offset_by", false]], "offset_by() (polars.series.dt method)": [[1087, "polars.Series.dt.offset_by", false]], "ones() (in module polars)": [[815, "polars.ones", false]], "or_() (polars.expr method)": [[630, "polars.Expr.or_", false]], "ordinal_day() (polars.expr.dt method)": [[471, "polars.Expr.dt.ordinal_day", false]], "ordinal_day() (polars.series.dt method)": [[1088, "polars.Series.dt.ordinal_day", false]], "outofboundserror": [[111, "polars.exceptions.OutOfBoundsError", false]], "output_name() (polars.expr.meta method)": [[601, "polars.Expr.meta.output_name", false]], "over() (polars.expr method)": [[631, "polars.Expr.over", false]], "pad_end() (polars.expr.str method)": [[710, "polars.Expr.str.pad_end", false]], "pad_end() (polars.series.str method)": [[1296, "polars.Series.str.pad_end", false]], "pad_start() (polars.expr.str method)": [[711, "polars.Expr.str.pad_start", false]], "pad_start() (polars.series.str method)": [[1297, "polars.Series.str.pad_start", false]], "panicexception": [[112, "polars.exceptions.PanicException", false]], "parametercollisionerror": [[113, "polars.exceptions.ParameterCollisionError", false]], "partition_by() (polars.dataframe method)": [[272, "polars.DataFrame.partition_by", false]], "partitionbykey (class in polars)": [[52, "polars.PartitionByKey", false]], "partitionmaxsize (class in polars)": [[53, "polars.PartitionMaxSize", false]], "partitionparted (class in polars)": [[54, "polars.PartitionParted", false]], "pct_change() (polars.expr method)": [[632, "polars.Expr.pct_change", false]], "pct_change() (polars.series method)": [[1226, "polars.Series.pct_change", false]], "peak_max() (polars.expr method)": [[633, "polars.Expr.peak_max", false]], "peak_max() (polars.series method)": [[1227, "polars.Series.peak_max", false]], "peak_min() (polars.expr method)": [[634, "polars.Expr.peak_min", false]], "peak_min() (polars.series method)": [[1228, "polars.Series.peak_min", false]], "performancewarning": [[114, "polars.exceptions.PerformanceWarning", false]], "pipe() (polars.dataframe method)": [[273, "polars.DataFrame.pipe", false]], "pipe() (polars.expr method)": [[635, "polars.Expr.pipe", false]], "pipe() (polars.lazyframe method)": [[901, "polars.LazyFrame.pipe", false]], "pivot() (polars.dataframe method)": [[274, "polars.DataFrame.pivot", false]], "plot (polars.dataframe property)": [[353, "polars.DataFrame.plot", false]], "plot (polars.series property)": [[1363, "polars.Series.plot", false]], "polars.selectors": [[965, "module-polars.selectors", false]], "polarserror": [[115, "polars.exceptions.PolarsError", false]], "polarsinefficientmapwarning": [[116, "polars.exceptions.PolarsInefficientMapWarning", false]], "polarswarning": [[117, "polars.exceptions.PolarsWarning", false]], "pop() (polars.expr.meta method)": [[602, "polars.Expr.meta.pop", false]], "pow() (polars.expr method)": [[636, "polars.Expr.pow", false]], "pow() (polars.series method)": [[1229, "polars.Series.pow", false]], "prefix() (polars.expr.name method)": [[617, "polars.Expr.name.prefix", false]], "prefix_fields() (polars.expr.name method)": [[618, "polars.Expr.name.prefix_fields", false]], "product() (polars.dataframe method)": [[275, "polars.DataFrame.product", false]], "product() (polars.expr method)": [[637, "polars.Expr.product", false]], "product() (polars.series method)": [[1230, "polars.Series.product", false]], "profile() (polars.lazyframe method)": [[902, "polars.LazyFrame.profile", false]], "qcut() (polars.expr method)": [[638, "polars.Expr.qcut", false]], "qcut() (polars.series method)": [[1231, "polars.Series.qcut", false]], "quantile() (in module polars)": [[816, "polars.quantile", false]], "quantile() (polars.dataframe method)": [[276, "polars.DataFrame.quantile", false]], "quantile() (polars.dataframe.group_by.groupby method)": [[342, "polars.dataframe.group_by.GroupBy.quantile", false]], "quantile() (polars.expr method)": [[639, "polars.Expr.quantile", false]], "quantile() (polars.lazyframe method)": [[903, "polars.LazyFrame.quantile", false]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[948, "polars.lazyframe.group_by.LazyGroupBy.quantile", false]], "quantile() (polars.series method)": [[1232, "polars.Series.quantile", false]], "quarter() (polars.expr.dt method)": [[472, "polars.Expr.dt.quarter", false]], "quarter() (polars.series.dt method)": [[1089, "polars.Series.dt.quarter", false]], "radians() (polars.expr method)": [[640, "polars.Expr.radians", false]], "rank() (polars.expr method)": [[641, "polars.Expr.rank", false]], "rank() (polars.series method)": [[1233, "polars.Series.rank", false]], "read_avro() (in module polars)": [[146, "polars.read_avro", false]], "read_clipboard() (in module polars)": [[147, "polars.read_clipboard", false]], "read_csv() (in module polars)": [[148, "polars.read_csv", false]], "read_csv_batched() (in module polars)": [[149, "polars.read_csv_batched", false]], "read_database() (in module polars)": [[150, "polars.read_database", false]], "read_database_uri() (in module polars)": [[151, "polars.read_database_uri", false]], "read_delta() (in module polars)": [[152, "polars.read_delta", false]], "read_excel() (in module polars)": [[153, "polars.read_excel", false]], "read_ipc() (in module polars)": [[154, "polars.read_ipc", false]], "read_ipc_schema() (in module polars)": [[155, "polars.read_ipc_schema", false]], "read_ipc_stream() (in module polars)": [[156, "polars.read_ipc_stream", false]], "read_json() (in module polars)": [[157, "polars.read_json", false]], "read_ndjson() (in module polars)": [[158, "polars.read_ndjson", false]], "read_ods() (in module polars)": [[159, "polars.read_ods", false]], "read_parquet() (in module polars)": [[160, "polars.read_parquet", false]], "read_parquet_metadata() (in module polars)": [[161, "polars.read_parquet_metadata", false]], "read_parquet_schema() (in module polars)": [[162, "polars.read_parquet_schema", false]], "rechunk() (polars.dataframe method)": [[277, "polars.DataFrame.rechunk", false]], "rechunk() (polars.expr method)": [[642, "polars.Expr.rechunk", false]], "rechunk() (polars.series method)": [[1234, "polars.Series.rechunk", false]], "reduce() (in module polars)": [[817, "polars.reduce", false]], "register() (polars.sqlcontext method)": [[1369, "polars.SQLContext.register", false]], "register_dataframe_namespace() (in module polars.api)": [[57, "polars.api.register_dataframe_namespace", false]], "register_expr_namespace() (in module polars.api)": [[58, "polars.api.register_expr_namespace", false]], "register_globals() (polars.sqlcontext method)": [[1370, "polars.SQLContext.register_globals", false]], "register_io_source() (in module polars.io.plugins)": [[143, "polars.io.plugins.register_io_source", false]], "register_lazyframe_namespace() (in module polars.api)": [[59, "polars.api.register_lazyframe_namespace", false]], "register_many() (polars.sqlcontext method)": [[1371, "polars.SQLContext.register_many", false]], "register_plugin_function() (in module polars.plugins)": [[145, "polars.plugins.register_plugin_function", false]], "register_series_namespace() (in module polars.api)": [[60, "polars.api.register_series_namespace", false]], "reinterpret() (polars.expr method)": [[643, "polars.Expr.reinterpret", false]], "reinterpret() (polars.expr.bin method)": [[407, "polars.Expr.bin.reinterpret", false]], "reinterpret() (polars.series method)": [[1235, "polars.Series.reinterpret", false]], "reinterpret() (polars.series.bin method)": [[1016, "polars.Series.bin.reinterpret", false]], "remote() (polars.lazyframe method)": [[904, "polars.LazyFrame.remote", false]], "remove() (polars.dataframe method)": [[278, "polars.DataFrame.remove", false]], "remove() (polars.lazyframe method)": [[905, "polars.LazyFrame.remove", false]], "rename() (polars.dataframe method)": [[279, "polars.DataFrame.rename", false]], "rename() (polars.lazyframe method)": [[906, "polars.LazyFrame.rename", false]], "rename() (polars.series method)": [[1236, "polars.Series.rename", false]], "rename_fields() (polars.expr.struct method)": [[739, "polars.Expr.struct.rename_fields", false]], "rename_fields() (polars.series.struct method)": [[1326, "polars.Series.struct.rename_fields", false]], "repeat() (in module polars)": [[818, "polars.repeat", false]], "repeat_by() (polars.expr method)": [[644, "polars.Expr.repeat_by", false]], "replace() (polars.expr method)": [[645, "polars.Expr.replace", false]], "replace() (polars.expr.dt method)": [[473, "polars.Expr.dt.replace", false]], "replace() (polars.expr.str method)": [[712, "polars.Expr.str.replace", false]], "replace() (polars.series method)": [[1237, "polars.Series.replace", false]], "replace() (polars.series.dt method)": [[1090, "polars.Series.dt.replace", false]], "replace() (polars.series.str method)": [[1298, "polars.Series.str.replace", false]], "replace_all() (polars.expr.str method)": [[713, "polars.Expr.str.replace_all", false]], "replace_all() (polars.series.str method)": [[1299, "polars.Series.str.replace_all", false]], "replace_column() (polars.dataframe method)": [[280, "polars.DataFrame.replace_column", false]], "replace_many() (polars.expr.str method)": [[714, "polars.Expr.str.replace_many", false]], "replace_many() (polars.series.str method)": [[1300, "polars.Series.str.replace_many", false]], "replace_strict() (polars.expr method)": [[646, "polars.Expr.replace_strict", false]], "replace_strict() (polars.series method)": [[1238, "polars.Series.replace_strict", false]], "replace_time_zone() (polars.expr.dt method)": [[474, "polars.Expr.dt.replace_time_zone", false]], "replace_time_zone() (polars.series.dt method)": [[1091, "polars.Series.dt.replace_time_zone", false]], "reshape() (polars.expr method)": [[647, "polars.Expr.reshape", false]], "reshape() (polars.series method)": [[1239, "polars.Series.reshape", false]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults", false]], "reverse() (polars.dataframe method)": [[281, "polars.DataFrame.reverse", false]], "reverse() (polars.expr method)": [[648, "polars.Expr.reverse", false]], "reverse() (polars.expr.arr method)": [[393, "polars.Expr.arr.reverse", false]], "reverse() (polars.expr.list method)": [[568, "polars.Expr.list.reverse", false]], "reverse() (polars.expr.str method)": [[715, "polars.Expr.str.reverse", false]], "reverse() (polars.lazyframe method)": [[907, "polars.LazyFrame.reverse", false]], "reverse() (polars.series method)": [[1240, "polars.Series.reverse", false]], "reverse() (polars.series.arr method)": [[1002, "polars.Series.arr.reverse", false]], "reverse() (polars.series.list method)": [[1189, "polars.Series.list.reverse", false]], "reverse() (polars.series.str method)": [[1301, "polars.Series.str.reverse", false]], "rle() (polars.expr method)": [[649, "polars.Expr.rle", false]], "rle() (polars.series method)": [[1241, "polars.Series.rle", false]], "rle_id() (polars.expr method)": [[650, "polars.Expr.rle_id", false]], "rle_id() (polars.series method)": [[1242, "polars.Series.rle_id", false]], "rolling() (polars.dataframe method)": [[282, "polars.DataFrame.rolling", false]], "rolling() (polars.expr method)": [[651, "polars.Expr.rolling", false]], "rolling() (polars.lazyframe method)": [[908, "polars.LazyFrame.rolling", false]], "rolling_corr() (in module polars)": [[819, "polars.rolling_corr", false]], "rolling_cov() (in module polars)": [[820, "polars.rolling_cov", false]], "rolling_kurtosis() (polars.expr method)": [[652, "polars.Expr.rolling_kurtosis", false]], "rolling_kurtosis() (polars.series method)": [[1243, "polars.Series.rolling_kurtosis", false]], "rolling_map() (polars.expr method)": [[653, "polars.Expr.rolling_map", false]], "rolling_map() (polars.series method)": [[1244, "polars.Series.rolling_map", false]], "rolling_max() (polars.expr method)": [[654, "polars.Expr.rolling_max", false]], "rolling_max() (polars.series method)": [[1245, "polars.Series.rolling_max", false]], "rolling_max_by() (polars.expr method)": [[655, "polars.Expr.rolling_max_by", false]], "rolling_mean() (polars.expr method)": [[656, "polars.Expr.rolling_mean", false]], "rolling_mean() (polars.series method)": [[1246, "polars.Series.rolling_mean", false]], "rolling_mean_by() (polars.expr method)": [[657, "polars.Expr.rolling_mean_by", false]], "rolling_median() (polars.expr method)": [[658, "polars.Expr.rolling_median", false]], "rolling_median() (polars.series method)": [[1247, "polars.Series.rolling_median", false]], "rolling_median_by() (polars.expr method)": [[659, "polars.Expr.rolling_median_by", false]], "rolling_min() (polars.expr method)": [[660, "polars.Expr.rolling_min", false]], "rolling_min() (polars.series method)": [[1248, "polars.Series.rolling_min", false]], "rolling_min_by() (polars.expr method)": [[661, "polars.Expr.rolling_min_by", false]], "rolling_quantile() (polars.expr method)": [[662, "polars.Expr.rolling_quantile", false]], "rolling_quantile() (polars.series method)": [[1249, "polars.Series.rolling_quantile", false]], "rolling_quantile_by() (polars.expr method)": [[663, "polars.Expr.rolling_quantile_by", false]], "rolling_skew() (polars.expr method)": [[664, "polars.Expr.rolling_skew", false]], "rolling_skew() (polars.series method)": [[1250, "polars.Series.rolling_skew", false]], "rolling_std() (polars.expr method)": [[665, "polars.Expr.rolling_std", false]], "rolling_std() (polars.series method)": [[1251, "polars.Series.rolling_std", false]], "rolling_std_by() (polars.expr method)": [[666, "polars.Expr.rolling_std_by", false]], "rolling_sum() (polars.expr method)": [[667, "polars.Expr.rolling_sum", false]], "rolling_sum() (polars.series method)": [[1252, "polars.Series.rolling_sum", false]], "rolling_sum_by() (polars.expr method)": [[668, "polars.Expr.rolling_sum_by", false]], "rolling_var() (polars.expr method)": [[669, "polars.Expr.rolling_var", false]], "rolling_var() (polars.series method)": [[1253, "polars.Series.rolling_var", false]], "rolling_var_by() (polars.expr method)": [[670, "polars.Expr.rolling_var_by", false]], "root_names() (polars.expr.meta method)": [[603, "polars.Expr.meta.root_names", false]], "round() (polars.expr method)": [[671, "polars.Expr.round", false]], "round() (polars.expr.dt method)": [[475, "polars.Expr.dt.round", false]], "round() (polars.series method)": [[1254, "polars.Series.round", false]], "round() (polars.series.dt method)": [[1092, "polars.Series.dt.round", false]], "round_sig_figs() (polars.expr method)": [[672, "polars.Expr.round_sig_figs", false]], "round_sig_figs() (polars.series method)": [[1255, "polars.Series.round_sig_figs", false]], "row() (polars.dataframe method)": [[283, "polars.DataFrame.row", false]], "rows() (polars.dataframe method)": [[284, "polars.DataFrame.rows", false]], "rows_by_key() (polars.dataframe method)": [[285, "polars.DataFrame.rows_by_key", false]], "rowserror": [[118, "polars.exceptions.RowsError", false]], "sample() (polars.dataframe method)": [[286, "polars.DataFrame.sample", false]], "sample() (polars.expr method)": [[673, "polars.Expr.sample", false]], "sample() (polars.expr.list method)": [[569, "polars.Expr.list.sample", false]], "sample() (polars.series method)": [[1256, "polars.Series.sample", false]], "sample() (polars.series.list method)": [[1190, "polars.Series.list.sample", false]], "save() (polars.config class method)": [[5, "polars.Config.save", false]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file", false]], "scan_csv() (in module polars)": [[163, "polars.scan_csv", false]], "scan_delta() (in module polars)": [[164, "polars.scan_delta", false]], "scan_iceberg() (in module polars)": [[165, "polars.scan_iceberg", false]], "scan_ipc() (in module polars)": [[166, "polars.scan_ipc", false]], "scan_ndjson() (in module polars)": [[167, "polars.scan_ndjson", false]], "scan_parquet() (in module polars)": [[168, "polars.scan_parquet", false]], "scan_pyarrow_dataset() (in module polars)": [[169, "polars.scan_pyarrow_dataset", false]], "scan_table() (polars.catalog method)": [[193, "polars.Catalog.scan_table", false]], "scatter() (polars.series method)": [[1257, "polars.Series.scatter", false]], "schema (polars.dataframe property)": [[287, "polars.DataFrame.schema", false]], "schema (polars.lazyframe property)": [[909, "polars.LazyFrame.schema", false]], "schema (polars.series.struct attribute)": [[1327, "polars.Series.struct.schema", false]], "schemaerror": [[121, "polars.exceptions.SchemaError", false]], "schemafieldnotfounderror": [[122, "polars.exceptions.SchemaFieldNotFoundError", false]], "search_sorted() (polars.expr method)": [[674, "polars.Expr.search_sorted", false]], "search_sorted() (polars.series method)": [[1258, "polars.Series.search_sorted", false]], "second() (polars.expr.dt method)": [[476, "polars.Expr.dt.second", false]], "second() (polars.series.dt method)": [[1093, "polars.Series.dt.second", false]], "select() (in module polars)": [[821, "polars.select", false]], "select() (polars.dataframe method)": [[288, "polars.DataFrame.select", false]], "select() (polars.lazyframe method)": [[910, "polars.LazyFrame.select", false]], "select_seq() (polars.dataframe method)": [[289, "polars.DataFrame.select_seq", false]], "select_seq() (polars.lazyframe method)": [[911, "polars.LazyFrame.select_seq", false]], "serialize() (polars.dataframe method)": [[290, "polars.DataFrame.serialize", false]], "serialize() (polars.expr.meta method)": [[604, "polars.Expr.meta.serialize", false]], "serialize() (polars.lazyframe method)": [[912, "polars.LazyFrame.serialize", false]], "series() (in module polars.testing.parametric)": [[183, "polars.testing.parametric.series", false]], "set() (polars.series method)": [[1259, "polars.Series.set", false]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables", false]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify", false]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator", false]], "set_difference() (polars.expr.list method)": [[570, "polars.Expr.list.set_difference", false]], "set_difference() (polars.series.list method)": [[1191, "polars.Series.list.set_difference", false]], "set_engine_affinity() (polars.config class method)": [[10, "polars.Config.set_engine_affinity", false]], "set_float_precision() (polars.config class method)": [[11, "polars.Config.set_float_precision", false]], "set_fmt_float() (polars.config class method)": [[12, "polars.Config.set_fmt_float", false]], "set_fmt_str_lengths() (polars.config class method)": [[13, "polars.Config.set_fmt_str_lengths", false]], "set_fmt_table_cell_list_len() (polars.config class method)": [[14, "polars.Config.set_fmt_table_cell_list_len", false]], "set_intersection() (polars.expr.list method)": [[571, "polars.Expr.list.set_intersection", false]], "set_intersection() (polars.series.list method)": [[1192, "polars.Series.list.set_intersection", false]], "set_profile() (in module polars.testing.parametric)": [[184, "polars.testing.parametric.set_profile", false]], "set_random_seed() (in module polars)": [[170, "polars.set_random_seed", false]], "set_sorted() (polars.dataframe method)": [[291, "polars.DataFrame.set_sorted", false]], "set_sorted() (polars.expr method)": [[675, "polars.Expr.set_sorted", false]], "set_sorted() (polars.lazyframe method)": [[913, "polars.LazyFrame.set_sorted", false]], "set_sorted() (polars.series method)": [[1260, "polars.Series.set_sorted", false]], "set_streaming_chunk_size() (polars.config class method)": [[15, "polars.Config.set_streaming_chunk_size", false]], "set_symmetric_difference() (polars.expr.list method)": [[572, "polars.Expr.list.set_symmetric_difference", false]], "set_symmetric_difference() (polars.series.list method)": [[1193, "polars.Series.list.set_symmetric_difference", false]], "set_tbl_cell_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_alignment", false]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[17, "polars.Config.set_tbl_cell_numeric_alignment", false]], "set_tbl_cols() (polars.config class method)": [[18, "polars.Config.set_tbl_cols", false]], "set_tbl_column_data_type_inline() (polars.config class method)": [[19, "polars.Config.set_tbl_column_data_type_inline", false]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[20, "polars.Config.set_tbl_dataframe_shape_below", false]], "set_tbl_formatting() (polars.config class method)": [[21, "polars.Config.set_tbl_formatting", false]], "set_tbl_hide_column_data_types() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_data_types", false]], "set_tbl_hide_column_names() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_column_names", false]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dataframe_shape", false]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[25, "polars.Config.set_tbl_hide_dtype_separator", false]], "set_tbl_rows() (polars.config class method)": [[26, "polars.Config.set_tbl_rows", false]], "set_tbl_width_chars() (polars.config class method)": [[27, "polars.Config.set_tbl_width_chars", false]], "set_thousands_separator() (polars.config class method)": [[28, "polars.Config.set_thousands_separator", false]], "set_trim_decimal_zeros() (polars.config class method)": [[29, "polars.Config.set_trim_decimal_zeros", false]], "set_union() (polars.expr.list method)": [[573, "polars.Expr.list.set_union", false]], "set_union() (polars.series.list method)": [[1194, "polars.Series.list.set_union", false]], "set_verbose() (polars.config class method)": [[30, "polars.Config.set_verbose", false]], "shape (polars.dataframe property)": [[292, "polars.DataFrame.shape", false]], "shape (polars.series property)": [[1261, "polars.Series.shape", false]], "shapeerror": [[123, "polars.exceptions.ShapeError", false]], "shift() (polars.dataframe method)": [[293, "polars.DataFrame.shift", false]], "shift() (polars.expr method)": [[676, "polars.Expr.shift", false]], "shift() (polars.expr.arr method)": [[394, "polars.Expr.arr.shift", false]], "shift() (polars.expr.list method)": [[574, "polars.Expr.list.shift", false]], "shift() (polars.lazyframe method)": [[914, "polars.LazyFrame.shift", false]], "shift() (polars.series method)": [[1262, "polars.Series.shift", false]], "shift() (polars.series.arr method)": [[1003, "polars.Series.arr.shift", false]], "shift() (polars.series.list method)": [[1195, "polars.Series.list.shift", false]], "show_graph() (polars.expr.meta method)": [[605, "polars.Expr.meta.show_graph", false]], "show_graph() (polars.lazyframe method)": [[915, "polars.LazyFrame.show_graph", false]], "show_versions() (in module polars)": [[171, "polars.show_versions", false]], "shrink_dtype() (polars.expr method)": [[677, "polars.Expr.shrink_dtype", false]], "shrink_dtype() (polars.series method)": [[1263, "polars.Series.shrink_dtype", false]], "shrink_to_fit() (polars.dataframe method)": [[294, "polars.DataFrame.shrink_to_fit", false]], "shrink_to_fit() (polars.series method)": [[1264, "polars.Series.shrink_to_fit", false]], "shuffle() (polars.expr method)": [[678, "polars.Expr.shuffle", false]], "shuffle() (polars.series method)": [[1265, "polars.Series.shuffle", false]], "sign() (polars.expr method)": [[679, "polars.Expr.sign", false]], "sign() (polars.series method)": [[1266, "polars.Series.sign", false]], "signed_integer() (in module polars.selectors)": [[965, "polars.selectors.signed_integer", false]], "sin() (polars.expr method)": [[680, "polars.Expr.sin", false]], "sin() (polars.series method)": [[1267, "polars.Series.sin", false]], "sinh() (polars.expr method)": [[681, "polars.Expr.sinh", false]], "sinh() (polars.series method)": [[1268, "polars.Series.sinh", false]], "sink_csv() (polars.lazyframe method)": [[48, "polars.LazyFrame.sink_csv", false]], "sink_ipc() (polars.lazyframe method)": [[49, "polars.LazyFrame.sink_ipc", false]], "sink_ndjson() (polars.lazyframe method)": [[50, "polars.LazyFrame.sink_ndjson", false]], "sink_parquet() (polars.lazyframe method)": [[51, "polars.LazyFrame.sink_parquet", false]], "size() (polars.expr.bin method)": [[408, "polars.Expr.bin.size", false]], "size() (polars.series.bin method)": [[1017, "polars.Series.bin.size", false]], "skew() (polars.expr method)": [[682, "polars.Expr.skew", false]], "skew() (polars.series method)": [[1269, "polars.Series.skew", false]], "slice() (polars.dataframe method)": [[295, "polars.DataFrame.slice", false]], "slice() (polars.expr method)": [[683, "polars.Expr.slice", false]], "slice() (polars.expr.list method)": [[575, "polars.Expr.list.slice", false]], "slice() (polars.expr.str method)": [[716, "polars.Expr.str.slice", false]], "slice() (polars.lazyframe method)": [[916, "polars.LazyFrame.slice", false]], "slice() (polars.series method)": [[1270, "polars.Series.slice", false]], "slice() (polars.series.list method)": [[1196, "polars.Series.list.slice", false]], "slice() (polars.series.str method)": [[1302, "polars.Series.str.slice", false]], "sort() (polars.dataframe method)": [[296, "polars.DataFrame.sort", false]], "sort() (polars.expr method)": [[684, "polars.Expr.sort", false]], "sort() (polars.expr.arr method)": [[395, "polars.Expr.arr.sort", false]], "sort() (polars.expr.list method)": [[576, "polars.Expr.list.sort", false]], "sort() (polars.lazyframe method)": [[917, "polars.LazyFrame.sort", false]], "sort() (polars.series method)": [[1271, "polars.Series.sort", false]], "sort() (polars.series.arr method)": [[1004, "polars.Series.arr.sort", false]], "sort() (polars.series.list method)": [[1197, "polars.Series.list.sort", false]], "sort_by() (polars.expr method)": [[685, "polars.Expr.sort_by", false]], "split() (polars.expr.str method)": [[717, "polars.Expr.str.split", false]], "split() (polars.series.str method)": [[1303, "polars.Series.str.split", false]], "split_exact() (polars.expr.str method)": [[718, "polars.Expr.str.split_exact", false]], "split_exact() (polars.series.str method)": [[1304, "polars.Series.str.split_exact", false]], "splitn() (polars.expr.str method)": [[719, "polars.Expr.str.splitn", false]], "splitn() (polars.series.str method)": [[1305, "polars.Series.str.splitn", false]], "sql() (in module polars)": [[822, "polars.sql", false]], "sql() (polars.dataframe method)": [[297, "polars.DataFrame.sql", false]], "sql() (polars.lazyframe method)": [[918, "polars.LazyFrame.sql", false]], "sql_expr() (in module polars)": [[823, "polars.sql_expr", false]], "sqlcontext (class in polars)": [[1386, "polars.SQLContext", false]], "sqlinterfaceerror": [[119, "polars.exceptions.SQLInterfaceError", false]], "sqlsyntaxerror": [[120, "polars.exceptions.SQLSyntaxError", false]], "sqrt() (polars.expr method)": [[686, "polars.Expr.sqrt", false]], "sqrt() (polars.series method)": [[1272, "polars.Series.sqrt", false]], "starts_with() (in module polars.selectors)": [[965, "polars.selectors.starts_with", false]], "starts_with() (polars.expr.bin method)": [[409, "polars.Expr.bin.starts_with", false]], "starts_with() (polars.expr.cat method)": [[426, "polars.Expr.cat.starts_with", false]], "starts_with() (polars.expr.str method)": [[720, "polars.Expr.str.starts_with", false]], "starts_with() (polars.series.bin method)": [[1018, "polars.Series.bin.starts_with", false]], "starts_with() (polars.series.cat method)": [[1035, "polars.Series.cat.starts_with", false]], "starts_with() (polars.series.str method)": [[1306, "polars.Series.str.starts_with", false]], "state() (polars.config class method)": [[31, "polars.Config.state", false]], "std() (in module polars)": [[824, "polars.std", false]], "std() (polars.dataframe method)": [[298, "polars.DataFrame.std", false]], "std() (polars.expr method)": [[687, "polars.Expr.std", false]], "std() (polars.expr.arr method)": [[396, "polars.Expr.arr.std", false]], "std() (polars.expr.list method)": [[577, "polars.Expr.list.std", false]], "std() (polars.lazyframe method)": [[919, "polars.LazyFrame.std", false]], "std() (polars.series method)": [[1273, "polars.Series.std", false]], "std() (polars.series.arr method)": [[1005, "polars.Series.arr.std", false]], "std() (polars.series.list method)": [[1198, "polars.Series.list.std", false]], "strftime() (polars.expr.dt method)": [[477, "polars.Expr.dt.strftime", false]], "strftime() (polars.series.dt method)": [[1094, "polars.Series.dt.strftime", false]], "string (class in polars.datatypes)": [[86, "polars.datatypes.String", false]], "string() (in module polars.selectors)": [[965, "polars.selectors.string", false]], "stringcache (class in polars)": [[55, "polars.StringCache", false]], "stringcachemismatcherror": [[124, "polars.exceptions.StringCacheMismatchError", false]], "strip_chars() (polars.expr.str method)": [[721, "polars.Expr.str.strip_chars", false]], "strip_chars() (polars.series.str method)": [[1307, "polars.Series.str.strip_chars", false]], "strip_chars_end() (polars.expr.str method)": [[722, "polars.Expr.str.strip_chars_end", false]], "strip_chars_end() (polars.series.str method)": [[1308, "polars.Series.str.strip_chars_end", false]], "strip_chars_start() (polars.expr.str method)": [[723, "polars.Expr.str.strip_chars_start", false]], "strip_chars_start() (polars.series.str method)": [[1309, "polars.Series.str.strip_chars_start", false]], "strip_prefix() (polars.expr.str method)": [[724, "polars.Expr.str.strip_prefix", false]], "strip_prefix() (polars.series.str method)": [[1310, "polars.Series.str.strip_prefix", false]], "strip_suffix() (polars.expr.str method)": [[725, "polars.Expr.str.strip_suffix", false]], "strip_suffix() (polars.series.str method)": [[1311, "polars.Series.str.strip_suffix", false]], "strptime() (polars.expr.str method)": [[726, "polars.Expr.str.strptime", false]], "strptime() (polars.series.str method)": [[1312, "polars.Series.str.strptime", false]], "struct (class in polars.datatypes)": [[87, "polars.datatypes.Struct", false]], "struct() (in module polars)": [[825, "polars.struct", false]], "structfieldnotfounderror": [[125, "polars.exceptions.StructFieldNotFoundError", false]], "style (polars.dataframe property)": [[354, "polars.DataFrame.style", false]], "sub() (polars.expr method)": [[742, "polars.Expr.sub", false]], "suffix() (polars.expr.name method)": [[619, "polars.Expr.name.suffix", false]], "suffix_fields() (polars.expr.name method)": [[620, "polars.Expr.name.suffix_fields", false]], "sum() (in module polars)": [[826, "polars.sum", false]], "sum() (polars.dataframe method)": [[299, "polars.DataFrame.sum", false]], "sum() (polars.dataframe.group_by.groupby method)": [[343, "polars.dataframe.group_by.GroupBy.sum", false]], "sum() (polars.expr method)": [[743, "polars.Expr.sum", false]], "sum() (polars.expr.arr method)": [[397, "polars.Expr.arr.sum", false]], "sum() (polars.expr.list method)": [[578, "polars.Expr.list.sum", false]], "sum() (polars.lazyframe method)": [[920, "polars.LazyFrame.sum", false]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[949, "polars.lazyframe.group_by.LazyGroupBy.sum", false]], "sum() (polars.series method)": [[1329, "polars.Series.sum", false]], "sum() (polars.series.arr method)": [[1006, "polars.Series.arr.sum", false]], "sum() (polars.series.list method)": [[1199, "polars.Series.list.sum", false]], "sum_horizontal() (in module polars)": [[827, "polars.sum_horizontal", false]], "sum_horizontal() (polars.dataframe method)": [[300, "polars.DataFrame.sum_horizontal", false]], "tableinfo (class in polars.catalog.unity)": [[198, "polars.catalog.unity.TableInfo", false]], "tables() (polars.sqlcontext method)": [[1372, "polars.SQLContext.tables", false]], "tabletype (in module polars.catalog.unity)": [[200, "polars.catalog.unity.TableType", false]], "tail() (in module polars)": [[828, "polars.tail", false]], "tail() (polars.dataframe method)": [[301, "polars.DataFrame.tail", false]], "tail() (polars.dataframe.group_by.groupby method)": [[344, "polars.dataframe.group_by.GroupBy.tail", false]], "tail() (polars.expr method)": [[744, "polars.Expr.tail", false]], "tail() (polars.expr.list method)": [[579, "polars.Expr.list.tail", false]], "tail() (polars.expr.str method)": [[727, "polars.Expr.str.tail", false]], "tail() (polars.lazyframe method)": [[921, "polars.LazyFrame.tail", false]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[950, "polars.lazyframe.group_by.LazyGroupBy.tail", false]], "tail() (polars.series method)": [[1330, "polars.Series.tail", false]], "tail() (polars.series.list method)": [[1200, "polars.Series.list.tail", false]], "tail() (polars.series.str method)": [[1313, "polars.Series.str.tail", false]], "tan() (polars.expr method)": [[745, "polars.Expr.tan", false]], "tan() (polars.series method)": [[1331, "polars.Series.tan", false]], "tanh() (polars.expr method)": [[746, "polars.Expr.tanh", false]], "tanh() (polars.series method)": [[1332, "polars.Series.tanh", false]], "temporal() (in module polars.selectors)": [[965, "polars.selectors.temporal", false]], "thread_pool_size() (in module polars)": [[185, "polars.thread_pool_size", false]], "threadpool_size() (in module polars)": [[186, "polars.threadpool_size", false]], "time (class in polars.datatypes)": [[88, "polars.datatypes.Time", false]], "time() (in module polars)": [[829, "polars.time", false]], "time() (in module polars.selectors)": [[965, "polars.selectors.time", false]], "time() (polars.expr.dt method)": [[478, "polars.Expr.dt.time", false]], "time() (polars.series.dt method)": [[1095, "polars.Series.dt.time", false]], "time_range() (in module polars)": [[830, "polars.time_range", false]], "time_ranges() (in module polars)": [[831, "polars.time_ranges", false]], "timestamp() (polars.expr.dt method)": [[479, "polars.Expr.dt.timestamp", false]], "timestamp() (polars.series.dt method)": [[1096, "polars.Series.dt.timestamp", false]], "to_array() (polars.expr.list method)": [[580, "polars.Expr.list.to_array", false]], "to_array() (polars.series.list method)": [[1201, "polars.Series.list.to_array", false]], "to_arrow() (polars.dataframe method)": [[302, "polars.DataFrame.to_arrow", false]], "to_arrow() (polars.series method)": [[1333, "polars.Series.to_arrow", false]], "to_date() (polars.expr.str method)": [[728, "polars.Expr.str.to_date", false]], "to_date() (polars.series.str method)": [[1314, "polars.Series.str.to_date", false]], "to_datetime() (polars.expr.str method)": [[729, "polars.Expr.str.to_datetime", false]], "to_datetime() (polars.series.str method)": [[1315, "polars.Series.str.to_datetime", false]], "to_decimal() (polars.expr.str method)": [[730, "polars.Expr.str.to_decimal", false]], "to_decimal() (polars.series.str method)": [[1316, "polars.Series.str.to_decimal", false]], "to_dict() (polars.dataframe method)": [[303, "polars.DataFrame.to_dict", false]], "to_dicts() (polars.dataframe method)": [[304, "polars.DataFrame.to_dicts", false]], "to_dummies() (polars.dataframe method)": [[305, "polars.DataFrame.to_dummies", false]], "to_dummies() (polars.series method)": [[1334, "polars.Series.to_dummies", false]], "to_frame() (polars.series method)": [[1335, "polars.Series.to_frame", false]], "to_init_repr() (polars.dataframe method)": [[306, "polars.DataFrame.to_init_repr", false]], "to_init_repr() (polars.series method)": [[1336, "polars.Series.to_init_repr", false]], "to_integer() (polars.expr.str method)": [[731, "polars.Expr.str.to_integer", false]], "to_integer() (polars.series.str method)": [[1317, "polars.Series.str.to_integer", false]], "to_jax() (polars.dataframe method)": [[307, "polars.DataFrame.to_jax", false]], "to_jax() (polars.series method)": [[1337, "polars.Series.to_jax", false]], "to_list() (polars.expr.arr method)": [[398, "polars.Expr.arr.to_list", false]], "to_list() (polars.series method)": [[1338, "polars.Series.to_list", false]], "to_list() (polars.series.arr method)": [[1007, "polars.Series.arr.to_list", false]], "to_local() (polars.series.cat method)": [[1036, "polars.Series.cat.to_local", false]], "to_lowercase() (polars.expr.name method)": [[621, "polars.Expr.name.to_lowercase", false]], "to_lowercase() (polars.expr.str method)": [[732, "polars.Expr.str.to_lowercase", false]], "to_lowercase() (polars.series.str method)": [[1318, "polars.Series.str.to_lowercase", false]], "to_numpy() (polars.dataframe method)": [[308, "polars.DataFrame.to_numpy", false]], "to_numpy() (polars.series method)": [[1339, "polars.Series.to_numpy", false]], "to_pandas() (polars.dataframe method)": [[309, "polars.DataFrame.to_pandas", false]], "to_pandas() (polars.series method)": [[1340, "polars.Series.to_pandas", false]], "to_physical() (polars.expr method)": [[747, "polars.Expr.to_physical", false]], "to_physical() (polars.series method)": [[1341, "polars.Series.to_physical", false]], "to_series() (polars.dataframe method)": [[310, "polars.DataFrame.to_series", false]], "to_string() (polars.expr.dt method)": [[480, "polars.Expr.dt.to_string", false]], "to_string() (polars.series.dt method)": [[1097, "polars.Series.dt.to_string", false]], "to_struct() (polars.dataframe method)": [[311, "polars.DataFrame.to_struct", false]], "to_struct() (polars.expr.arr method)": [[399, "polars.Expr.arr.to_struct", false]], "to_struct() (polars.expr.list method)": [[581, "polars.Expr.list.to_struct", false]], "to_struct() (polars.series.arr method)": [[1008, "polars.Series.arr.to_struct", false]], "to_struct() (polars.series.list method)": [[1202, "polars.Series.list.to_struct", false]], "to_time() (polars.expr.str method)": [[733, "polars.Expr.str.to_time", false]], "to_time() (polars.series.str method)": [[1319, "polars.Series.str.to_time", false]], "to_titlecase() (polars.expr.str method)": [[734, "polars.Expr.str.to_titlecase", false]], "to_titlecase() (polars.series.str method)": [[1320, "polars.Series.str.to_titlecase", false]], "to_torch() (polars.dataframe method)": [[312, "polars.DataFrame.to_torch", false]], "to_torch() (polars.series method)": [[1342, "polars.Series.to_torch", false]], "to_uppercase() (polars.expr.name method)": [[622, "polars.Expr.name.to_uppercase", false]], "to_uppercase() (polars.expr.str method)": [[735, "polars.Expr.str.to_uppercase", false]], "to_uppercase() (polars.series.str method)": [[1321, "polars.Series.str.to_uppercase", false]], "toomanyrowsreturnederror": [[126, "polars.exceptions.TooManyRowsReturnedError", false]], "top_k() (polars.dataframe method)": [[313, "polars.DataFrame.top_k", false]], "top_k() (polars.expr method)": [[748, "polars.Expr.top_k", false]], "top_k() (polars.lazyframe method)": [[922, "polars.LazyFrame.top_k", false]], "top_k() (polars.series method)": [[1343, "polars.Series.top_k", false]], "top_k_by() (polars.expr method)": [[749, "polars.Expr.top_k_by", false]], "total_days() (polars.expr.dt method)": [[481, "polars.Expr.dt.total_days", false]], "total_days() (polars.series.dt method)": [[1098, "polars.Series.dt.total_days", false]], "total_hours() (polars.expr.dt method)": [[482, "polars.Expr.dt.total_hours", false]], "total_hours() (polars.series.dt method)": [[1099, "polars.Series.dt.total_hours", false]], "total_microseconds() (polars.expr.dt method)": [[483, "polars.Expr.dt.total_microseconds", false]], "total_microseconds() (polars.series.dt method)": [[1100, "polars.Series.dt.total_microseconds", false]], "total_milliseconds() (polars.expr.dt method)": [[484, "polars.Expr.dt.total_milliseconds", false]], "total_milliseconds() (polars.series.dt method)": [[1101, "polars.Series.dt.total_milliseconds", false]], "total_minutes() (polars.expr.dt method)": [[485, "polars.Expr.dt.total_minutes", false]], "total_minutes() (polars.series.dt method)": [[1102, "polars.Series.dt.total_minutes", false]], "total_nanoseconds() (polars.expr.dt method)": [[486, "polars.Expr.dt.total_nanoseconds", false]], "total_nanoseconds() (polars.series.dt method)": [[1103, "polars.Series.dt.total_nanoseconds", false]], "total_seconds() (polars.expr.dt method)": [[487, "polars.Expr.dt.total_seconds", false]], "total_seconds() (polars.series.dt method)": [[1104, "polars.Series.dt.total_seconds", false]], "transpose() (polars.dataframe method)": [[314, "polars.DataFrame.transpose", false]], "tree_format() (polars.expr.meta method)": [[606, "polars.Expr.meta.tree_format", false]], "truediv() (polars.expr method)": [[750, "polars.Expr.truediv", false]], "truncate() (polars.expr.dt method)": [[488, "polars.Expr.dt.truncate", false]], "truncate() (polars.series.dt method)": [[1105, "polars.Series.dt.truncate", false]], "uint16 (class in polars.datatypes)": [[89, "polars.datatypes.UInt16", false]], "uint32 (class in polars.datatypes)": [[90, "polars.datatypes.UInt32", false]], "uint64 (class in polars.datatypes)": [[91, "polars.datatypes.UInt64", false]], "uint8 (class in polars.datatypes)": [[92, "polars.datatypes.UInt8", false]], "undo_aliases() (polars.expr.meta method)": [[607, "polars.Expr.meta.undo_aliases", false]], "unique() (polars.dataframe method)": [[315, "polars.DataFrame.unique", false]], "unique() (polars.expr method)": [[751, "polars.Expr.unique", false]], "unique() (polars.expr.arr method)": [[400, "polars.Expr.arr.unique", false]], "unique() (polars.expr.list method)": [[582, "polars.Expr.list.unique", false]], "unique() (polars.lazyframe method)": [[923, "polars.LazyFrame.unique", false]], "unique() (polars.series method)": [[1344, "polars.Series.unique", false]], "unique() (polars.series.arr method)": [[1009, "polars.Series.arr.unique", false]], "unique() (polars.series.list method)": [[1203, "polars.Series.list.unique", false]], "unique_counts() (polars.expr method)": [[752, "polars.Expr.unique_counts", false]], "unique_counts() (polars.series method)": [[1345, "polars.Series.unique_counts", false]], "unknown (class in polars.datatypes)": [[93, "polars.datatypes.Unknown", false]], "unnest() (polars.dataframe method)": [[316, "polars.DataFrame.unnest", false]], "unnest() (polars.expr.struct method)": [[740, "polars.Expr.struct.unnest", false]], "unnest() (polars.lazyframe method)": [[924, "polars.LazyFrame.unnest", false]], "unnest() (polars.series.struct method)": [[1328, "polars.Series.struct.unnest", false]], "unpivot() (polars.dataframe method)": [[317, "polars.DataFrame.unpivot", false]], "unpivot() (polars.lazyframe method)": [[925, "polars.LazyFrame.unpivot", false]], "unregister() (polars.sqlcontext method)": [[1373, "polars.SQLContext.unregister", false]], "unsigned_integer() (in module polars.selectors)": [[965, "polars.selectors.unsigned_integer", false]], "unstablewarning": [[127, "polars.exceptions.UnstableWarning", false]], "unstack() (polars.dataframe method)": [[318, "polars.DataFrame.unstack", false]], "unsuitablesqlerror": [[128, "polars.exceptions.UnsuitableSQLError", false]], "update() (polars.dataframe method)": [[319, "polars.DataFrame.update", false]], "update() (polars.lazyframe method)": [[926, "polars.LazyFrame.update", false]], "upper_bound() (polars.expr method)": [[753, "polars.Expr.upper_bound", false]], "upper_bound() (polars.series method)": [[1346, "polars.Series.upper_bound", false]], "upsample() (polars.dataframe method)": [[320, "polars.DataFrame.upsample", false]], "uses_lexical_ordering() (polars.series.cat method)": [[1037, "polars.Series.cat.uses_lexical_ordering", false]], "using_string_cache() (in module polars)": [[187, "polars.using_string_cache", false]], "utf8 (in module polars.datatypes)": [[94, "polars.datatypes.Utf8", false]], "value_counts() (polars.expr method)": [[754, "polars.Expr.value_counts", false]], "value_counts() (polars.series method)": [[1347, "polars.Series.value_counts", false]], "var() (in module polars)": [[832, "polars.var", false]], "var() (polars.dataframe method)": [[321, "polars.DataFrame.var", false]], "var() (polars.expr method)": [[755, "polars.Expr.var", false]], "var() (polars.expr.arr method)": [[401, "polars.Expr.arr.var", false]], "var() (polars.expr.list method)": [[583, "polars.Expr.list.var", false]], "var() (polars.lazyframe method)": [[927, "polars.LazyFrame.var", false]], "var() (polars.series method)": [[1348, "polars.Series.var", false]], "var() (polars.series.arr method)": [[1010, "polars.Series.arr.var", false]], "var() (polars.series.list method)": [[1204, "polars.Series.list.var", false]], "vstack() (polars.dataframe method)": [[322, "polars.DataFrame.vstack", false]], "week() (polars.expr.dt method)": [[489, "polars.Expr.dt.week", false]], "week() (polars.series.dt method)": [[1106, "polars.Series.dt.week", false]], "weekday() (polars.expr.dt method)": [[490, "polars.Expr.dt.weekday", false]], "weekday() (polars.series.dt method)": [[1107, "polars.Series.dt.weekday", false]], "when() (in module polars)": [[833, "polars.when", false]], "where() (polars.expr method)": [[756, "polars.Expr.where", false]], "width (polars.dataframe property)": [[323, "polars.DataFrame.width", false]], "width (polars.lazyframe property)": [[928, "polars.LazyFrame.width", false]], "with_columns() (polars.dataframe method)": [[324, "polars.DataFrame.with_columns", false]], "with_columns() (polars.lazyframe method)": [[929, "polars.LazyFrame.with_columns", false]], "with_columns_seq() (polars.dataframe method)": [[325, "polars.DataFrame.with_columns_seq", false]], "with_columns_seq() (polars.lazyframe method)": [[930, "polars.LazyFrame.with_columns_seq", false]], "with_context() (polars.lazyframe method)": [[931, "polars.LazyFrame.with_context", false]], "with_fields() (polars.expr.struct method)": [[741, "polars.Expr.struct.with_fields", false]], "with_row_count() (polars.dataframe method)": [[326, "polars.DataFrame.with_row_count", false]], "with_row_count() (polars.lazyframe method)": [[932, "polars.LazyFrame.with_row_count", false]], "with_row_index() (polars.dataframe method)": [[327, "polars.DataFrame.with_row_index", false]], "with_row_index() (polars.lazyframe method)": [[933, "polars.LazyFrame.with_row_index", false]], "with_time_unit() (polars.expr.dt method)": [[491, "polars.Expr.dt.with_time_unit", false]], "with_time_unit() (polars.series.dt method)": [[1108, "polars.Series.dt.with_time_unit", false]], "write_avro() (polars.dataframe method)": [[36, "polars.DataFrame.write_avro", false]], "write_clipboard() (polars.dataframe method)": [[37, "polars.DataFrame.write_clipboard", false]], "write_csv() (polars.dataframe method)": [[38, "polars.DataFrame.write_csv", false]], "write_database() (polars.dataframe method)": [[39, "polars.DataFrame.write_database", false]], "write_delta() (polars.dataframe method)": [[40, "polars.DataFrame.write_delta", false]], "write_excel() (polars.dataframe method)": [[41, "polars.DataFrame.write_excel", false]], "write_iceberg() (polars.dataframe method)": [[42, "polars.DataFrame.write_iceberg", false]], "write_ipc() (polars.dataframe method)": [[43, "polars.DataFrame.write_ipc", false]], "write_ipc_stream() (polars.dataframe method)": [[44, "polars.DataFrame.write_ipc_stream", false]], "write_json() (polars.dataframe method)": [[45, "polars.DataFrame.write_json", false]], "write_json() (polars.expr.meta method)": [[608, "polars.Expr.meta.write_json", false]], "write_ndjson() (polars.dataframe method)": [[46, "polars.DataFrame.write_ndjson", false]], "write_parquet() (polars.dataframe method)": [[47, "polars.DataFrame.write_parquet", false]], "xor() (polars.expr method)": [[757, "polars.Expr.xor", false]], "year() (polars.expr.dt method)": [[492, "polars.Expr.dt.year", false]], "year() (polars.series.dt method)": [[1109, "polars.Series.dt.year", false]], "zeros() (in module polars)": [[834, "polars.zeros", false]], "zfill() (polars.expr.str method)": [[736, "polars.Expr.str.zfill", false]], "zfill() (polars.series.str method)": [[1322, "polars.Series.str.zfill", false]], "zip_with() (polars.series method)": [[1349, "polars.Series.zip_with", false]]}, "objects": {"polars": [[188, 0, 1, "", "Catalog"], [32, 0, 1, "", "CredentialProvider"], [33, 0, 1, "", "CredentialProviderAWS"], [34, 0, 1, "", "CredentialProviderAzure"], [35, 0, 1, "", "CredentialProviderGCP"], [52, 0, 1, "", "PartitionByKey"], [53, 0, 1, "", "PartitionMaxSize"], [54, 0, 1, "", "PartitionParted"], [1386, 0, 1, "", "SQLContext"], [55, 0, 1, "", "StringCache"], [56, 4, 1, "", "align_frames"], [758, 4, 1, "", "all"], [759, 4, 1, "", "all_horizontal"], [760, 4, 1, "", "any"], [761, 4, 1, "", "any_horizontal"], [762, 4, 1, "", "approx_n_unique"], [763, 4, 1, "", "arange"], [764, 4, 1, "", "arctan2"], [765, 4, 1, "", "arctan2d"], [766, 4, 1, "", "arg_sort_by"], [767, 4, 1, "", "arg_where"], [61, 4, 1, "", "build_info"], [768, 4, 1, "", "business_day_count"], [769, 4, 1, "", "coalesce"], [62, 4, 1, "", "collect_all"], [63, 4, 1, "", "collect_all_async"], [64, 4, 1, "", "concat"], [770, 4, 1, "", "concat_arr"], [771, 4, 1, "", "concat_list"], [772, 4, 1, "", "concat_str"], [773, 4, 1, "", "corr"], [774, 4, 1, "", "count"], [775, 4, 1, "", "cov"], [776, 4, 1, "", "cum_count"], [777, 4, 1, "", "cum_fold"], [778, 4, 1, "", "cum_reduce"], [779, 4, 1, "", "cum_sum"], [780, 4, 1, "", "cum_sum_horizontal"], [781, 4, 1, "", "date"], [782, 4, 1, "", "date_range"], [783, 4, 1, "", "date_ranges"], [784, 4, 1, "", "datetime"], [785, 4, 1, "", "datetime_range"], [786, 4, 1, "", "datetime_ranges"], [95, 4, 1, "", "defer"], [96, 4, 1, "", "disable_string_cache"], [787, 4, 1, "", "duration"], [788, 4, 1, "", "element"], [97, 4, 1, "", "enable_string_cache"], [98, 4, 1, "", "escape_regex"], [789, 4, 1, "", "exclude"], [129, 4, 1, "", "explain_all"], [790, 4, 1, "", "first"], [791, 4, 1, "", "fold"], [792, 4, 1, "", "format"], [130, 4, 1, "", "from_arrow"], [131, 4, 1, "", "from_dataframe"], [132, 4, 1, "", "from_dict"], [133, 4, 1, "", "from_dicts"], [793, 4, 1, "", "from_epoch"], [134, 4, 1, "", "from_numpy"], [135, 4, 1, "", "from_pandas"], [136, 4, 1, "", "from_records"], [137, 4, 1, "", "from_repr"], [138, 4, 1, "", "get_index_type"], [794, 4, 1, "", "groups"], [795, 4, 1, "", "head"], [796, 4, 1, "", "implode"], [797, 4, 1, "", "int_range"], [798, 4, 1, "", "int_ranges"], [144, 4, 1, "", "json_normalize"], [799, 4, 1, "", "last"], [800, 4, 1, "", "len"], [801, 4, 1, "", "linear_space"], [802, 4, 1, "", "linear_spaces"], [803, 4, 1, "", "lit"], [804, 4, 1, "", "map_batches"], [805, 4, 1, "", "map_groups"], [806, 4, 1, "", "max"], [807, 4, 1, "", "max_horizontal"], [808, 4, 1, "", "mean"], [809, 4, 1, "", "mean_horizontal"], [810, 4, 1, "", "median"], [811, 4, 1, "", "min"], [812, 4, 1, "", "min_horizontal"], [813, 4, 1, "", "n_unique"], [814, 4, 1, "", "nth"], [815, 4, 1, "", "ones"], [816, 4, 1, "", "quantile"], [146, 4, 1, "", "read_avro"], [147, 4, 1, "", "read_clipboard"], [148, 4, 1, "", "read_csv"], [149, 4, 1, "", "read_csv_batched"], [150, 4, 1, "", "read_database"], [151, 4, 1, "", "read_database_uri"], [152, 4, 1, "", "read_delta"], [153, 4, 1, "", "read_excel"], [154, 4, 1, "", "read_ipc"], [155, 4, 1, "", "read_ipc_schema"], [156, 4, 1, "", "read_ipc_stream"], [157, 4, 1, "", "read_json"], [158, 4, 1, "", "read_ndjson"], [159, 4, 1, "", "read_ods"], [160, 4, 1, "", "read_parquet"], [161, 4, 1, "", "read_parquet_metadata"], [162, 4, 1, "", "read_parquet_schema"], [817, 4, 1, "", "reduce"], [818, 4, 1, "", "repeat"], [819, 4, 1, "", "rolling_corr"], [820, 4, 1, "", "rolling_cov"], [163, 4, 1, "", "scan_csv"], [164, 4, 1, "", "scan_delta"], [165, 4, 1, "", "scan_iceberg"], [166, 4, 1, "", "scan_ipc"], [167, 4, 1, "", "scan_ndjson"], [168, 4, 1, "", "scan_parquet"], [169, 4, 1, "", "scan_pyarrow_dataset"], [821, 4, 1, "", "select"], [965, 7, 0, "-", "selectors"], [170, 4, 1, "", "set_random_seed"], [171, 4, 1, "", "show_versions"], [822, 4, 1, "", "sql"], [823, 4, 1, "", "sql_expr"], [824, 4, 1, "", "std"], [825, 4, 1, "", "struct"], [826, 4, 1, "", "sum"], [827, 4, 1, "", "sum_horizontal"], [828, 4, 1, "", "tail"], [185, 4, 1, "", "thread_pool_size"], [186, 4, 1, "", "threadpool_size"], [829, 4, 1, "", "time"], [830, 4, 1, "", "time_range"], [831, 4, 1, "", "time_ranges"], [187, 4, 1, "", "using_string_cache"], [832, 4, 1, "", "var"], [833, 4, 1, "", "when"], [834, 4, 1, "", "zeros"]], "polars.Catalog": [[188, 1, 1, "", "__init__"], [189, 1, 1, "", "get_table_info"], [190, 1, 1, "", "list_catalogs"], [191, 1, 1, "", "list_namespaces"], [192, 1, 1, "", "list_tables"], [193, 1, 1, "", "scan_table"]], "polars.Config": [[2, 1, 1, "", "load"], [3, 1, 1, "", "load_from_file"], [4, 1, 1, "", "restore_defaults"], [5, 1, 1, "", "save"], [6, 1, 1, "", "save_to_file"], [7, 1, 1, "", "set_ascii_tables"], [8, 1, 1, "", "set_auto_structify"], [9, 1, 1, "", "set_decimal_separator"], [10, 1, 1, "", "set_engine_affinity"], [11, 1, 1, "", "set_float_precision"], [12, 1, 1, "", "set_fmt_float"], [13, 1, 1, "", "set_fmt_str_lengths"], [14, 1, 1, "", "set_fmt_table_cell_list_len"], [15, 1, 1, "", "set_streaming_chunk_size"], [16, 1, 1, "", "set_tbl_cell_alignment"], [17, 1, 1, "", "set_tbl_cell_numeric_alignment"], [18, 1, 1, "", "set_tbl_cols"], [19, 1, 1, "", "set_tbl_column_data_type_inline"], [20, 1, 1, "", "set_tbl_dataframe_shape_below"], [21, 1, 1, "", "set_tbl_formatting"], [22, 1, 1, "", "set_tbl_hide_column_data_types"], [23, 1, 1, "", "set_tbl_hide_column_names"], [24, 1, 1, "", "set_tbl_hide_dataframe_shape"], [25, 1, 1, "", "set_tbl_hide_dtype_separator"], [26, 1, 1, "", "set_tbl_rows"], [27, 1, 1, "", "set_tbl_width_chars"], [28, 1, 1, "", "set_thousands_separator"], [29, 1, 1, "", "set_trim_decimal_zeros"], [30, 1, 1, "", "set_verbose"], [31, 1, 1, "", "state"]], "polars.CredentialProvider": [[32, 1, 1, "", "__init__"]], "polars.CredentialProviderAWS": [[33, 1, 1, "", "__init__"]], "polars.CredentialProviderAzure": [[34, 1, 1, "", "__init__"]], "polars.CredentialProviderGCP": [[35, 1, 1, "", "__init__"]], "polars.DataFrame": [[205, 1, 1, "", "__array__"], [206, 1, 1, "", "__arrow_c_stream__"], [207, 1, 1, "", "__dataframe__"], [208, 1, 1, "", "__getitem__"], [209, 1, 1, "", "approx_n_unique"], [210, 1, 1, "", "bottom_k"], [211, 1, 1, "", "cast"], [212, 1, 1, "", "clear"], [213, 1, 1, "", "clone"], [214, 1, 1, "", "collect_schema"], [215, 2, 1, "", "columns"], [216, 1, 1, "", "corr"], [217, 1, 1, "", "count"], [218, 1, 1, "", "describe"], [219, 1, 1, "", "deserialize"], [220, 1, 1, "", "drop"], [221, 1, 1, "", "drop_in_place"], [222, 1, 1, "", "drop_nans"], [223, 1, 1, "", "drop_nulls"], [224, 2, 1, "", "dtypes"], [225, 1, 1, "", "equals"], [226, 1, 1, "", "estimated_size"], [227, 1, 1, "", "explode"], [228, 1, 1, "", "extend"], [229, 1, 1, "", "fill_nan"], [230, 1, 1, "", "fill_null"], [231, 1, 1, "", "filter"], [232, 2, 1, "", "flags"], [233, 1, 1, "", "fold"], [234, 1, 1, "", "gather_every"], [235, 1, 1, "", "get_column"], [236, 1, 1, "", "get_column_index"], [237, 1, 1, "", "get_columns"], [238, 1, 1, "", "glimpse"], [239, 1, 1, "", "group_by"], [240, 1, 1, "", "group_by_dynamic"], [241, 1, 1, "", "hash_rows"], [242, 1, 1, "", "head"], [243, 2, 1, "", "height"], [244, 1, 1, "", "hstack"], [245, 1, 1, "", "insert_column"], [246, 1, 1, "", "interpolate"], [247, 1, 1, "", "is_duplicated"], [248, 1, 1, "", "is_empty"], [249, 1, 1, "", "is_unique"], [250, 1, 1, "", "item"], [251, 1, 1, "", "iter_columns"], [252, 1, 1, "", "iter_rows"], [253, 1, 1, "", "iter_slices"], [254, 1, 1, "", "join"], [255, 1, 1, "", "join_asof"], [256, 1, 1, "", "join_where"], [257, 1, 1, "", "lazy"], [258, 1, 1, "", "limit"], [259, 1, 1, "", "map_rows"], [260, 1, 1, "", "max"], [261, 1, 1, "", "max_horizontal"], [262, 1, 1, "", "mean"], [263, 1, 1, "", "mean_horizontal"], [264, 1, 1, "", "median"], [265, 1, 1, "", "melt"], [266, 1, 1, "", "merge_sorted"], [267, 1, 1, "", "min"], [268, 1, 1, "", "min_horizontal"], [269, 1, 1, "", "n_chunks"], [270, 1, 1, "", "n_unique"], [271, 1, 1, "", "null_count"], [272, 1, 1, "", "partition_by"], [273, 1, 1, "", "pipe"], [274, 1, 1, "", "pivot"], [353, 2, 1, "", "plot"], [275, 1, 1, "", "product"], [276, 1, 1, "", "quantile"], [277, 1, 1, "", "rechunk"], [278, 1, 1, "", "remove"], [279, 1, 1, "", "rename"], [280, 1, 1, "", "replace_column"], [281, 1, 1, "", "reverse"], [282, 1, 1, "", "rolling"], [283, 1, 1, "", "row"], [284, 1, 1, "", "rows"], [285, 1, 1, "", "rows_by_key"], [286, 1, 1, "", "sample"], [287, 2, 1, "", "schema"], [288, 1, 1, "", "select"], [289, 1, 1, "", "select_seq"], [290, 1, 1, "", "serialize"], [291, 1, 1, "", "set_sorted"], [292, 2, 1, "", "shape"], [293, 1, 1, "", "shift"], [294, 1, 1, "", "shrink_to_fit"], [295, 1, 1, "", "slice"], [296, 1, 1, "", "sort"], [297, 1, 1, "", "sql"], [298, 1, 1, "", "std"], [354, 2, 1, "", "style"], [299, 1, 1, "", "sum"], [300, 1, 1, "", "sum_horizontal"], [301, 1, 1, "", "tail"], [302, 1, 1, "", "to_arrow"], [303, 1, 1, "", "to_dict"], [304, 1, 1, "", "to_dicts"], [305, 1, 1, "", "to_dummies"], [306, 1, 1, "", "to_init_repr"], [307, 1, 1, "", "to_jax"], [308, 1, 1, "", "to_numpy"], [309, 1, 1, "", "to_pandas"], [310, 1, 1, "", "to_series"], [311, 1, 1, "", "to_struct"], [312, 1, 1, "", "to_torch"], [313, 1, 1, "", "top_k"], [314, 1, 1, "", "transpose"], [315, 1, 1, "", "unique"], [316, 1, 1, "", "unnest"], [317, 1, 1, "", "unpivot"], [318, 1, 1, "", "unstack"], [319, 1, 1, "", "update"], [320, 1, 1, "", "upsample"], [321, 1, 1, "", "var"], [322, 1, 1, "", "vstack"], [323, 2, 1, "", "width"], [324, 1, 1, "", "with_columns"], [325, 1, 1, "", "with_columns_seq"], [326, 1, 1, "", "with_row_count"], [327, 1, 1, "", "with_row_index"], [36, 1, 1, "", "write_avro"], [37, 1, 1, "", "write_clipboard"], [38, 1, 1, "", "write_csv"], [39, 1, 1, "", "write_database"], [40, 1, 1, "", "write_delta"], [41, 1, 1, "", "write_excel"], [42, 1, 1, "", "write_iceberg"], [43, 1, 1, "", "write_ipc"], [44, 1, 1, "", "write_ipc_stream"], [45, 1, 1, "", "write_json"], [46, 1, 1, "", "write_ndjson"], [47, 1, 1, "", "write_parquet"]], "polars.Expr": [[358, 1, 1, "", "abs"], [359, 1, 1, "", "add"], [360, 1, 1, "", "agg_groups"], [361, 1, 1, "", "alias"], [362, 1, 1, "", "all"], [363, 1, 1, "", "and_"], [364, 1, 1, "", "any"], [365, 1, 1, "", "append"], [366, 1, 1, "", "approx_n_unique"], [367, 1, 1, "", "arccos"], [368, 1, 1, "", "arccosh"], [369, 1, 1, "", "arcsin"], [370, 1, 1, "", "arcsinh"], [371, 1, 1, "", "arctan"], [372, 1, 1, "", "arctanh"], [373, 1, 1, "", "arg_max"], [374, 1, 1, "", "arg_min"], [375, 1, 1, "", "arg_sort"], [376, 1, 1, "", "arg_true"], [377, 1, 1, "", "arg_unique"], [402, 1, 1, "", "backward_fill"], [410, 1, 1, "", "bitwise_and"], [411, 1, 1, "", "bitwise_count_ones"], [412, 1, 1, "", "bitwise_count_zeros"], [413, 1, 1, "", "bitwise_leading_ones"], [414, 1, 1, "", "bitwise_leading_zeros"], [415, 1, 1, "", "bitwise_or"], [416, 1, 1, "", "bitwise_trailing_ones"], [417, 1, 1, "", "bitwise_trailing_zeros"], [418, 1, 1, "", "bitwise_xor"], [419, 1, 1, "", "bottom_k"], [420, 1, 1, "", "bottom_k_by"], [421, 1, 1, "", "cast"], [427, 1, 1, "", "cbrt"], [428, 1, 1, "", "ceil"], [429, 1, 1, "", "clip"], [430, 1, 1, "", "cos"], [431, 1, 1, "", "cosh"], [432, 1, 1, "", "cot"], [433, 1, 1, "", "count"], [434, 1, 1, "", "cum_count"], [435, 1, 1, "", "cum_max"], [436, 1, 1, "", "cum_min"], [437, 1, 1, "", "cum_prod"], [438, 1, 1, "", "cum_sum"], [439, 1, 1, "", "cumulative_eval"], [440, 1, 1, "", "cut"], [441, 1, 1, "", "degrees"], [442, 1, 1, "", "deserialize"], [443, 1, 1, "", "diff"], [444, 1, 1, "", "dot"], [445, 1, 1, "", "drop_nans"], [446, 1, 1, "", "drop_nulls"], [493, 1, 1, "", "entropy"], [494, 1, 1, "", "eq"], [495, 1, 1, "", "eq_missing"], [496, 1, 1, "", "ewm_mean"], [497, 1, 1, "", "ewm_mean_by"], [498, 1, 1, "", "ewm_std"], [499, 1, 1, "", "ewm_var"], [500, 1, 1, "", "exclude"], [501, 1, 1, "", "exp"], [502, 1, 1, "", "explode"], [503, 1, 1, "", "extend_constant"], [504, 1, 1, "", "fill_nan"], [505, 1, 1, "", "fill_null"], [506, 1, 1, "", "filter"], [507, 1, 1, "", "first"], [508, 1, 1, "", "flatten"], [509, 1, 1, "", "floor"], [510, 1, 1, "", "floordiv"], [511, 1, 1, "", "forward_fill"], [512, 1, 1, "", "from_json"], [513, 1, 1, "", "gather"], [514, 1, 1, "", "gather_every"], [515, 1, 1, "", "ge"], [516, 1, 1, "", "get"], [517, 1, 1, "", "gt"], [518, 1, 1, "", "has_nulls"], [519, 1, 1, "", "hash"], [520, 1, 1, "", "head"], [521, 1, 1, "", "hist"], [522, 1, 1, "", "implode"], [523, 1, 1, "", "index_of"], [524, 1, 1, "", "inspect"], [525, 1, 1, "", "interpolate"], [526, 1, 1, "", "interpolate_by"], [527, 1, 1, "", "is_between"], [528, 1, 1, "", "is_duplicated"], [529, 1, 1, "", "is_finite"], [530, 1, 1, "", "is_first_distinct"], [531, 1, 1, "", "is_in"], [532, 1, 1, "", "is_infinite"], [533, 1, 1, "", "is_last_distinct"], [534, 1, 1, "", "is_nan"], [535, 1, 1, "", "is_not_nan"], [536, 1, 1, "", "is_not_null"], [537, 1, 1, "", "is_null"], [538, 1, 1, "", "is_unique"], [539, 1, 1, "", "kurtosis"], [540, 1, 1, "", "last"], [541, 1, 1, "", "le"], [542, 1, 1, "", "len"], [543, 1, 1, "", "limit"], [584, 1, 1, "", "log"], [585, 1, 1, "", "log10"], [586, 1, 1, "", "log1p"], [587, 1, 1, "", "lower_bound"], [588, 1, 1, "", "lt"], [589, 1, 1, "", "map_batches"], [590, 1, 1, "", "map_elements"], [591, 1, 1, "", "max"], [592, 1, 1, "", "mean"], [593, 1, 1, "", "median"], [609, 1, 1, "", "min"], [610, 1, 1, "", "mod"], [611, 1, 1, "", "mode"], [612, 1, 1, "", "mul"], [613, 1, 1, "", "n_unique"], [623, 1, 1, "", "nan_max"], [624, 1, 1, "", "nan_min"], [625, 1, 1, "", "ne"], [626, 1, 1, "", "ne_missing"], [627, 1, 1, "", "neg"], [628, 1, 1, "", "not_"], [629, 1, 1, "", "null_count"], [630, 1, 1, "", "or_"], [631, 1, 1, "", "over"], [632, 1, 1, "", "pct_change"], [633, 1, 1, "", "peak_max"], [634, 1, 1, "", "peak_min"], [635, 1, 1, "", "pipe"], [636, 1, 1, "", "pow"], [637, 1, 1, "", "product"], [638, 1, 1, "", "qcut"], [639, 1, 1, "", "quantile"], [640, 1, 1, "", "radians"], [641, 1, 1, "", "rank"], [642, 1, 1, "", "rechunk"], [643, 1, 1, "", "reinterpret"], [644, 1, 1, "", "repeat_by"], [645, 1, 1, "", "replace"], [646, 1, 1, "", "replace_strict"], [647, 1, 1, "", "reshape"], [648, 1, 1, "", "reverse"], [649, 1, 1, "", "rle"], [650, 1, 1, "", "rle_id"], [651, 1, 1, "", "rolling"], [652, 1, 1, "", "rolling_kurtosis"], [653, 1, 1, "", "rolling_map"], [654, 1, 1, "", "rolling_max"], [655, 1, 1, "", "rolling_max_by"], [656, 1, 1, "", "rolling_mean"], [657, 1, 1, "", "rolling_mean_by"], [658, 1, 1, "", "rolling_median"], [659, 1, 1, "", "rolling_median_by"], [660, 1, 1, "", "rolling_min"], [661, 1, 1, "", "rolling_min_by"], [662, 1, 1, "", "rolling_quantile"], [663, 1, 1, "", "rolling_quantile_by"], [664, 1, 1, "", "rolling_skew"], [665, 1, 1, "", "rolling_std"], [666, 1, 1, "", "rolling_std_by"], [667, 1, 1, "", "rolling_sum"], [668, 1, 1, "", "rolling_sum_by"], [669, 1, 1, "", "rolling_var"], [670, 1, 1, "", "rolling_var_by"], [671, 1, 1, "", "round"], [672, 1, 1, "", "round_sig_figs"], [673, 1, 1, "", "sample"], [674, 1, 1, "", "search_sorted"], [675, 1, 1, "", "set_sorted"], [676, 1, 1, "", "shift"], [677, 1, 1, "", "shrink_dtype"], [678, 1, 1, "", "shuffle"], [679, 1, 1, "", "sign"], [680, 1, 1, "", "sin"], [681, 1, 1, "", "sinh"], [682, 1, 1, "", "skew"], [683, 1, 1, "", "slice"], [684, 1, 1, "", "sort"], [685, 1, 1, "", "sort_by"], [686, 1, 1, "", "sqrt"], [687, 1, 1, "", "std"], [742, 1, 1, "", "sub"], [743, 1, 1, "", "sum"], [744, 1, 1, "", "tail"], [745, 1, 1, "", "tan"], [746, 1, 1, "", "tanh"], [747, 1, 1, "", "to_physical"], [748, 1, 1, "", "top_k"], [749, 1, 1, "", "top_k_by"], [750, 1, 1, "", "truediv"], [751, 1, 1, "", "unique"], [752, 1, 1, "", "unique_counts"], [753, 1, 1, "", "upper_bound"], [754, 1, 1, "", "value_counts"], [755, 1, 1, "", "var"], [756, 1, 1, "", "where"], [757, 1, 1, "", "xor"]], "polars.Expr.arr": [[378, 1, 1, "", "all"], [379, 1, 1, "", "any"], [380, 1, 1, "", "arg_max"], [381, 1, 1, "", "arg_min"], [382, 1, 1, "", "contains"], [383, 1, 1, "", "count_matches"], [384, 1, 1, "", "explode"], [385, 1, 1, "", "first"], [386, 1, 1, "", "get"], [387, 1, 1, "", "join"], [388, 1, 1, "", "last"], [389, 1, 1, "", "max"], [390, 1, 1, "", "median"], [391, 1, 1, "", "min"], [392, 1, 1, "", "n_unique"], [393, 1, 1, "", "reverse"], [394, 1, 1, "", "shift"], [395, 1, 1, "", "sort"], [396, 1, 1, "", "std"], [397, 1, 1, "", "sum"], [398, 1, 1, "", "to_list"], [399, 1, 1, "", "to_struct"], [400, 1, 1, "", "unique"], [401, 1, 1, "", "var"]], "polars.Expr.bin": [[403, 1, 1, "", "contains"], [404, 1, 1, "", "decode"], [405, 1, 1, "", "encode"], [406, 1, 1, "", "ends_with"], [407, 1, 1, "", "reinterpret"], [408, 1, 1, "", "size"], [409, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[422, 1, 1, "", "ends_with"], [423, 1, 1, "", "get_categories"], [424, 1, 1, "", "len_bytes"], [425, 1, 1, "", "len_chars"], [426, 1, 1, "", "starts_with"]], "polars.Expr.dt": [[447, 1, 1, "", "add_business_days"], [448, 1, 1, "", "base_utc_offset"], [449, 1, 1, "", "cast_time_unit"], [450, 1, 1, "", "century"], [451, 1, 1, "", "combine"], [452, 1, 1, "", "convert_time_zone"], [453, 1, 1, "", "date"], [454, 1, 1, "", "datetime"], [455, 1, 1, "", "day"], [456, 1, 1, "", "dst_offset"], [457, 1, 1, "", "epoch"], [458, 1, 1, "", "hour"], [459, 1, 1, "", "is_business_day"], [460, 1, 1, "", "is_leap_year"], [461, 1, 1, "", "iso_year"], [462, 1, 1, "", "microsecond"], [463, 1, 1, "", "millennium"], [464, 1, 1, "", "millisecond"], [465, 1, 1, "", "minute"], [466, 1, 1, "", "month"], [467, 1, 1, "", "month_end"], [468, 1, 1, "", "month_start"], [469, 1, 1, "", "nanosecond"], [470, 1, 1, "", "offset_by"], [471, 1, 1, "", "ordinal_day"], [472, 1, 1, "", "quarter"], [473, 1, 1, "", "replace"], [474, 1, 1, "", "replace_time_zone"], [475, 1, 1, "", "round"], [476, 1, 1, "", "second"], [477, 1, 1, "", "strftime"], [478, 1, 1, "", "time"], [479, 1, 1, "", "timestamp"], [480, 1, 1, "", "to_string"], [481, 1, 1, "", "total_days"], [482, 1, 1, "", "total_hours"], [483, 1, 1, "", "total_microseconds"], [484, 1, 1, "", "total_milliseconds"], [485, 1, 1, "", "total_minutes"], [486, 1, 1, "", "total_nanoseconds"], [487, 1, 1, "", "total_seconds"], [488, 1, 1, "", "truncate"], [489, 1, 1, "", "week"], [490, 1, 1, "", "weekday"], [491, 1, 1, "", "with_time_unit"], [492, 1, 1, "", "year"]], "polars.Expr.list": [[544, 1, 1, "", "all"], [545, 1, 1, "", "any"], [546, 1, 1, "", "arg_max"], [547, 1, 1, "", "arg_min"], [548, 1, 1, "", "concat"], [549, 1, 1, "", "contains"], [550, 1, 1, "", "count_matches"], [551, 1, 1, "", "diff"], [552, 1, 1, "", "drop_nulls"], [553, 1, 1, "", "eval"], [554, 1, 1, "", "explode"], [555, 1, 1, "", "first"], [556, 1, 1, "", "gather"], [557, 1, 1, "", "gather_every"], [558, 1, 1, "", "get"], [559, 1, 1, "", "head"], [560, 1, 1, "", "join"], [561, 1, 1, "", "last"], [562, 1, 1, "", "len"], [563, 1, 1, "", "max"], [564, 1, 1, "", "mean"], [565, 1, 1, "", "median"], [566, 1, 1, "", "min"], [567, 1, 1, "", "n_unique"], [568, 1, 1, "", "reverse"], [569, 1, 1, "", "sample"], [570, 1, 1, "", "set_difference"], [571, 1, 1, "", "set_intersection"], [572, 1, 1, "", "set_symmetric_difference"], [573, 1, 1, "", "set_union"], [574, 1, 1, "", "shift"], [575, 1, 1, "", "slice"], [576, 1, 1, "", "sort"], [577, 1, 1, "", "std"], [578, 1, 1, "", "sum"], [579, 1, 1, "", "tail"], [580, 1, 1, "", "to_array"], [581, 1, 1, "", "to_struct"], [582, 1, 1, "", "unique"], [583, 1, 1, "", "var"]], "polars.Expr.meta": [[594, 1, 1, "", "eq"], [595, 1, 1, "", "has_multiple_outputs"], [596, 1, 1, "", "is_column"], [597, 1, 1, "", "is_column_selection"], [598, 1, 1, "", "is_literal"], [599, 1, 1, "", "is_regex_projection"], [600, 1, 1, "", "ne"], [601, 1, 1, "", "output_name"], [602, 1, 1, "", "pop"], [603, 1, 1, "", "root_names"], [604, 1, 1, "", "serialize"], [605, 1, 1, "", "show_graph"], [606, 1, 1, "", "tree_format"], [607, 1, 1, "", "undo_aliases"], [608, 1, 1, "", "write_json"]], "polars.Expr.name": [[614, 1, 1, "", "keep"], [615, 1, 1, "", "map"], [616, 1, 1, "", "map_fields"], [617, 1, 1, "", "prefix"], [618, 1, 1, "", "prefix_fields"], [619, 1, 1, "", "suffix"], [620, 1, 1, "", "suffix_fields"], [621, 1, 1, "", "to_lowercase"], [622, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[688, 1, 1, "", "concat"], [689, 1, 1, "", "contains"], [690, 1, 1, "", "contains_any"], [691, 1, 1, "", "count_matches"], [692, 1, 1, "", "decode"], [693, 1, 1, "", "encode"], [694, 1, 1, "", "ends_with"], [695, 1, 1, "", "escape_regex"], [696, 1, 1, "", "explode"], [697, 1, 1, "", "extract"], [698, 1, 1, "", "extract_all"], [699, 1, 1, "", "extract_groups"], [700, 1, 1, "", "extract_many"], [701, 1, 1, "", "find"], [702, 1, 1, "", "find_many"], [703, 1, 1, "", "head"], [704, 1, 1, "", "join"], [705, 1, 1, "", "json_decode"], [706, 1, 1, "", "json_path_match"], [707, 1, 1, "", "len_bytes"], [708, 1, 1, "", "len_chars"], [709, 1, 1, "", "normalize"], [710, 1, 1, "", "pad_end"], [711, 1, 1, "", "pad_start"], [712, 1, 1, "", "replace"], [713, 1, 1, "", "replace_all"], [714, 1, 1, "", "replace_many"], [715, 1, 1, "", "reverse"], [716, 1, 1, "", "slice"], [717, 1, 1, "", "split"], [718, 1, 1, "", "split_exact"], [719, 1, 1, "", "splitn"], [720, 1, 1, "", "starts_with"], [721, 1, 1, "", "strip_chars"], [722, 1, 1, "", "strip_chars_end"], [723, 1, 1, "", "strip_chars_start"], [724, 1, 1, "", "strip_prefix"], [725, 1, 1, "", "strip_suffix"], [726, 1, 1, "", "strptime"], [727, 1, 1, "", "tail"], [728, 1, 1, "", "to_date"], [729, 1, 1, "", "to_datetime"], [730, 1, 1, "", "to_decimal"], [731, 1, 1, "", "to_integer"], [732, 1, 1, "", "to_lowercase"], [733, 1, 1, "", "to_time"], [734, 1, 1, "", "to_titlecase"], [735, 1, 1, "", "to_uppercase"], [736, 1, 1, "", "zfill"]], "polars.Expr.struct": [[737, 1, 1, "", "field"], [738, 1, 1, "", "json_encode"], [739, 1, 1, "", "rename_fields"], [740, 1, 1, "", "unnest"], [741, 1, 1, "", "with_fields"]], "polars.LazyFrame": [[858, 1, 1, "", "approx_n_unique"], [859, 1, 1, "", "bottom_k"], [860, 1, 1, "", "cache"], [861, 1, 1, "", "cast"], [862, 1, 1, "", "clear"], [863, 1, 1, "", "clone"], [864, 1, 1, "", "collect"], [865, 1, 1, "", "collect_async"], [866, 1, 1, "", "collect_schema"], [867, 2, 1, "", "columns"], [868, 1, 1, "", "count"], [869, 1, 1, "", "describe"], [870, 1, 1, "", "deserialize"], [871, 1, 1, "", "drop"], [872, 1, 1, "", "drop_nans"], [873, 1, 1, "", "drop_nulls"], [874, 2, 1, "", "dtypes"], [875, 1, 1, "", "explain"], [876, 1, 1, "", "explode"], [877, 1, 1, "", "fill_nan"], [878, 1, 1, "", "fill_null"], [879, 1, 1, "", "filter"], [880, 1, 1, "", "first"], [881, 1, 1, "", "gather_every"], [882, 1, 1, "", "group_by"], [883, 1, 1, "", "group_by_dynamic"], [884, 1, 1, "", "head"], [885, 1, 1, "", "inspect"], [886, 1, 1, "", "interpolate"], [887, 1, 1, "", "join"], [888, 1, 1, "", "join_asof"], [889, 1, 1, "", "join_where"], [890, 1, 1, "", "last"], [891, 1, 1, "", "lazy"], [892, 1, 1, "", "limit"], [893, 1, 1, "", "map_batches"], [894, 1, 1, "", "max"], [895, 1, 1, "", "mean"], [896, 1, 1, "", "median"], [897, 1, 1, "", "melt"], [898, 1, 1, "", "merge_sorted"], [899, 1, 1, "", "min"], [900, 1, 1, "", "null_count"], [901, 1, 1, "", "pipe"], [902, 1, 1, "", "profile"], [903, 1, 1, "", "quantile"], [904, 1, 1, "", "remote"], [905, 1, 1, "", "remove"], [906, 1, 1, "", "rename"], [907, 1, 1, "", "reverse"], [908, 1, 1, "", "rolling"], [909, 2, 1, "", "schema"], [910, 1, 1, "", "select"], [911, 1, 1, "", "select_seq"], [912, 1, 1, "", "serialize"], [913, 1, 1, "", "set_sorted"], [914, 1, 1, "", "shift"], [915, 1, 1, "", "show_graph"], [48, 1, 1, "", "sink_csv"], [49, 1, 1, "", "sink_ipc"], [50, 1, 1, "", "sink_ndjson"], [51, 1, 1, "", "sink_parquet"], [916, 1, 1, "", "slice"], [917, 1, 1, "", "sort"], [918, 1, 1, "", "sql"], [919, 1, 1, "", "std"], [920, 1, 1, "", "sum"], [921, 1, 1, "", "tail"], [922, 1, 1, "", "top_k"], [923, 1, 1, "", "unique"], [924, 1, 1, "", "unnest"], [925, 1, 1, "", "unpivot"], [926, 1, 1, "", "update"], [927, 1, 1, "", "var"], [928, 2, 1, "", "width"], [929, 1, 1, "", "with_columns"], [930, 1, 1, "", "with_columns_seq"], [931, 1, 1, "", "with_context"], [932, 1, 1, "", "with_row_count"], [933, 1, 1, "", "with_row_index"]], "polars.PartitionByKey": [[52, 1, 1, "", "__init__"]], "polars.PartitionMaxSize": [[53, 1, 1, "", "__init__"]], "polars.PartitionParted": [[54, 1, 1, "", "__init__"]], "polars.SQLContext": [[1386, 1, 1, "", "__enter__"], [1386, 1, 1, "", "__exit__"], [1386, 1, 1, "", "__init__"], [1367, 1, 1, "", "execute"], [1368, 1, 1, "", "execute_global"], [1369, 1, 1, "", "register"], [1370, 1, 1, "", "register_globals"], [1371, 1, 1, "", "register_many"], [1372, 1, 1, "", "tables"], [1373, 1, 1, "", "unregister"]], "polars.Series": [[967, 1, 1, "", "__array__"], [968, 1, 1, "", "__arrow_c_stream__"], [969, 1, 1, "", "__getitem__"], [970, 1, 1, "", "abs"], [971, 1, 1, "", "alias"], [972, 1, 1, "", "all"], [973, 1, 1, "", "any"], [974, 1, 1, "", "append"], [975, 1, 1, "", "approx_n_unique"], [976, 1, 1, "", "arccos"], [977, 1, 1, "", "arccosh"], [978, 1, 1, "", "arcsin"], [979, 1, 1, "", "arcsinh"], [980, 1, 1, "", "arctan"], [981, 1, 1, "", "arctanh"], [982, 1, 1, "", "arg_max"], [983, 1, 1, "", "arg_min"], [984, 1, 1, "", "arg_sort"], [985, 1, 1, "", "arg_true"], [986, 1, 1, "", "arg_unique"], [1011, 1, 1, "", "backward_fill"], [1019, 1, 1, "", "bitwise_and"], [1020, 1, 1, "", "bitwise_count_ones"], [1021, 1, 1, "", "bitwise_count_zeros"], [1022, 1, 1, "", "bitwise_leading_ones"], [1023, 1, 1, "", "bitwise_leading_zeros"], [1024, 1, 1, "", "bitwise_or"], [1025, 1, 1, "", "bitwise_trailing_ones"], [1026, 1, 1, "", "bitwise_trailing_zeros"], [1027, 1, 1, "", "bitwise_xor"], [1028, 1, 1, "", "bottom_k"], [1029, 1, 1, "", "cast"], [1038, 1, 1, "", "cbrt"], [1039, 1, 1, "", "ceil"], [1040, 1, 1, "", "chunk_lengths"], [1041, 1, 1, "", "clear"], [1042, 1, 1, "", "clip"], [1043, 1, 1, "", "clone"], [1044, 1, 1, "", "cos"], [1045, 1, 1, "", "cosh"], [1046, 1, 1, "", "cot"], [1047, 1, 1, "", "count"], [1048, 1, 1, "", "cum_count"], [1049, 1, 1, "", "cum_max"], [1050, 1, 1, "", "cum_min"], [1051, 1, 1, "", "cum_prod"], [1052, 1, 1, "", "cum_sum"], [1053, 1, 1, "", "cumulative_eval"], [1054, 1, 1, "", "cut"], [1055, 1, 1, "", "describe"], [1056, 1, 1, "", "diff"], [1057, 1, 1, "", "dot"], [1058, 1, 1, "", "drop_nans"], [1059, 1, 1, "", "drop_nulls"], [1110, 2, 1, "", "dtype"], [1111, 1, 1, "", "entropy"], [1112, 1, 1, "", "eq"], [1113, 1, 1, "", "eq_missing"], [1114, 1, 1, "", "equals"], [1115, 1, 1, "", "estimated_size"], [1116, 1, 1, "", "ewm_mean"], [1117, 1, 1, "", "ewm_mean_by"], [1118, 1, 1, "", "ewm_std"], [1119, 1, 1, "", "ewm_var"], [1120, 1, 1, "", "exp"], [1121, 1, 1, "", "explode"], [1122, 1, 1, "", "extend"], [1123, 1, 1, "", "extend_constant"], [1124, 1, 1, "", "fill_nan"], [1125, 1, 1, "", "fill_null"], [1126, 1, 1, "", "filter"], [1127, 1, 1, "", "first"], [1128, 2, 1, "", "flags"], [1129, 1, 1, "", "floor"], [1130, 1, 1, "", "forward_fill"], [1131, 1, 1, "", "gather"], [1132, 1, 1, "", "gather_every"], [1133, 1, 1, "", "ge"], [1134, 1, 1, "", "get_chunks"], [1135, 1, 1, "", "gt"], [1136, 1, 1, "", "has_nulls"], [1137, 1, 1, "", "has_validity"], [1138, 1, 1, "", "hash"], [1139, 1, 1, "", "head"], [1140, 1, 1, "", "hist"], [1141, 1, 1, "", "implode"], [1142, 1, 1, "", "index_of"], [1143, 1, 1, "", "interpolate"], [1144, 1, 1, "", "interpolate_by"], [1145, 1, 1, "", "is_between"], [1146, 1, 1, "", "is_duplicated"], [1147, 1, 1, "", "is_empty"], [1148, 1, 1, "", "is_finite"], [1149, 1, 1, "", "is_first_distinct"], [1150, 1, 1, "", "is_in"], [1151, 1, 1, "", "is_infinite"], [1152, 1, 1, "", "is_last_distinct"], [1153, 1, 1, "", "is_nan"], [1154, 1, 1, "", "is_not_nan"], [1155, 1, 1, "", "is_not_null"], [1156, 1, 1, "", "is_null"], [1157, 1, 1, "", "is_sorted"], [1158, 1, 1, "", "is_unique"], [1159, 1, 1, "", "item"], [1160, 1, 1, "", "kurtosis"], [1161, 1, 1, "", "last"], [1162, 1, 1, "", "le"], [1163, 1, 1, "", "len"], [1164, 1, 1, "", "limit"], [1205, 1, 1, "", "log"], [1206, 1, 1, "", "log10"], [1207, 1, 1, "", "log1p"], [1208, 1, 1, "", "lower_bound"], [1209, 1, 1, "", "lt"], [1210, 1, 1, "", "map_elements"], [1211, 1, 1, "", "max"], [1212, 1, 1, "", "mean"], [1213, 1, 1, "", "median"], [1214, 1, 1, "", "min"], [1215, 1, 1, "", "mode"], [1216, 1, 1, "", "n_chunks"], [1217, 1, 1, "", "n_unique"], [1218, 2, 1, "", "name"], [1219, 1, 1, "", "nan_max"], [1220, 1, 1, "", "nan_min"], [1221, 1, 1, "", "ne"], [1222, 1, 1, "", "ne_missing"], [1223, 1, 1, "", "new_from_index"], [1224, 1, 1, "", "not_"], [1225, 1, 1, "", "null_count"], [1226, 1, 1, "", "pct_change"], [1227, 1, 1, "", "peak_max"], [1228, 1, 1, "", "peak_min"], [1363, 2, 1, "", "plot"], [1229, 1, 1, "", "pow"], [1230, 1, 1, "", "product"], [1231, 1, 1, "", "qcut"], [1232, 1, 1, "", "quantile"], [1233, 1, 1, "", "rank"], [1234, 1, 1, "", "rechunk"], [1235, 1, 1, "", "reinterpret"], [1236, 1, 1, "", "rename"], [1237, 1, 1, "", "replace"], [1238, 1, 1, "", "replace_strict"], [1239, 1, 1, "", "reshape"], [1240, 1, 1, "", "reverse"], [1241, 1, 1, "", "rle"], [1242, 1, 1, "", "rle_id"], [1243, 1, 1, "", "rolling_kurtosis"], [1244, 1, 1, "", "rolling_map"], [1245, 1, 1, "", "rolling_max"], [1246, 1, 1, "", "rolling_mean"], [1247, 1, 1, "", "rolling_median"], [1248, 1, 1, "", "rolling_min"], [1249, 1, 1, "", "rolling_quantile"], [1250, 1, 1, "", "rolling_skew"], [1251, 1, 1, "", "rolling_std"], [1252, 1, 1, "", "rolling_sum"], [1253, 1, 1, "", "rolling_var"], [1254, 1, 1, "", "round"], [1255, 1, 1, "", "round_sig_figs"], [1256, 1, 1, "", "sample"], [1257, 1, 1, "", "scatter"], [1258, 1, 1, "", "search_sorted"], [1259, 1, 1, "", "set"], [1260, 1, 1, "", "set_sorted"], [1261, 2, 1, "", "shape"], [1262, 1, 1, "", "shift"], [1263, 1, 1, "", "shrink_dtype"], [1264, 1, 1, "", "shrink_to_fit"], [1265, 1, 1, "", "shuffle"], [1266, 1, 1, "", "sign"], [1267, 1, 1, "", "sin"], [1268, 1, 1, "", "sinh"], [1269, 1, 1, "", "skew"], [1270, 1, 1, "", "slice"], [1271, 1, 1, "", "sort"], [1272, 1, 1, "", "sqrt"], [1273, 1, 1, "", "std"], [1329, 1, 1, "", "sum"], [1330, 1, 1, "", "tail"], [1331, 1, 1, "", "tan"], [1332, 1, 1, "", "tanh"], [1333, 1, 1, "", "to_arrow"], [1334, 1, 1, "", "to_dummies"], [1335, 1, 1, "", "to_frame"], [1336, 1, 1, "", "to_init_repr"], [1337, 1, 1, "", "to_jax"], [1338, 1, 1, "", "to_list"], [1339, 1, 1, "", "to_numpy"], [1340, 1, 1, "", "to_pandas"], [1341, 1, 1, "", "to_physical"], [1342, 1, 1, "", "to_torch"], [1343, 1, 1, "", "top_k"], [1344, 1, 1, "", "unique"], [1345, 1, 1, "", "unique_counts"], [1346, 1, 1, "", "upper_bound"], [1347, 1, 1, "", "value_counts"], [1348, 1, 1, "", "var"], [1349, 1, 1, "", "zip_with"]], "polars.Series.arr": [[987, 1, 1, "", "all"], [988, 1, 1, "", "any"], [989, 1, 1, "", "arg_max"], [990, 1, 1, "", "arg_min"], [991, 1, 1, "", "contains"], [992, 1, 1, "", "count_matches"], [993, 1, 1, "", "explode"], [994, 1, 1, "", "first"], [995, 1, 1, "", "get"], [996, 1, 1, "", "join"], [997, 1, 1, "", "last"], [998, 1, 1, "", "max"], [999, 1, 1, "", "median"], [1000, 1, 1, "", "min"], [1001, 1, 1, "", "n_unique"], [1002, 1, 1, "", "reverse"], [1003, 1, 1, "", "shift"], [1004, 1, 1, "", "sort"], [1005, 1, 1, "", "std"], [1006, 1, 1, "", "sum"], [1007, 1, 1, "", "to_list"], [1008, 1, 1, "", "to_struct"], [1009, 1, 1, "", "unique"], [1010, 1, 1, "", "var"]], "polars.Series.bin": [[1012, 1, 1, "", "contains"], [1013, 1, 1, "", "decode"], [1014, 1, 1, "", "encode"], [1015, 1, 1, "", "ends_with"], [1016, 1, 1, "", "reinterpret"], [1017, 1, 1, "", "size"], [1018, 1, 1, "", "starts_with"]], "polars.Series.cat": [[1030, 1, 1, "", "ends_with"], [1031, 1, 1, "", "get_categories"], [1032, 1, 1, "", "is_local"], [1033, 1, 1, "", "len_bytes"], [1034, 1, 1, "", "len_chars"], [1035, 1, 1, "", "starts_with"], [1036, 1, 1, "", "to_local"], [1037, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[1060, 1, 1, "", "add_business_days"], [1061, 1, 1, "", "base_utc_offset"], [1062, 1, 1, "", "cast_time_unit"], [1063, 1, 1, "", "century"], [1064, 1, 1, "", "combine"], [1065, 1, 1, "", "convert_time_zone"], [1066, 1, 1, "", "date"], [1067, 1, 1, "", "datetime"], [1068, 1, 1, "", "day"], [1069, 1, 1, "", "dst_offset"], [1070, 1, 1, "", "epoch"], [1071, 1, 1, "", "hour"], [1072, 1, 1, "", "is_business_day"], [1073, 1, 1, "", "is_leap_year"], [1074, 1, 1, "", "iso_year"], [1075, 1, 1, "", "max"], [1076, 1, 1, "", "mean"], [1077, 1, 1, "", "median"], [1078, 1, 1, "", "microsecond"], [1079, 1, 1, "", "millennium"], [1080, 1, 1, "", "millisecond"], [1081, 1, 1, "", "min"], [1082, 1, 1, "", "minute"], [1083, 1, 1, "", "month"], [1084, 1, 1, "", "month_end"], [1085, 1, 1, "", "month_start"], [1086, 1, 1, "", "nanosecond"], [1087, 1, 1, "", "offset_by"], [1088, 1, 1, "", "ordinal_day"], [1089, 1, 1, "", "quarter"], [1090, 1, 1, "", "replace"], [1091, 1, 1, "", "replace_time_zone"], [1092, 1, 1, "", "round"], [1093, 1, 1, "", "second"], [1094, 1, 1, "", "strftime"], [1095, 1, 1, "", "time"], [1096, 1, 1, "", "timestamp"], [1097, 1, 1, "", "to_string"], [1098, 1, 1, "", "total_days"], [1099, 1, 1, "", "total_hours"], [1100, 1, 1, "", "total_microseconds"], [1101, 1, 1, "", "total_milliseconds"], [1102, 1, 1, "", "total_minutes"], [1103, 1, 1, "", "total_nanoseconds"], [1104, 1, 1, "", "total_seconds"], [1105, 1, 1, "", "truncate"], [1106, 1, 1, "", "week"], [1107, 1, 1, "", "weekday"], [1108, 1, 1, "", "with_time_unit"], [1109, 1, 1, "", "year"]], "polars.Series.list": [[1165, 1, 1, "", "all"], [1166, 1, 1, "", "any"], [1167, 1, 1, "", "arg_max"], [1168, 1, 1, "", "arg_min"], [1169, 1, 1, "", "concat"], [1170, 1, 1, "", "contains"], [1171, 1, 1, "", "count_matches"], [1172, 1, 1, "", "diff"], [1173, 1, 1, "", "drop_nulls"], [1174, 1, 1, "", "eval"], [1175, 1, 1, "", "explode"], [1176, 1, 1, "", "first"], [1177, 1, 1, "", "gather"], [1178, 1, 1, "", "gather_every"], [1179, 1, 1, "", "get"], [1180, 1, 1, "", "head"], [1181, 1, 1, "", "join"], [1182, 1, 1, "", "last"], [1183, 1, 1, "", "len"], [1184, 1, 1, "", "max"], [1185, 1, 1, "", "mean"], [1186, 1, 1, "", "median"], [1187, 1, 1, "", "min"], [1188, 1, 1, "", "n_unique"], [1189, 1, 1, "", "reverse"], [1190, 1, 1, "", "sample"], [1191, 1, 1, "", "set_difference"], [1192, 1, 1, "", "set_intersection"], [1193, 1, 1, "", "set_symmetric_difference"], [1194, 1, 1, "", "set_union"], [1195, 1, 1, "", "shift"], [1196, 1, 1, "", "slice"], [1197, 1, 1, "", "sort"], [1198, 1, 1, "", "std"], [1199, 1, 1, "", "sum"], [1200, 1, 1, "", "tail"], [1201, 1, 1, "", "to_array"], [1202, 1, 1, "", "to_struct"], [1203, 1, 1, "", "unique"], [1204, 1, 1, "", "var"]], "polars.Series.str": [[1274, 1, 1, "", "concat"], [1275, 1, 1, "", "contains"], [1276, 1, 1, "", "contains_any"], [1277, 1, 1, "", "count_matches"], [1278, 1, 1, "", "decode"], [1279, 1, 1, "", "encode"], [1280, 1, 1, "", "ends_with"], [1281, 1, 1, "", "escape_regex"], [1282, 1, 1, "", "explode"], [1283, 1, 1, "", "extract"], [1284, 1, 1, "", "extract_all"], [1285, 1, 1, "", "extract_groups"], [1286, 1, 1, "", "extract_many"], [1287, 1, 1, "", "find"], [1288, 1, 1, "", "find_many"], [1289, 1, 1, "", "head"], [1290, 1, 1, "", "join"], [1291, 1, 1, "", "json_decode"], [1292, 1, 1, "", "json_path_match"], [1293, 1, 1, "", "len_bytes"], [1294, 1, 1, "", "len_chars"], [1295, 1, 1, "", "normalize"], [1296, 1, 1, "", "pad_end"], [1297, 1, 1, "", "pad_start"], [1298, 1, 1, "", "replace"], [1299, 1, 1, "", "replace_all"], [1300, 1, 1, "", "replace_many"], [1301, 1, 1, "", "reverse"], [1302, 1, 1, "", "slice"], [1303, 1, 1, "", "split"], [1304, 1, 1, "", "split_exact"], [1305, 1, 1, "", "splitn"], [1306, 1, 1, "", "starts_with"], [1307, 1, 1, "", "strip_chars"], [1308, 1, 1, "", "strip_chars_end"], [1309, 1, 1, "", "strip_chars_start"], [1310, 1, 1, "", "strip_prefix"], [1311, 1, 1, "", "strip_suffix"], [1312, 1, 1, "", "strptime"], [1313, 1, 1, "", "tail"], [1314, 1, 1, "", "to_date"], [1315, 1, 1, "", "to_datetime"], [1316, 1, 1, "", "to_decimal"], [1317, 1, 1, "", "to_integer"], [1318, 1, 1, "", "to_lowercase"], [1319, 1, 1, "", "to_time"], [1320, 1, 1, "", "to_titlecase"], [1321, 1, 1, "", "to_uppercase"], [1322, 1, 1, "", "zfill"]], "polars.Series.struct": [[1323, 1, 1, "", "field"], [1324, 3, 1, "", "fields"], [1325, 1, 1, "", "json_encode"], [1326, 1, 1, "", "rename_fields"], [1327, 3, 1, "", "schema"], [1328, 1, 1, "", "unnest"]], "polars.StringCache": [[55, 1, 1, "", "__init__"]], "polars.api": [[57, 4, 1, "", "register_dataframe_namespace"], [58, 4, 1, "", "register_expr_namespace"], [59, 4, 1, "", "register_lazyframe_namespace"], [60, 4, 1, "", "register_series_namespace"]], "polars.catalog.unity": [[194, 0, 1, "", "CatalogInfo"], [195, 0, 1, "", "ColumnInfo"], [196, 5, 1, "", "DataSourceFormat"], [197, 0, 1, "", "NamespaceInfo"], [198, 0, 1, "", "TableInfo"], [200, 5, 1, "", "TableType"]], "polars.catalog.unity.CatalogInfo": [[194, 1, 1, "", "__init__"]], "polars.catalog.unity.ColumnInfo": [[195, 1, 1, "", "__init__"]], "polars.catalog.unity.NamespaceInfo": [[197, 1, 1, "", "__init__"]], "polars.catalog.unity.TableInfo": [[198, 1, 1, "", "__init__"], [199, 1, 1, "", "get_polars_schema"]], "polars.dataframe.group_by.GroupBy": [[328, 1, 1, "", "__iter__"], [329, 1, 1, "", "agg"], [330, 1, 1, "", "all"], [331, 1, 1, "", "count"], [332, 1, 1, "", "first"], [333, 1, 1, "", "head"], [334, 1, 1, "", "last"], [335, 1, 1, "", "len"], [336, 1, 1, "", "map_groups"], [337, 1, 1, "", "max"], [338, 1, 1, "", "mean"], [339, 1, 1, "", "median"], [340, 1, 1, "", "min"], [341, 1, 1, "", "n_unique"], [342, 1, 1, "", "quantile"], [343, 1, 1, "", "sum"], [344, 1, 1, "", "tail"]], "polars.datatypes": [[65, 0, 1, "", "Array"], [66, 0, 1, "", "Binary"], [67, 0, 1, "", "Boolean"], [68, 0, 1, "", "Categorical"], [69, 0, 1, "", "DataType"], [70, 0, 1, "", "Date"], [71, 0, 1, "", "Datetime"], [72, 0, 1, "", "Decimal"], [73, 0, 1, "", "Duration"], [74, 0, 1, "", "Enum"], [75, 0, 1, "", "Field"], [76, 0, 1, "", "Float32"], [77, 0, 1, "", "Float64"], [78, 0, 1, "", "Int128"], [79, 0, 1, "", "Int16"], [80, 0, 1, "", "Int32"], [81, 0, 1, "", "Int64"], [82, 0, 1, "", "Int8"], [83, 0, 1, "", "List"], [84, 0, 1, "", "Null"], [85, 0, 1, "", "Object"], [86, 0, 1, "", "String"], [87, 0, 1, "", "Struct"], [88, 0, 1, "", "Time"], [89, 0, 1, "", "UInt16"], [90, 0, 1, "", "UInt32"], [91, 0, 1, "", "UInt64"], [92, 0, 1, "", "UInt8"], [93, 0, 1, "", "Unknown"], [94, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[65, 1, 1, "", "__init__"]], "polars.datatypes.Binary": [[66, 1, 1, "", "__init__"]], "polars.datatypes.Boolean": [[67, 1, 1, "", "__init__"]], "polars.datatypes.Categorical": [[68, 1, 1, "", "__init__"]], "polars.datatypes.DataType": [[69, 1, 1, "", "__init__"]], "polars.datatypes.Date": [[70, 1, 1, "", "__init__"]], "polars.datatypes.Datetime": [[71, 1, 1, "", "__init__"]], "polars.datatypes.Decimal": [[72, 1, 1, "", "__init__"]], "polars.datatypes.Duration": [[73, 1, 1, "", "__init__"]], "polars.datatypes.Enum": [[74, 1, 1, "", "__init__"]], "polars.datatypes.Field": [[75, 1, 1, "", "__init__"]], "polars.datatypes.Float32": [[76, 1, 1, "", "__init__"]], "polars.datatypes.Float64": [[77, 1, 1, "", "__init__"]], "polars.datatypes.Int128": [[78, 1, 1, "", "__init__"]], "polars.datatypes.Int16": [[79, 1, 1, "", "__init__"]], "polars.datatypes.Int32": [[80, 1, 1, "", "__init__"]], "polars.datatypes.Int64": [[81, 1, 1, "", "__init__"]], "polars.datatypes.Int8": [[82, 1, 1, "", "__init__"]], "polars.datatypes.List": [[83, 1, 1, "", "__init__"]], "polars.datatypes.Null": [[84, 1, 1, "", "__init__"]], "polars.datatypes.Object": [[85, 1, 1, "", "__init__"]], "polars.datatypes.String": [[86, 1, 1, "", "__init__"]], "polars.datatypes.Struct": [[87, 1, 1, "", "__init__"]], "polars.datatypes.Time": [[88, 1, 1, "", "__init__"]], "polars.datatypes.UInt16": [[89, 1, 1, "", "__init__"]], "polars.datatypes.UInt32": [[90, 1, 1, "", "__init__"]], "polars.datatypes.UInt64": [[91, 1, 1, "", "__init__"]], "polars.datatypes.UInt8": [[92, 1, 1, "", "__init__"]], "polars.datatypes.Unknown": [[93, 1, 1, "", "__init__"]], "polars.exceptions": [[99, 6, 1, "", "CategoricalRemappingWarning"], [100, 6, 1, "", "ChronoFormatWarning"], [101, 6, 1, "", "ColumnNotFoundError"], [102, 6, 1, "", "ComputeError"], [103, 6, 1, "", "CustomUFuncWarning"], [104, 6, 1, "", "DataOrientationWarning"], [105, 6, 1, "", "DuplicateError"], [106, 6, 1, "", "InvalidOperationError"], [107, 6, 1, "", "MapWithoutReturnDtypeWarning"], [108, 6, 1, "", "ModuleUpgradeRequiredError"], [109, 6, 1, "", "NoDataError"], [110, 6, 1, "", "NoRowsReturnedError"], [111, 6, 1, "", "OutOfBoundsError"], [112, 6, 1, "", "PanicException"], [113, 6, 1, "", "ParameterCollisionError"], [114, 6, 1, "", "PerformanceWarning"], [115, 6, 1, "", "PolarsError"], [116, 6, 1, "", "PolarsInefficientMapWarning"], [117, 6, 1, "", "PolarsWarning"], [118, 6, 1, "", "RowsError"], [119, 6, 1, "", "SQLInterfaceError"], [120, 6, 1, "", "SQLSyntaxError"], [121, 6, 1, "", "SchemaError"], [122, 6, 1, "", "SchemaFieldNotFoundError"], [123, 6, 1, "", "ShapeError"], [124, 6, 1, "", "StringCacheMismatchError"], [125, 6, 1, "", "StructFieldNotFoundError"], [126, 6, 1, "", "TooManyRowsReturnedError"], [127, 6, 1, "", "UnstableWarning"], [128, 6, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[139, 1, 1, "", "next_batches"]], "polars.io.partition": [[140, 0, 1, "", "BasePartitionContext"], [141, 0, 1, "", "KeyedPartition"], [142, 0, 1, "", "KeyedPartitionContext"]], "polars.io.partition.BasePartitionContext": [[140, 1, 1, "", "__init__"]], "polars.io.partition.KeyedPartition": [[141, 1, 1, "", "__init__"]], "polars.io.partition.KeyedPartitionContext": [[142, 1, 1, "", "__init__"]], "polars.io.plugins": [[143, 4, 1, "", "register_io_source"]], "polars.lazyframe.engine_config": [[934, 0, 1, "", "GPUEngine"]], "polars.lazyframe.engine_config.GPUEngine": [[934, 1, 1, "", "__init__"]], "polars.lazyframe.group_by.LazyGroupBy": [[935, 1, 1, "", "agg"], [936, 1, 1, "", "all"], [937, 1, 1, "", "count"], [938, 1, 1, "", "first"], [939, 1, 1, "", "head"], [940, 1, 1, "", "last"], [941, 1, 1, "", "len"], [942, 1, 1, "", "map_groups"], [943, 1, 1, "", "max"], [944, 1, 1, "", "mean"], [945, 1, 1, "", "median"], [946, 1, 1, "", "min"], [947, 1, 1, "", "n_unique"], [948, 1, 1, "", "quantile"], [949, 1, 1, "", "sum"], [950, 1, 1, "", "tail"]], "polars.lazyframe.in_process.InProcessQuery": [[951, 1, 1, "", "cancel"], [952, 1, 1, "", "fetch"], [953, 1, 1, "", "fetch_blocking"]], "polars.plugins": [[145, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[965, 4, 1, "", "all"], [965, 4, 1, "", "alpha"], [965, 4, 1, "", "alphanumeric"], [965, 4, 1, "", "binary"], [965, 4, 1, "", "boolean"], [965, 4, 1, "", "by_dtype"], [965, 4, 1, "", "by_index"], [965, 4, 1, "", "by_name"], [965, 4, 1, "", "categorical"], [965, 4, 1, "", "contains"], [965, 4, 1, "", "date"], [965, 4, 1, "", "datetime"], [965, 4, 1, "", "decimal"], [965, 4, 1, "", "digit"], [965, 4, 1, "", "duration"], [965, 4, 1, "", "ends_with"], [965, 4, 1, "", "exclude"], [965, 4, 1, "", "expand_selector"], [965, 4, 1, "", "first"], [965, 4, 1, "", "float"], [965, 4, 1, "", "integer"], [965, 4, 1, "", "is_selector"], [965, 4, 1, "", "last"], [965, 4, 1, "", "matches"], [965, 4, 1, "", "numeric"], [965, 4, 1, "", "signed_integer"], [965, 4, 1, "", "starts_with"], [965, 4, 1, "", "string"], [965, 4, 1, "", "temporal"], [965, 4, 1, "", "time"], [965, 4, 1, "", "unsigned_integer"]], "polars.testing": [[172, 4, 1, "", "assert_frame_equal"], [173, 4, 1, "", "assert_frame_not_equal"], [174, 4, 1, "", "assert_series_equal"], [175, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[176, 0, 1, "", "column"], [177, 4, 1, "", "columns"], [178, 4, 1, "", "create_list_strategy"], [179, 4, 1, "", "dataframes"], [180, 4, 1, "", "dtypes"], [181, 4, 1, "", "lists"], [182, 4, 1, "", "load_profile"], [183, 4, 1, "", "series"], [184, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[176, 1, 1, "", "__init__"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "data", "Python data"], "6": ["py", "exception", "Python exception"], "7": ["py", "module", "Python module"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:data", "6": "py:exception", "7": "py:module"}, "terms": {"": [1, 12, 38, 39, 40, 41, 47, 48, 60, 65, 75, 87, 95, 98, 100, 106, 130, 137, 143, 148, 149, 150, 151, 153, 154, 158, 159, 160, 163, 164, 165, 166, 167, 168, 169, 183, 210, 211, 222, 223, 226, 231, 234, 239, 240, 245, 251, 254, 255, 265, 272, 274, 278, 280, 282, 285, 288, 289, 296, 305, 308, 313, 315, 316, 317, 318, 319, 324, 325, 350, 387, 420, 452, 457, 477, 480, 500, 506, 510, 523, 539, 560, 589, 590, 602, 611, 616, 623, 624, 631, 632, 643, 650, 652, 685, 689, 697, 698, 699, 701, 703, 712, 713, 716, 717, 719, 726, 727, 728, 729, 733, 737, 739, 741, 749, 758, 759, 760, 761, 766, 773, 776, 779, 780, 789, 790, 792, 793, 799, 804, 805, 806, 807, 809, 811, 812, 814, 821, 823, 825, 826, 827, 833, 839, 843, 859, 861, 872, 873, 882, 883, 887, 888, 897, 905, 910, 911, 917, 922, 923, 924, 925, 926, 929, 930, 942, 959, 964, 965, 969, 970, 971, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1065, 1068, 1069, 1070, 1072, 1073, 1075, 1076, 1077, 1079, 1080, 1081, 1084, 1085, 1088, 1090, 1092, 1093, 1094, 1097, 1105, 1107, 1108, 1109, 1110, 1115, 1116, 1118, 1119, 1120, 1121, 1123, 1124, 1125, 1126, 1128, 1129, 1131, 1132, 1134, 1136, 1138, 1139, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1275, 1276, 1277, 1278, 1279, 1280, 1282, 1283, 1284, 1285, 1286, 1287, 1289, 1290, 1291, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1325, 1326, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1358, 1363, 1367, 1371, 1374, 1381, 1382], "0": [1, 7, 9, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 39, 40, 41, 47, 51, 52, 56, 57, 58, 60, 64, 65, 72, 83, 95, 131, 137, 144, 148, 149, 150, 151, 153, 154, 156, 157, 158, 159, 160, 163, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 186, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 222, 224, 225, 229, 230, 231, 233, 234, 237, 238, 239, 240, 241, 245, 246, 250, 252, 253, 254, 257, 259, 261, 262, 263, 264, 265, 268, 269, 270, 271, 274, 275, 276, 278, 280, 282, 284, 285, 286, 287, 288, 295, 296, 297, 298, 300, 305, 306, 307, 308, 309, 310, 312, 313, 314, 318, 320, 321, 324, 326, 327, 329, 331, 332, 334, 336, 337, 338, 339, 340, 341, 342, 343, 350, 353, 354, 358, 360, 361, 363, 367, 368, 369, 370, 371, 372, 375, 376, 377, 380, 381, 383, 386, 396, 399, 401, 408, 410, 415, 418, 420, 421, 427, 428, 429, 430, 431, 432, 439, 440, 441, 445, 446, 447, 453, 454, 458, 462, 464, 465, 469, 473, 476, 478, 480, 483, 484, 486, 487, 491, 494, 495, 496, 497, 498, 499, 501, 503, 504, 505, 506, 509, 510, 512, 514, 515, 517, 519, 521, 525, 526, 529, 532, 534, 535, 536, 537, 539, 541, 546, 547, 550, 553, 556, 557, 558, 564, 565, 577, 581, 583, 584, 585, 586, 588, 589, 591, 592, 593, 597, 602, 605, 608, 609, 610, 612, 614, 623, 624, 625, 626, 627, 629, 630, 632, 635, 636, 638, 639, 640, 641, 645, 646, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 679, 680, 681, 682, 686, 687, 688, 691, 696, 697, 698, 701, 702, 730, 741, 742, 743, 745, 746, 747, 749, 750, 755, 756, 758, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 775, 777, 784, 788, 791, 797, 798, 800, 801, 802, 805, 808, 809, 810, 814, 816, 817, 819, 820, 821, 822, 829, 830, 831, 832, 833, 834, 839, 843, 858, 859, 861, 862, 863, 866, 868, 869, 871, 872, 874, 875, 877, 878, 879, 881, 882, 883, 886, 887, 891, 893, 896, 897, 900, 902, 903, 905, 908, 909, 910, 915, 917, 918, 919, 922, 927, 929, 931, 932, 933, 935, 937, 938, 940, 942, 943, 944, 945, 946, 947, 948, 949, 959, 964, 965, 969, 976, 977, 978, 979, 980, 981, 982, 984, 986, 989, 995, 1005, 1008, 1010, 1017, 1029, 1036, 1038, 1039, 1041, 1044, 1045, 1046, 1053, 1054, 1055, 1057, 1058, 1059, 1060, 1067, 1071, 1076, 1077, 1078, 1080, 1082, 1086, 1090, 1093, 1097, 1100, 1101, 1103, 1104, 1108, 1111, 1114, 1116, 1117, 1118, 1119, 1124, 1129, 1132, 1137, 1138, 1140, 1143, 1144, 1148, 1151, 1153, 1154, 1155, 1156, 1159, 1160, 1167, 1168, 1171, 1174, 1177, 1178, 1179, 1185, 1186, 1198, 1202, 1204, 1205, 1206, 1207, 1208, 1212, 1213, 1219, 1220, 1226, 1229, 1231, 1232, 1233, 1237, 1238, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1258, 1266, 1267, 1268, 1269, 1272, 1273, 1274, 1277, 1282, 1283, 1284, 1287, 1288, 1292, 1298, 1316, 1331, 1332, 1334, 1337, 1339, 1340, 1341, 1342, 1346, 1348, 1358, 1363, 1367, 1373, 1375, 1376, 1377, 1380, 1381, 1383, 1384, 1386, 1388, 1389], "00": [28, 41, 71, 211, 218, 240, 320, 350, 448, 449, 452, 456, 467, 468, 470, 474, 475, 477, 480, 481, 482, 483, 484, 485, 486, 487, 488, 491, 655, 657, 659, 661, 663, 666, 668, 670, 726, 729, 733, 784, 785, 786, 787, 801, 829, 830, 831, 843, 861, 869, 883, 959, 965, 1061, 1062, 1065, 1066, 1067, 1069, 1070, 1071, 1077, 1078, 1082, 1084, 1085, 1086, 1087, 1091, 1092, 1095, 1096, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1108, 1298, 1312, 1315, 1319, 1381], "000": [9, 11, 28, 41, 53, 350, 1298, 1389], "0000": [312, 350, 1342, 1358, 1389], "000000": [404, 405, 480, 692, 1013, 1014, 1278], "00000001": [12, 757, 843], "00000010": [757, 843], "00000011": [757, 843], "00000100": [757, 843], "00001000": [757, 843], "00001010": [757, 843], "00001011": [757, 843], "0000e": 12, "0000ff": [404, 405, 692, 1013, 1014, 1278], "0001": 480, "000100": 480, "000101": 480, "0005": 965, "00050": 965, "000800": 1097, "001": [58, 736, 787, 1100, 1101, 1103, 1322], "002": [787, 1100, 1101, 1103], "005": [1111, 1358], "00prefix": 965, "00z": [726, 729, 1312, 1315], "01": [29, 56, 70, 71, 179, 211, 218, 238, 240, 255, 282, 320, 350, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 497, 651, 655, 657, 659, 661, 663, 666, 668, 670, 726, 728, 729, 733, 768, 781, 782, 783, 784, 785, 786, 787, 801, 843, 861, 869, 883, 888, 908, 959, 965, 1060, 1062, 1064, 1065, 1066, 1067, 1070, 1071, 1077, 1078, 1082, 1084, 1085, 1086, 1087, 1090, 1091, 1092, 1094, 1095, 1096, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1108, 1312, 1314, 1315, 1319, 1381, 1384], "010": [9, 731, 1317], "01000": 29, "01000010": [757, 843], "01000110": [757, 843], "012": [672, 709, 843, 1255, 1295, 1358], "0123": [736, 1322], "01234": [672, 843, 1255, 1358], "012345": 1097, "015625": [1229, 1358], "01\u00b2": [709, 1295], "02": [56, 211, 218, 238, 240, 282, 320, 350, 447, 449, 451, 457, 467, 468, 470, 474, 479, 480, 482, 485, 487, 491, 651, 655, 657, 659, 661, 663, 666, 668, 670, 671, 726, 728, 729, 733, 768, 781, 782, 783, 784, 785, 786, 787, 801, 843, 861, 869, 883, 908, 959, 965, 1008, 1062, 1064, 1066, 1067, 1070, 1071, 1077, 1078, 1082, 1084, 1085, 1086, 1090, 1091, 1092, 1095, 1096, 1099, 1102, 1104, 1105, 1202, 1312, 1314, 1315, 1319, 1381, 1382], "03": [56, 137, 148, 211, 240, 255, 282, 320, 350, 449, 451, 452, 457, 459, 467, 468, 470, 473, 474, 475, 477, 479, 480, 481, 482, 485, 487, 488, 491, 497, 510, 651, 655, 657, 659, 661, 663, 666, 668, 670, 728, 733, 781, 782, 783, 784, 785, 786, 787, 843, 861, 883, 888, 908, 959, 965, 1062, 1064, 1065, 1070, 1071, 1077, 1078, 1084, 1085, 1086, 1091, 1092, 1094, 1096, 1098, 1099, 1102, 1104, 1314, 1319], "037037": [1229, 1358], "04": [169, 211, 218, 240, 320, 350, 451, 452, 467, 468, 473, 474, 475, 477, 481, 482, 485, 487, 491, 655, 657, 659, 661, 663, 666, 668, 670, 726, 768, 781, 784, 785, 787, 843, 861, 869, 883, 959, 965, 1065, 1078, 1082, 1084, 1085, 1086, 1091, 1094, 1098, 1099, 1102, 1104, 1108, 1312, 1381], "047198": 1383, "05": [17, 169, 172, 173, 174, 175, 179, 211, 218, 320, 350, 447, 450, 451, 452, 453, 454, 458, 459, 462, 463, 464, 465, 467, 468, 469, 474, 476, 477, 478, 480, 481, 768, 781, 782, 784, 785, 861, 869, 959, 965, 1064, 1065, 1066, 1067, 1091, 1092, 1094, 1095, 1097, 1098, 1105, 1381, 1382, 1384], "050545": 137, "0522623626787952": [1160, 1358], "0545": [1066, 1067, 1095], "05t10": 1097, "06": [179, 211, 320, 350, 447, 451, 466, 472, 474, 475, 476, 488, 489, 781, 784, 801, 861, 959, 965, 1060, 1091, 1092, 1097, 1105], "060": [453, 454, 458, 462, 464, 465, 469, 476, 478], "0601749420166": [226, 350], "06293300616044681": [1111, 1358], "07": [17, 148, 179, 218, 350, 447, 450, 451, 463, 474, 475, 480, 488, 726, 781, 782, 784, 785, 793, 869, 959, 965, 1060, 1064, 1091, 1097, 1312, 1381, 1384], "071068": [218, 350, 869, 959], "08": [148, 172, 173, 174, 175, 218, 255, 282, 297, 350, 447, 451, 467, 468, 475, 480, 651, 726, 785, 787, 801, 843, 869, 888, 908, 959, 965, 1060, 1092, 1105, 1312, 1381, 1382], "085537": [1120, 1358], "09": [56, 148, 218, 282, 350, 447, 451, 467, 468, 480, 631, 651, 730, 781, 782, 784, 831, 843, 869, 908, 959, 965, 1060, 1316], "090909": [632, 843], "094395": 1383, "098612": [586, 843, 1205, 1207, 1358, 1380], "0999": [450, 463], "0_": [41, 350], "0m": [456, 1069], "0x11bc0ad80": 964, "0\u00b5": 480, "1": [1, 7, 8, 9, 10, 12, 13, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 51, 52, 56, 57, 58, 59, 60, 64, 65, 83, 87, 95, 101, 104, 105, 106, 130, 131, 132, 133, 134, 135, 136, 137, 144, 148, 149, 152, 153, 154, 157, 158, 159, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 179, 183, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 350, 353, 354, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 380, 381, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 408, 410, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 598, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 694, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 712, 713, 714, 718, 719, 720, 721, 722, 723, 730, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 839, 843, 858, 859, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 959, 965, 969, 970, 971, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1017, 1028, 1029, 1033, 1034, 1036, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1129, 1131, 1132, 1134, 1136, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1163, 1164, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1223, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1283, 1285, 1286, 1287, 1288, 1290, 1291, 1292, 1293, 1294, 1298, 1299, 1300, 1304, 1305, 1316, 1322, 1323, 1325, 1326, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1358, 1363, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1380, 1381, 1382, 1383, 1384, 1386, 1387, 1388, 1389], "10": [14, 17, 18, 28, 36, 38, 40, 41, 43, 44, 47, 51, 56, 64, 137, 148, 149, 151, 163, 171, 213, 218, 222, 228, 237, 238, 240, 242, 244, 245, 246, 251, 255, 258, 269, 273, 275, 280, 282, 288, 297, 301, 324, 329, 332, 334, 337, 338, 339, 340, 341, 342, 343, 350, 361, 365, 373, 374, 375, 377, 429, 435, 438, 443, 447, 448, 450, 451, 453, 454, 456, 458, 462, 463, 464, 465, 467, 468, 469, 473, 474, 475, 476, 478, 480, 488, 491, 497, 518, 519, 520, 525, 531, 543, 551, 557, 559, 565, 575, 577, 579, 583, 585, 601, 603, 614, 629, 631, 632, 635, 645, 646, 651, 683, 731, 741, 744, 757, 768, 769, 777, 782, 784, 785, 788, 791, 793, 795, 803, 804, 828, 831, 843, 864, 865, 869, 872, 883, 884, 886, 888, 892, 901, 902, 908, 910, 920, 921, 929, 935, 938, 940, 943, 944, 945, 946, 947, 948, 949, 959, 965, 1042, 1056, 1060, 1061, 1063, 1064, 1069, 1079, 1091, 1097, 1105, 1108, 1111, 1117, 1139, 1150, 1164, 1172, 1180, 1186, 1196, 1198, 1200, 1204, 1206, 1210, 1226, 1238, 1257, 1259, 1317, 1330, 1337, 1339, 1342, 1358, 1367, 1374, 1375, 1376, 1377, 1378, 1380, 1381, 1382, 1384, 1389], "100": [11, 18, 28, 41, 53, 133, 136, 144, 148, 149, 150, 153, 157, 158, 159, 163, 167, 256, 274, 293, 350, 480, 645, 646, 676, 690, 700, 702, 705, 714, 730, 786, 843, 889, 914, 959, 965, 1113, 1206, 1222, 1237, 1238, 1245, 1246, 1248, 1262, 1276, 1288, 1291, 1300, 1316, 1358, 1378, 1389], "1000": [150, 226, 306, 327, 350, 366, 843, 933, 959, 1100, 1206, 1336, 1358, 1389], "10000": [148, 253, 350], "100000": [11, 28], "1000000": [12, 1103], "1001": [327, 350, 933, 959], "1002": [327, 350, 933, 959], "10047419486152048166": [241, 350], "1005": [366, 843], "100_000": [53, 821, 893, 959], "100\u00b5": 480, "101": [9, 28, 256, 350, 451, 480, 731, 889, 959, 965, 1317, 1389], "101000": 451, "10101": [28, 1384], "1010101": 9, "101514": [218, 350, 869, 959], "102": [256, 350, 889, 959], "1024": [38, 47, 48, 51, 148, 149, 150, 158, 167, 350, 408, 959, 1017], "1040361802642717": [1160, 1358], "107149": 1383, "10734580197236529959": [1138, 1358], "1073741824": [677, 843], "10783150408545073287": [241, 350], "107_930_000": 1367, "10_000": [41, 350], "10i": [240, 350, 883, 959], "10m": [475, 488, 1092, 1105], "10t00": 480, "11": [11, 17, 47, 51, 171, 179, 209, 218, 255, 282, 350, 361, 467, 468, 470, 475, 488, 512, 525, 557, 608, 632, 641, 651, 653, 667, 683, 757, 801, 826, 831, 839, 843, 858, 864, 865, 869, 884, 888, 892, 902, 908, 921, 959, 965, 1087, 1092, 1105, 1210, 1244, 1358, 1376], "110": [222, 350, 714, 731, 872, 959, 1317], "1101441246220388612": [519, 843], "111": [11, 1378], "11111": 1093, "111110": 1093, "11111001": [757, 843], "11111010": [757, 843], "11111111": 11, "112": [677, 843, 1389], "11330": 178, "1152921504606846976": [1235, 1358], "116": 178, "11638928888656214026": [519, 843], "118034": [919, 959], "11aa": 1381, "11aabb": 1381, "11h": [448, 1061], "12": [27, 41, 56, 137, 148, 171, 179, 218, 240, 251, 255, 256, 282, 297, 320, 350, 361, 437, 447, 448, 450, 451, 455, 463, 466, 467, 468, 470, 471, 472, 473, 475, 480, 488, 489, 490, 497, 525, 557, 589, 605, 632, 640, 651, 667, 677, 691, 712, 730, 778, 781, 784, 785, 786, 801, 804, 829, 830, 831, 843, 869, 883, 884, 888, 889, 892, 908, 915, 921, 959, 965, 1061, 1063, 1064, 1076, 1077, 1079, 1083, 1090, 1092, 1097, 1105, 1117, 1210, 1254, 1277, 1299, 1316, 1358, 1380, 1381, 1382, 1384, 1386, 1389], "120": [256, 350, 787, 889, 959, 1383], "1200": [672, 843], "120134": [730, 1316], "121": 1389, "123": [9, 598, 691, 698, 713, 736, 833, 965, 1277, 1284, 1322, 1335, 1358], "123000": 965, "1232e": [1044, 1046, 1358], "1234": [28, 672, 843], "12345": [793, 1039, 1097, 1129, 1254, 1358], "1234500": 965, "123456": [9, 965], "1234567": 28, "123456780": 137, "12346": 793, "123465": 965, "123a123": 713, "123abc": [712, 1298, 1299], "125": [1, 41, 60, 350, 359, 636, 822, 843, 918, 959, 1226, 1229, 1358], "1252": 148, "127": [1346, 1358, 1377], "128": [58, 72, 78, 1226, 1358], "129": [677, 843], "13": [212, 213, 218, 229, 230, 237, 256, 257, 269, 282, 324, 332, 334, 337, 338, 339, 340, 341, 342, 343, 350, 361, 447, 453, 454, 458, 462, 464, 465, 469, 476, 478, 601, 603, 651, 730, 771, 777, 780, 784, 791, 827, 829, 832, 843, 862, 863, 869, 877, 878, 889, 891, 908, 929, 938, 940, 943, 944, 945, 946, 947, 948, 949, 959, 1060, 1092, 1105, 1106, 1210, 1316, 1358, 1377], "130": [256, 350, 889, 959], "13382926553367784577": [519, 843], "134821952": 1367, "134_821_952": 1367, "135": [765, 1383], "13614470193936745724": [519, 843], "13756996518000038261": [1138, 1358], "13d": 480, "13h": [448, 1061], "14": [40, 171, 218, 240, 256, 259, 282, 320, 332, 334, 337, 338, 339, 340, 341, 342, 343, 350, 448, 453, 454, 458, 462, 464, 465, 469, 476, 478, 480, 525, 598, 641, 784, 829, 830, 843, 869, 883, 889, 908, 938, 940, 943, 944, 945, 946, 947, 948, 949, 959, 965, 1061, 1092, 1097], "140": [256, 350, 889, 959], "141592653589793": 11, "141593": [640, 843, 976, 1358, 1380, 1383], "142857": [1226, 1358], "143": [730, 1316, 1389], "1433": [39, 350], "1436e16": 179, "1438741209321515184": [241, 350], "1440": [485, 1102], "1443e235": 1389, "149": 1389, "14d": 965, "14h": 480, "15": [11, 41, 171, 218, 240, 256, 259, 282, 350, 439, 443, 468, 473, 475, 480, 488, 497, 635, 651, 667, 709, 778, 784, 829, 830, 843, 869, 883, 889, 908, 959, 965, 1053, 1056, 1092, 1097, 1105, 1117, 1295, 1358, 1377, 1381], "150": [256, 350, 889, 959, 1246, 1358], "1500": [171, 182], "15000": [253, 350], "153061": [539, 843], "155": 144, "15836": 179, "15_000": [253, 350], "16": [1, 41, 58, 79, 89, 171, 185, 218, 240, 256, 282, 324, 350, 435, 438, 473, 480, 525, 605, 612, 631, 636, 651, 731, 741, 777, 787, 788, 791, 801, 843, 869, 883, 889, 908, 915, 929, 959, 965, 1092, 1105, 1226, 1267, 1317, 1331, 1358, 1377, 1380, 1381, 1386], "160": [256, 350, 889, 959], "165": [1092, 1105], "1656e15": [1046, 1358], "166667": [1226, 1358], "1666683077": 793, "1666683099": 793, "167": 56, "16996": 1389, "16h": 965, "17": [137, 171, 179, 226, 255, 329, 350, 497, 523, 631, 653, 671, 773, 793, 830, 843, 888, 935, 959, 1044, 1046, 1092, 1117, 1142, 1244, 1358, 1389], "170": [144, 256, 350, 889, 959], "17293822569102704640": [1235, 1358], "174": 1389, "175201": [681, 843, 1268, 1358], "1755e": [176, 179], "1764": 60, "17888890": [226, 350], "179": 1389, "17_500": [253, 350], "18": [39, 137, 153, 218, 266, 282, 350, 438, 475, 488, 491, 525, 614, 631, 651, 741, 843, 869, 898, 902, 908, 959, 965, 1097, 1108, 1375, 1386], "180": [144, 441, 640, 843, 1383], "1800": [473, 1090], "1844": 179, "18446744073709551614": [1235, 1358], "185_000_000": 1367, "186": 1389, "1875": [669, 843, 927, 959], "1897": [450, 463, 1063, 1079], "18d": 965, "19": [179, 255, 282, 350, 450, 475, 651, 657, 659, 661, 663, 730, 843, 888, 908, 959, 1063, 1092, 1105, 1316], "1920": 1381, "196": 1382, "1964": [902, 959], "1969": [1381, 1382], "1970": [70, 71, 169, 488, 1105, 1367], "1972": 1367, "1976": [461, 492], "1977": [461, 492], "1978": [453, 454, 458, 461, 462, 464, 465, 469, 476, 478, 492, 1382], "1979": [461, 492], "1980": 480, "1985": [782, 785], "1990": [148, 1367], "1993": 1367, "1994": 1367, "1995": 148, "1998": [470, 1087], "1999": [297, 350, 470, 480, 965, 1087, 1097, 1384], "199992": [893, 959], "199994": [893, 959], "199996": [893, 959], "199998": [893, 959], "1_000_000": [226, 350, 1115, 1358], "1_234_500": 965, "1d": [240, 255, 282, 320, 350, 449, 470, 475, 480, 482, 485, 488, 491, 497, 651, 655, 657, 659, 661, 663, 666, 668, 670, 782, 783, 785, 786, 787, 803, 830, 831, 843, 883, 888, 908, 959, 965, 1062, 1070, 1077, 1087, 1092, 1096, 1099, 1102, 1105, 1117, 1358], "1e": [12, 172, 173, 174, 175], "1e6": 12, "1h": [240, 255, 282, 320, 350, 456, 470, 475, 488, 497, 651, 655, 657, 659, 661, 663, 666, 668, 670, 785, 786, 830, 831, 843, 883, 888, 908, 959, 1069, 1071, 1087, 1092, 1105, 1117, 1358], "1i": [240, 282, 320, 350, 497, 651, 655, 657, 659, 661, 663, 666, 668, 670, 843, 883, 908, 959, 1117, 1358], "1m": [240, 255, 282, 320, 350, 470, 475, 487, 488, 497, 651, 655, 657, 659, 661, 663, 666, 668, 670, 785, 786, 830, 831, 843, 883, 888, 908, 959, 1087, 1092, 1100, 1101, 1103, 1104, 1105, 1117, 1358], "1mo": [240, 255, 282, 320, 350, 452, 467, 468, 470, 474, 475, 481, 488, 497, 651, 655, 657, 659, 661, 663, 666, 668, 670, 782, 783, 785, 786, 830, 831, 843, 883, 888, 908, 959, 1065, 1083, 1084, 1085, 1087, 1088, 1089, 1091, 1092, 1098, 1105, 1106, 1117, 1358], "1n": [240, 255, 282, 320, 350, 470, 475, 488, 497, 651, 655, 657, 659, 661, 663, 666, 668, 670, 785, 786, 830, 831, 843, 883, 888, 908, 959, 1087, 1092, 1105, 1117, 1358], "1q": [240, 255, 282, 320, 350, 470, 475, 488, 651, 655, 657, 659, 661, 663, 666, 668, 670, 782, 783, 785, 786, 830, 831, 843, 883, 888, 908, 959, 1087, 1092, 1105], "1st_col": 965, "1u": [240, 255, 282, 320, 350, 470, 475, 488, 497, 651, 655, 657, 659, 661, 663, 666, 668, 670, 785, 786, 830, 831, 843, 883, 888, 908, 959, 1087, 1092, 1105, 1117, 1358], "1w": [240, 255, 282, 320, 350, 470, 475, 488, 497, 651, 655, 657, 659, 661, 663, 666, 668, 670, 782, 783, 785, 786, 830, 831, 843, 883, 888, 908, 959, 1087, 1092, 1105, 1117, 1358], "1w2d": [782, 783], "1y": [240, 255, 282, 320, 350, 470, 475, 488, 651, 655, 657, 659, 661, 663, 666, 668, 670, 782, 783, 785, 786, 830, 831, 843, 883, 888, 908, 959, 1087, 1092, 1105], "1y2mo": [470, 1087], "1zy3": [691, 1277], "2": [1, 7, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 64, 65, 83, 87, 101, 104, 106, 130, 131, 132, 133, 134, 135, 136, 137, 144, 148, 151, 157, 158, 160, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 179, 181, 193, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 350, 353, 354, 358, 359, 360, 361, 363, 365, 366, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 407, 408, 410, 415, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 443, 444, 447, 448, 450, 451, 452, 453, 454, 455, 456, 459, 460, 463, 466, 467, 468, 470, 471, 472, 473, 474, 475, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 605, 606, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 682, 683, 684, 685, 686, 688, 690, 691, 692, 693, 694, 695, 697, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 813, 814, 817, 821, 822, 823, 824, 825, 826, 828, 831, 832, 833, 839, 843, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 959, 964, 965, 969, 970, 971, 974, 977, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1016, 1017, 1028, 1034, 1036, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1060, 1061, 1064, 1066, 1067, 1069, 1071, 1072, 1075, 1076, 1077, 1079, 1081, 1082, 1083, 1084, 1085, 1089, 1090, 1091, 1092, 1095, 1105, 1107, 1108, 1109, 1110, 1111, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1129, 1131, 1132, 1134, 1136, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1160, 1163, 1164, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1223, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1267, 1269, 1270, 1271, 1272, 1273, 1274, 1277, 1283, 1285, 1287, 1288, 1289, 1291, 1292, 1294, 1295, 1298, 1299, 1304, 1305, 1307, 1308, 1309, 1312, 1313, 1315, 1316, 1317, 1318, 1321, 1323, 1325, 1326, 1328, 1329, 1330, 1331, 1333, 1334, 1335, 1336, 1338, 1339, 1340, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1358, 1363, 1367, 1368, 1370, 1371, 1373, 1374, 1375, 1376, 1377, 1378, 1380, 1381, 1382, 1383, 1384, 1386, 1387, 1388, 1389], "20": [39, 40, 41, 65, 137, 148, 149, 153, 154, 156, 160, 163, 166, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 186, 209, 218, 222, 228, 240, 244, 266, 273, 275, 280, 282, 297, 307, 308, 312, 320, 326, 331, 350, 373, 374, 375, 429, 443, 450, 453, 454, 458, 462, 463, 464, 465, 469, 475, 476, 478, 480, 488, 491, 512, 519, 525, 589, 597, 608, 635, 655, 657, 659, 661, 663, 666, 668, 670, 696, 730, 741, 756, 784, 793, 803, 822, 830, 843, 858, 869, 872, 875, 883, 898, 901, 908, 918, 932, 937, 959, 965, 1056, 1063, 1067, 1079, 1092, 1097, 1105, 1108, 1114, 1120, 1137, 1237, 1282, 1316, 1337, 1339, 1342, 1358, 1374, 1375, 1378, 1384, 1386], "200": [483, 484, 486, 645, 646, 843, 965, 1113, 1222, 1237, 1238, 1245, 1246, 1248, 1358, 1378], "2000": [450, 460, 463, 467, 468, 470, 965, 1063, 1073, 1079, 1084, 1085, 1087, 1093, 1367, 1381], "200000": [483, 893, 959], "200000000": 486, "2001": [17, 449, 450, 455, 457, 460, 463, 466, 470, 471, 472, 475, 479, 488, 489, 490, 491, 655, 657, 659, 661, 663, 666, 668, 670, 726, 843, 965, 1062, 1063, 1068, 1070, 1071, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1086, 1087, 1088, 1089, 1092, 1096, 1105, 1106, 1107, 1108, 1109, 1312], "2002": [148, 460, 470, 1073, 1087, 1109], "2003": [470, 793, 1087], "2004": [470, 1087], "2005": [470, 1087], "2006": [470, 1087], "2008": 1367, "200m": [483, 484, 486], "2010": [297, 350, 480, 965], "2011": [448, 1061], "2012": [448, 1061, 1384], "2013": 1090, "2016": [255, 350, 888, 959], "2017": [255, 350, 888, 959], "2018": [255, 350, 474, 888, 959, 1091], "2019": [255, 350, 888, 959], "202": 1382, "2020": [152, 164, 211, 218, 238, 255, 282, 350, 353, 447, 452, 456, 459, 474, 477, 480, 481, 482, 483, 484, 485, 486, 487, 497, 651, 726, 728, 729, 768, 843, 861, 869, 888, 908, 959, 965, 1060, 1065, 1069, 1072, 1091, 1094, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1117, 1312, 1314, 1315, 1358, 1382], "2021": [211, 218, 238, 240, 320, 350, 726, 803, 861, 869, 883, 959, 965, 1066, 1067, 1074, 1095, 1312, 1381], "2022": [56, 211, 218, 238, 350, 451, 475, 488, 726, 782, 783, 785, 786, 787, 793, 861, 869, 959, 965, 1064, 1074, 1092, 1105, 1312], "2023": [17, 41, 137, 171, 253, 350, 451, 787, 803, 965, 1064], "2024": [171, 447, 453, 454, 458, 459, 462, 464, 465, 469, 473, 476, 478, 631, 768, 781, 782, 784, 785, 787, 843, 965, 1060, 1072, 1090, 1381, 1384], "2025": [447, 459, 473, 768, 801, 965, 1060, 1072], "2026": 1382, "2030": 1381, "2031": 965, "2040": 480, "2047317070637311557": [241, 350], "2055938745": 137, "2065": [453, 454, 458, 462, 464, 465, 469, 476, 478], "2068": 179, "207": 1382, "2077": [297, 350, 480, 965, 1097, 1381, 1382], "2095": 179, "20_000": [41, 350], "20t08": 480, "20t18": 1097, "20word": 151, "21": [171, 218, 266, 299, 350, 439, 450, 496, 498, 499, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 784, 793, 801, 819, 820, 843, 869, 898, 959, 965, 1053, 1063, 1116, 1118, 1119, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1358, 1375], "213": 1389, "2147483647": 1389, "2147483648": [1208, 1358], "21d": 965, "22": [47, 51, 171, 179, 350, 455, 471, 475, 488, 490, 491, 653, 655, 657, 659, 661, 663, 666, 668, 670, 726, 784, 839, 843, 959, 965, 1092, 1105, 1108, 1244, 1312, 1358, 1381, 1382, 1389], "221": 1389, "2246e": [1267, 1331, 1358], "225": [475, 488, 1383], "22500": 821, "22_000_000": 1367, "22_500": 821, "23": [11, 131, 179, 218, 240, 282, 312, 350, 451, 455, 458, 471, 473, 475, 480, 490, 651, 655, 657, 659, 661, 663, 666, 668, 670, 784, 787, 829, 830, 831, 843, 869, 883, 908, 918, 959, 965, 1064, 1071, 1090, 1342, 1358, 1388, 1389], "230498": 12, "230498095872587": 12, "2304980958725870923": 12, "232338648": 1367, "2337": [41, 350], "234": 28, "2345": 965, "23456789": 11, "235": 1389, "23h": 965, "24": [58, 171, 240, 254, 255, 259, 282, 297, 320, 350, 437, 439, 455, 470, 471, 475, 482, 488, 490, 612, 651, 655, 657, 659, 661, 663, 666, 668, 670, 709, 782, 783, 785, 786, 787, 830, 831, 843, 883, 887, 888, 908, 959, 1053, 1087, 1092, 1099, 1105, 1159, 1333, 1358, 1381, 1388], "24030": 178, "249": [757, 843], "25": [1, 28, 41, 60, 137, 218, 222, 240, 245, 255, 282, 307, 312, 320, 324, 350, 408, 443, 455, 456, 471, 475, 480, 488, 490, 497, 636, 638, 641, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 750, 784, 785, 786, 787, 793, 801, 802, 805, 830, 831, 843, 869, 872, 883, 888, 895, 908, 927, 929, 959, 965, 1017, 1055, 1056, 1069, 1092, 1097, 1105, 1111, 1117, 1140, 1226, 1231, 1298, 1358, 1375, 1380, 1386, 1387], "250": [757, 843, 1246, 1358, 1378, 1389], "2500": [253, 312, 350], "254508": [497, 843, 1117, 1358], "255": 1389, "256": [259, 350, 408, 1017, 1226, 1358, 1380], "2560": 1017, "259921": [427, 843, 1038, 1358, 1380], "25_000_000": 1367, "26": [39, 41, 171, 176, 177, 178, 179, 183, 218, 350, 456, 489, 869, 959, 1069], "266667": [218, 350, 869, 959], "27": [1, 60, 307, 343, 350, 438, 466, 472, 489, 741, 768, 843, 949, 965, 1060, 1229, 1337, 1358, 1388, 1389], "270": 1383, "28": [303, 308, 350, 359, 474, 491, 843, 1091, 1108, 1339, 1358, 1381, 1383, 1388, 1389], "283185": [640, 843], "2846": 350, "285714": [526, 843, 1144, 1358], "289962": 1383, "28_341_469": 1367, "29": [17, 171, 448, 467, 1061, 1084], "29096": 1389, "290994": [919, 959], "292432": [977, 1358], "292893": [497, 843, 1117, 1358], "2_color_scal": [41, 350], "2d": [282, 307, 308, 350, 470, 651, 803, 843, 908, 959, 1061, 1068], "2h": [655, 657, 659, 661, 663, 666, 668, 670, 843], "2i": [240, 350, 883, 959], "2m": [965, 1082], "2x": 178, "3": [1, 7, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 36, 38, 40, 41, 43, 44, 45, 46, 47, 52, 56, 57, 58, 59, 60, 64, 65, 83, 95, 101, 104, 106, 130, 131, 132, 133, 134, 135, 136, 137, 144, 148, 151, 153, 157, 158, 159, 163, 169, 171, 172, 173, 174, 175, 178, 179, 180, 181, 183, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 350, 353, 354, 359, 360, 361, 362, 364, 375, 376, 377, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 408, 409, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 443, 444, 445, 446, 447, 449, 451, 452, 453, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 488, 489, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 610, 611, 612, 613, 614, 615, 617, 619, 621, 622, 625, 628, 629, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 682, 684, 685, 686, 689, 690, 692, 693, 694, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 712, 713, 714, 715, 716, 717, 718, 719, 720, 727, 728, 733, 734, 737, 738, 739, 740, 741, 742, 744, 748, 749, 752, 753, 754, 756, 757, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 839, 843, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 935, 936, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 949, 950, 959, 964, 965, 970, 971, 974, 976, 978, 979, 980, 982, 983, 984, 985, 986, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1018, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1064, 1065, 1068, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1079, 1081, 1082, 1083, 1088, 1091, 1092, 1093, 1094, 1096, 1097, 1098, 1100, 1101, 1103, 1105, 1107, 1108, 1110, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1129, 1131, 1132, 1134, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1160, 1163, 1164, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1202, 1203, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1276, 1278, 1279, 1280, 1283, 1284, 1285, 1288, 1289, 1290, 1291, 1293, 1294, 1298, 1299, 1300, 1301, 1302, 1306, 1313, 1314, 1319, 1320, 1323, 1325, 1326, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1338, 1339, 1340, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1358, 1363, 1367, 1368, 1370, 1371, 1373, 1374, 1375, 1376, 1377, 1378, 1380, 1381, 1382, 1383, 1384, 1386, 1387, 1388, 1389], "30": [41, 218, 228, 240, 244, 273, 280, 303, 324, 350, 353, 373, 374, 375, 443, 451, 453, 454, 458, 462, 464, 465, 466, 467, 469, 472, 474, 475, 476, 478, 480, 481, 488, 489, 519, 597, 677, 784, 801, 803, 829, 830, 843, 869, 875, 883, 901, 929, 959, 965, 1056, 1064, 1084, 1091, 1092, 1097, 1098, 1105, 1137, 1358, 1363, 1374, 1375, 1378, 1380, 1381, 1383, 1384, 1387, 1389], "300": [303, 350, 518, 629, 646, 843, 965, 1238, 1245, 1246, 1248, 1358, 1378], "3000": 965, "3002": [450, 463, 1063, 1079], "30103": [585, 843, 1380], "3022416320763508302": [1138, 1358], "30_000": [41, 350], "30m": [240, 350, 475, 488, 883, 959, 1092, 1105], "30t16": 480, "31": [60, 65, 148, 149, 163, 172, 173, 174, 175, 218, 297, 350, 450, 451, 455, 463, 467, 470, 473, 481, 696, 726, 781, 784, 793, 803, 822, 869, 959, 965, 1061, 1063, 1064, 1068, 1079, 1084, 1090, 1097, 1098, 1114, 1237, 1282, 1312, 1358, 1382, 1384, 1386, 1389], "31t06": 1097, "32": [58, 70, 76, 80, 90, 250, 255, 282, 350, 612, 651, 677, 843, 888, 908, 959, 1057, 1088, 1226, 1249, 1358, 1375, 1381], "321": [28, 1389], "3212": [730, 1316], "321cba": 1381, "3265500": 965, "32971": [491, 1108], "32974": [491, 1108], "32976": [491, 1108], "32bit": [307, 350], "33": [218, 266, 350, 671, 843, 869, 898, 959, 1249, 1358, 1382], "333": [17, 672, 843, 1113, 1222, 1255, 1358], "33333": 1384, "333333": [246, 350, 614, 801, 886, 959, 1226, 1253, 1358, 1375], "34": [218, 350, 712, 726, 869, 959, 1299, 1312], "3420": [730, 1316], "343622": [682, 843], "345": [424, 425, 707, 708, 1033, 1034, 1293, 1294], "3450": [1255, 1358], "3456": 965, "34776706224699483": [1269, 1358], "35": [41, 350, 443, 480, 784, 843, 1056, 1358], "350": [350, 353, 518, 629, 843, 1246, 1358, 1363], "3500": [1255, 1358], "356": [455, 471, 490], "356194": [764, 765, 1383], "357": [455, 471, 490], "358": [455, 471, 490], "359": [455, 471, 490], "36": [218, 350, 869, 959, 1386], "360": [441, 640, 843, 1383], "361": 1389, "363961": [577, 1198], "366": [471, 1088], "37": [13, 965], "370h": [497, 843, 1117, 1358], "37338": 1389, "38": [41, 137, 176, 179, 350], "38180177416060584": [664, 843, 1250, 1358], "381802": [664, 843, 1250, 1358], "386294": [586, 843, 1207, 1358, 1380], "389056": [501, 843, 1120, 1358, 1380], "39": [668, 793, 843], "39m": 965, "3_color_scal": [41, 350], "3d12h4m25": [240, 255, 282, 320, 350, 475, 488, 497, 651, 785, 786, 830, 831, 843, 883, 888, 908, 959, 1092, 1105, 1117, 1358], "3f": [151, 726, 729, 1312, 1315], "3i": [240, 282, 350, 883, 959], "3rd": [1289, 1313], "3xy": [691, 1277], "4": [1, 8, 10, 14, 18, 26, 36, 38, 40, 41, 43, 44, 47, 56, 57, 58, 59, 60, 64, 65, 83, 104, 130, 131, 132, 133, 134, 135, 136, 137, 144, 148, 149, 154, 156, 160, 163, 166, 167, 168, 171, 183, 207, 208, 209, 210, 211, 212, 213, 217, 219, 223, 227, 228, 229, 230, 231, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 261, 262, 263, 266, 268, 269, 270, 272, 273, 274, 275, 278, 282, 284, 285, 292, 293, 296, 300, 301, 302, 303, 304, 305, 308, 311, 313, 314, 316, 317, 318, 319, 320, 322, 323, 324, 326, 327, 329, 330, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 350, 353, 354, 358, 359, 360, 361, 363, 365, 377, 384, 385, 386, 388, 389, 390, 391, 392, 394, 396, 397, 398, 399, 401, 408, 419, 420, 421, 424, 425, 427, 428, 429, 433, 434, 437, 438, 439, 441, 444, 451, 454, 455, 463, 471, 472, 473, 474, 475, 476, 477, 480, 482, 485, 487, 488, 490, 494, 495, 497, 501, 502, 504, 505, 506, 508, 509, 510, 513, 514, 515, 516, 517, 520, 522, 524, 525, 526, 527, 536, 537, 541, 542, 543, 550, 551, 552, 553, 554, 556, 557, 559, 567, 569, 570, 571, 572, 573, 574, 575, 579, 580, 585, 588, 589, 590, 610, 612, 614, 615, 617, 619, 621, 622, 625, 626, 627, 630, 631, 633, 634, 635, 636, 639, 641, 645, 646, 647, 648, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 676, 679, 683, 684, 685, 686, 689, 691, 695, 698, 701, 703, 707, 708, 709, 710, 711, 712, 713, 716, 717, 718, 719, 724, 725, 726, 727, 731, 736, 737, 739, 740, 741, 742, 744, 747, 748, 749, 750, 756, 757, 759, 761, 762, 764, 765, 766, 767, 769, 770, 771, 772, 773, 775, 777, 778, 779, 780, 781, 784, 785, 786, 788, 790, 791, 795, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 839, 843, 858, 859, 861, 862, 863, 864, 865, 868, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 901, 902, 903, 905, 908, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 928, 929, 932, 933, 935, 936, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 949, 950, 959, 964, 965, 969, 974, 977, 984, 991, 993, 994, 995, 997, 998, 999, 1000, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1017, 1028, 1033, 1034, 1039, 1040, 1042, 1048, 1053, 1055, 1057, 1067, 1071, 1078, 1079, 1080, 1082, 1083, 1084, 1085, 1086, 1089, 1091, 1092, 1094, 1099, 1102, 1104, 1105, 1106, 1107, 1114, 1117, 1121, 1122, 1124, 1125, 1131, 1132, 1134, 1139, 1140, 1143, 1144, 1145, 1146, 1150, 1153, 1154, 1155, 1156, 1158, 1164, 1171, 1172, 1173, 1174, 1175, 1180, 1184, 1187, 1188, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1200, 1201, 1216, 1219, 1220, 1223, 1226, 1227, 1228, 1229, 1233, 1234, 1237, 1238, 1239, 1242, 1243, 1247, 1249, 1250, 1251, 1252, 1253, 1256, 1258, 1262, 1263, 1266, 1269, 1270, 1271, 1275, 1277, 1281, 1284, 1287, 1289, 1293, 1294, 1296, 1297, 1302, 1304, 1305, 1310, 1311, 1312, 1313, 1317, 1322, 1323, 1326, 1328, 1330, 1336, 1339, 1341, 1343, 1349, 1358, 1363, 1367, 1368, 1370, 1371, 1373, 1374, 1375, 1376, 1377, 1378, 1380, 1381, 1382, 1383, 1386, 1387, 1388, 1389], "40": [41, 218, 228, 255, 273, 350, 475, 480, 488, 519, 583, 730, 741, 843, 869, 888, 901, 959, 965, 1074, 1105, 1204, 1316, 1374, 1375, 1378, 1381], "400": [319, 350, 483, 484, 486, 926, 959, 1245, 1246, 1248, 1358, 1378], "4000000": [1115, 1358], "400157": 95, "404": [256, 350, 697, 699, 889, 959, 1283, 1285], "4096": 1380, "41": [218, 350, 668, 843, 869, 959, 1375, 1389], "412277": 179, "414214": [686, 843, 1272, 1358, 1380], "4160": 60, "416147": 1383, "4164": [255, 350, 888, 959], "42": [60, 218, 241, 266, 282, 350, 480, 651, 843, 869, 898, 908, 959, 1138, 1358, 1374, 1388], "424778": [640, 843], "428571": [496, 843, 1116, 1358], "429101": 1375, "4294967296": [47, 350], "43": [218, 282, 350, 438, 651, 668, 843, 869, 908, 959], "4321": 965, "433013": [665, 843, 919, 959], "44": [11, 266, 350, 444, 843, 898, 959], "4411": [255, 350, 888, 959], "44225": [1038, 1358], "444": 11, "44444444444": 11, "45": [41, 218, 282, 350, 451, 475, 488, 651, 668, 691, 698, 738, 765, 784, 803, 829, 830, 843, 869, 908, 959, 965, 1064, 1092, 1097, 1105, 1277, 1284, 1325, 1380, 1381, 1383, 1387, 1389], "450": [1246, 1358], "45000": 821, "4500000": 965, "456": [9, 11, 451, 965, 1064, 1335, 1358], "456000": [451, 1064], "456001\u00b5": 965, "4566": [255, 350, 888, 959], "456789": [480, 965, 1093], "456789\u00b5": 965, "456m": 965, "457658": 1383, "459148": [493, 843], "46": 965, "4696": [255, 350, 888, 959], "47": [56, 218, 350, 668, 843, 869, 959, 965, 1375], "470": [902, 959], "47033": [664, 843, 1250, 1358], "47033046033698594": [664, 843, 1250, 1358], "475": [902, 959], "48": [13, 179, 282, 350, 651, 741, 843, 908, 959, 965], "4827": [255, 350, 888, 959], "485": 1389, "49": [218, 350, 869, 959, 965], "492474": [497, 843, 1117, 1358], "498": [256, 350, 889, 959], "4_500_000": 965, "4ab4a": 1381, "4d": [497, 843, 1117, 1358], "4f6228": [41, 350], "4f71": [41, 350], "4x": [252, 350], "5": [1, 7, 8, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 36, 38, 40, 43, 44, 47, 52, 56, 57, 59, 60, 64, 104, 130, 133, 134, 135, 136, 137, 139, 149, 171, 172, 174, 177, 179, 183, 208, 211, 212, 213, 218, 219, 222, 227, 228, 229, 230, 231, 233, 234, 235, 237, 238, 239, 240, 242, 243, 245, 246, 248, 250, 251, 252, 254, 255, 256, 257, 258, 259, 261, 262, 263, 268, 269, 270, 272, 274, 275, 276, 278, 282, 285, 292, 293, 296, 297, 300, 301, 302, 303, 304, 305, 307, 308, 311, 312, 314, 317, 318, 319, 320, 323, 324, 326, 327, 329, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 350, 353, 354, 359, 360, 363, 378, 379, 384, 385, 386, 388, 390, 394, 399, 401, 407, 408, 419, 420, 421, 424, 425, 428, 429, 439, 440, 441, 443, 444, 447, 450, 451, 452, 453, 454, 458, 459, 462, 463, 464, 465, 469, 474, 476, 477, 478, 480, 481, 487, 491, 495, 497, 499, 500, 503, 505, 509, 510, 514, 515, 517, 520, 522, 525, 527, 530, 533, 534, 535, 536, 537, 541, 543, 550, 553, 554, 556, 557, 559, 562, 564, 565, 569, 570, 571, 572, 573, 574, 578, 579, 583, 589, 610, 612, 614, 626, 630, 631, 632, 633, 634, 635, 636, 638, 639, 641, 645, 646, 647, 648, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 662, 665, 667, 668, 669, 670, 671, 674, 685, 691, 701, 702, 703, 706, 707, 708, 727, 731, 742, 744, 748, 749, 750, 762, 764, 765, 767, 768, 769, 770, 771, 773, 775, 777, 778, 779, 780, 781, 782, 784, 787, 788, 789, 790, 791, 795, 797, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 821, 822, 824, 826, 827, 828, 832, 833, 839, 843, 861, 862, 863, 864, 865, 869, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 895, 896, 902, 905, 908, 914, 915, 916, 917, 918, 919, 920, 921, 925, 926, 928, 929, 932, 933, 935, 937, 938, 939, 940, 943, 944, 945, 946, 947, 948, 949, 950, 959, 965, 974, 977, 981, 984, 987, 988, 991, 993, 994, 995, 997, 999, 1003, 1008, 1009, 1010, 1016, 1017, 1028, 1033, 1040, 1042, 1049, 1053, 1054, 1055, 1056, 1057, 1060, 1063, 1064, 1065, 1066, 1067, 1068, 1072, 1079, 1091, 1093, 1094, 1095, 1097, 1098, 1104, 1106, 1107, 1108, 1114, 1117, 1119, 1121, 1122, 1123, 1134, 1139, 1140, 1143, 1145, 1149, 1152, 1164, 1171, 1174, 1175, 1180, 1183, 1186, 1190, 1191, 1192, 1193, 1194, 1195, 1199, 1200, 1204, 1208, 1216, 1223, 1226, 1227, 1228, 1231, 1232, 1233, 1234, 1238, 1239, 1242, 1243, 1244, 1245, 1246, 1248, 1249, 1252, 1256, 1258, 1263, 1269, 1272, 1277, 1287, 1288, 1289, 1292, 1293, 1313, 1317, 1330, 1337, 1339, 1342, 1343, 1346, 1349, 1358, 1363, 1368, 1371, 1373, 1375, 1376, 1377, 1380, 1381, 1382, 1383, 1386, 1388, 1389], "50": [13, 28, 41, 218, 228, 238, 350, 429, 475, 480, 488, 782, 783, 843, 869, 959, 965, 1042, 1055, 1105, 1298, 1358, 1374, 1375], "500": [41, 319, 350, 353, 453, 454, 458, 462, 464, 465, 469, 476, 478, 926, 959, 1078, 1080, 1086, 1245, 1246, 1248, 1358, 1363], "5000": [312, 350, 1342, 1358], "50000": 149, "500000": [462, 1078], "500000000": [469, 1086], "5000555": 965, "500_000": [453, 454, 458, 462, 464, 465, 469, 476, 478], "500m": [1078, 1080, 1086], "51": 965, "512": [47, 150, 252, 350, 408, 636, 843, 1017, 1226, 1358], "51966": [731, 1317], "52": [324, 350, 489, 671, 843, 929, 959], "523599": 1383, "527525": [1251, 1358], "53": [489, 1106, 1386], "533316061": 1367, "533_316_061": 1367, "54": [501, 843, 1160, 1358, 1380, 1389], "540": [441, 640, 843], "540302": 1383, "543": 9, "543081": [431, 843, 1045, 1358], "5432": 150, "54321": 9, "544": 1389, "544705": 773, "549306": [981, 1358], "55": [41, 58, 350, 523, 843, 1142, 1358, 1377, 1381, 1382], "5555": 965, "55550": 965, "56": [137, 712, 745, 843, 1299], "566371": [640, 843], "567": 28, "56789": [1039, 1129, 1254, 1358], "57": [668, 843, 1254, 1358, 1383, 1389], "570796": [367, 369, 843, 976, 978, 1358, 1383], "575050513": [176, 179], "58": [144, 274, 350], "581139": [1055, 1358], "584963": [584, 843], "587401": [427, 843, 1380], "59": [137, 218, 350, 451, 465, 473, 476, 480, 510, 784, 829, 830, 831, 843, 869, 959, 965, 1064, 1082, 1090, 1093], "59815": [501, 843, 1380], "5_000_555": 965, "5th": [41, 350], "6": [1, 8, 10, 14, 36, 38, 40, 41, 43, 44, 45, 46, 47, 55, 57, 59, 64, 96, 97, 104, 130, 133, 134, 135, 136, 153, 157, 158, 171, 208, 211, 214, 215, 219, 220, 221, 223, 224, 225, 227, 228, 231, 234, 235, 236, 237, 238, 240, 242, 244, 245, 246, 248, 250, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 264, 267, 268, 271, 274, 275, 276, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 293, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 308, 309, 310, 314, 316, 317, 318, 320, 321, 322, 323, 324, 326, 327, 333, 343, 344, 350, 353, 354, 359, 363, 384, 385, 386, 388, 394, 420, 421, 424, 425, 437, 438, 444, 447, 451, 455, 459, 466, 470, 471, 472, 483, 484, 486, 489, 490, 493, 495, 504, 505, 510, 514, 520, 522, 525, 543, 544, 545, 554, 557, 570, 571, 572, 573, 577, 589, 590, 626, 630, 637, 640, 641, 642, 647, 649, 651, 654, 656, 658, 660, 662, 665, 667, 668, 669, 674, 679, 685, 691, 696, 707, 708, 731, 742, 744, 749, 757, 759, 761, 768, 770, 775, 777, 778, 779, 781, 784, 788, 791, 797, 804, 805, 809, 822, 826, 833, 839, 843, 861, 864, 865, 866, 867, 870, 871, 873, 874, 875, 876, 879, 880, 881, 883, 884, 886, 887, 888, 890, 892, 893, 900, 902, 904, 905, 906, 908, 909, 910, 912, 914, 915, 916, 917, 918, 921, 924, 925, 928, 929, 932, 933, 939, 949, 950, 959, 965, 991, 993, 994, 995, 997, 1003, 1033, 1040, 1044, 1046, 1051, 1052, 1057, 1060, 1072, 1087, 1097, 1107, 1114, 1121, 1134, 1140, 1165, 1166, 1175, 1178, 1191, 1192, 1193, 1194, 1198, 1216, 1230, 1233, 1234, 1239, 1241, 1247, 1249, 1251, 1253, 1258, 1263, 1266, 1277, 1282, 1293, 1317, 1329, 1339, 1358, 1363, 1368, 1371, 1373, 1375, 1376, 1380, 1386, 1387, 1389], "60": [41, 228, 274, 350, 458, 464, 465, 476, 487, 510, 668, 726, 843, 1088, 1093, 1104, 1235, 1312, 1358, 1383], "600": [319, 350, 483, 484, 486, 926, 959, 965], "60000": 462, "600000": 965, "60000000": 469, "60206": [585, 843, 1380], "605551": 824, "605551275463989": 824, "609438": 1380, "60_000": [453, 454, 458, 462, 464, 465, 469, 476, 478], "61": [274, 350], "625": [662, 843], "626172": [693, 1279], "63": [668, 843], "63204": 1389, "6331e16": [1331, 1358, 1383], "636253": 1383, "64": [1, 58, 60, 71, 73, 77, 81, 88, 91, 170, 207, 312, 350, 432, 612, 636, 843, 1226, 1229, 1358, 1380], "64030": [731, 1317], "642093": 1383, "647961": 179, "64bit": [171, 643, 843, 1235, 1358], "65": [222, 350, 872, 959, 1111, 1358], "650": [518, 629, 843], "65280": [731, 1317], "654": [28, 822, 918, 959], "65432": 1384, "654321": 598, "65536": 1380, "65552": [407, 1016], "66": [255, 319, 350, 668, 757, 843, 888, 926, 959, 1160, 1249, 1358], "663053": 137, "666": 965, "666000": 965, "666667": [218, 246, 321, 338, 350, 496, 801, 802, 808, 843, 869, 886, 927, 944, 959, 1116, 1358], "666f6f": [693, 1279], "67500": 821, "676": [256, 350, 889, 959], "678": [691, 698, 1277, 1284], "6789": [29, 965], "67890": 29, "686241": 1375, "69": [668, 843, 1160, 1358], "693147": [586, 843, 1205, 1207, 1358, 1380], "6_000_000": 1367, "7": [1, 17, 28, 36, 38, 40, 41, 43, 44, 45, 46, 47, 52, 57, 59, 64, 153, 157, 158, 171, 186, 208, 211, 214, 215, 216, 218, 220, 221, 224, 225, 227, 231, 234, 236, 240, 242, 244, 246, 254, 258, 260, 262, 264, 266, 267, 271, 274, 276, 279, 280, 282, 283, 285, 286, 287, 288, 290, 293, 295, 298, 299, 300, 301, 306, 308, 309, 310, 318, 320, 321, 322, 350, 353, 354, 359, 363, 385, 386, 388, 397, 438, 450, 451, 455, 463, 471, 474, 475, 480, 488, 490, 501, 514, 520, 525, 526, 543, 557, 570, 571, 572, 573, 630, 631, 641, 647, 651, 667, 668, 685, 701, 730, 744, 768, 777, 778, 781, 784, 785, 791, 796, 804, 805, 822, 826, 833, 843, 861, 866, 867, 869, 871, 874, 876, 879, 881, 883, 884, 886, 887, 892, 898, 900, 903, 906, 908, 909, 910, 914, 918, 921, 959, 965, 981, 994, 995, 997, 1006, 1063, 1064, 1068, 1074, 1079, 1091, 1092, 1097, 1105, 1107, 1120, 1144, 1159, 1178, 1191, 1192, 1193, 1194, 1238, 1239, 1252, 1258, 1287, 1316, 1358, 1363, 1368, 1373, 1375, 1376, 1377, 1380, 1382, 1386, 1389], "70": [218, 350, 757, 785, 843, 869, 959, 1160, 1358, 1375], "700": [319, 350, 926, 959], "702963": [41, 350], "7051579356916758811": 165, "707107": [396, 498, 665, 666, 764, 843, 1005, 1118, 1358, 1383], "712389": 1383, "714": 1389, "714286": [526, 843, 1144, 1358], "718281828459045": [11, 493, 584, 843, 1111, 1205, 1358], "718282": [501, 843, 1120, 1358, 1380], "720": [441, 640, 843], "7264": 1389, "732051": [1272, 1358], "7415e16": 179, "742": [256, 350, 889, 959], "75": [41, 218, 222, 350, 363, 630, 638, 641, 654, 656, 658, 660, 665, 667, 669, 801, 805, 843, 869, 872, 959, 965, 1055, 1140, 1160, 1231, 1298, 1358, 1375, 1383, 1389], "7500": [253, 350], "7508": 1389, "754": [750, 843], "754888": [493, 843], "761594": [746, 843, 1332, 1358], "764052": 95, "7654": 965, "765431": 1093, "7654321": 28, "76933c": [41, 350], "77": 1097, "78": [9, 144, 712, 1299], "780": 9, "784": [255, 350, 888, 959], "785398": [371, 764, 765, 843, 980, 1358, 1383], "789": [11, 965], "79": [1160, 1358], "7d": 965, "8": [1, 12, 36, 38, 40, 43, 44, 45, 46, 47, 48, 56, 57, 59, 60, 64, 82, 86, 92, 157, 158, 171, 208, 211, 214, 215, 216, 218, 220, 221, 223, 224, 225, 227, 231, 234, 236, 238, 242, 244, 251, 254, 255, 256, 258, 259, 260, 262, 264, 267, 276, 279, 280, 282, 283, 285, 286, 287, 288, 290, 293, 295, 297, 298, 299, 301, 306, 308, 309, 310, 318, 321, 322, 324, 350, 363, 365, 377, 385, 386, 388, 435, 438, 439, 451, 480, 514, 521, 525, 526, 551, 553, 557, 570, 571, 572, 573, 612, 630, 631, 636, 641, 647, 648, 653, 677, 683, 685, 709, 710, 711, 726, 757, 762, 768, 773, 775, 778, 780, 788, 790, 795, 796, 799, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 822, 824, 827, 828, 832, 843, 861, 866, 867, 869, 871, 873, 874, 876, 879, 881, 884, 887, 888, 889, 892, 893, 902, 906, 909, 910, 914, 918, 921, 929, 959, 965, 994, 995, 997, 1046, 1053, 1074, 1140, 1144, 1159, 1172, 1174, 1178, 1191, 1192, 1193, 1194, 1226, 1229, 1239, 1242, 1244, 1247, 1249, 1251, 1253, 1296, 1297, 1312, 1358, 1367, 1368, 1373, 1375, 1376, 1377, 1380, 1381, 1382, 1386, 1389], "80": [41, 222, 350, 872, 959], "800": [483, 484, 486, 1097], "8000": 150, "803065983": 137, "81": 1380, "814697265625": [1115, 1358], "816497": [298, 350], "8192": 148, "82": [255, 350, 888, 959], "8257e14": 1389, "83": [255, 350, 888, 959], "833": [255, 350, 888, 959], "833333": [338, 944], "848062": 1383, "848808": 179, "85": [41, 144, 350, 1160, 1358, 1389], "850": [518, 629, 843], "8568409950394724": [1111, 1358], "8589934592": [677, 843], "86": 1389, "8601": 1381, "87": 1389, "876": 9, "88": [218, 350, 869, 959], "881374": [370, 843, 979, 1358], "888": [822, 918, 959], "8_000_000": 1367, "8a": [1013, 1014], "8nin": 1389, "9": [1, 9, 36, 38, 40, 41, 43, 44, 47, 52, 56, 64, 208, 216, 218, 231, 233, 242, 246, 254, 256, 258, 259, 274, 282, 284, 285, 288, 300, 301, 318, 322, 324, 343, 350, 359, 363, 365, 377, 385, 386, 388, 393, 395, 435, 438, 441, 451, 480, 506, 514, 525, 531, 551, 557, 568, 576, 614, 630, 631, 640, 647, 651, 652, 653, 664, 667, 668, 679, 683, 698, 730, 738, 741, 771, 777, 778, 781, 784, 796, 831, 843, 869, 879, 884, 886, 887, 889, 892, 908, 910, 921, 929, 949, 959, 965, 989, 990, 994, 995, 997, 1002, 1004, 1055, 1068, 1078, 1080, 1086, 1092, 1105, 1106, 1150, 1159, 1172, 1178, 1189, 1197, 1239, 1243, 1244, 1250, 1252, 1254, 1266, 1284, 1316, 1325, 1358, 1367, 1368, 1373, 1376, 1377, 1386], "90": [218, 256, 350, 730, 869, 889, 959, 1316, 1375, 1383], "90000": 821, "901234": [1039, 1129, 1254, 1358], "909": [255, 350, 888, 959], "910": [255, 350, 698, 888, 959, 1284], "910t": [691, 698, 1277, 1284], "914": [255, 350, 888, 959], "9223372036854775807": [753, 843], "9223372036854775808": [587, 843], "927295": 1383, "928571": [499, 843, 1119, 1358], "93": [1160, 1358], "94": [360, 843], "9477376373212048": [1160, 1358], "95": [18, 360, 843, 965], "95b3d7": [41, 350], "96": [18, 218, 350, 360, 843, 869, 959, 1160, 1358], "961": 60, "963624": [498, 843, 1118, 1358], "964028": [274, 350], "96_067_179": 1367, "97": [18, 245, 350, 360, 843, 1160, 1358], "9774092659964970114": [519, 843], "978307200": [457, 1070], "978307200000": 479, "978307200000000": [457, 479, 1070, 1096], "978307200000000000": 1096, "978393600": [457, 1070], "978393600000": 479, "978393600000000": [457, 479, 1070, 1096], "978393600000000000": 1096, "978480000": [457, 1070], "978480000000": 479, "978480000000000": [457, 479, 1070, 1096], "978480000000000000": 1096, "978738": 95, "98": [18, 245, 274, 350, 419, 513, 516, 684, 730, 748, 843, 1316], "987": [28, 598], "987000": 965, "9876": 9, "987654": [28, 965], "987654321": 11, "9876543210": 137, "987m": 965, "988": 11, "99": [18, 41, 229, 230, 245, 248, 274, 319, 350, 360, 419, 503, 505, 513, 516, 684, 748, 843, 877, 878, 926, 959, 1097, 1111, 1123, 1358, 1380], "9914e218": 179, "998347": [274, 350], "999": [450, 463, 965, 1063, 1079, 1349, 1358, 1378, 1389], "999000": 965, "999954": [274, 350], "999999": [473, 736, 784, 829, 830, 831, 965, 1090, 1097, 1322], "999999\u00b5": 965, "9bbb59": [41, 350], "A": [14, 38, 41, 47, 48, 51, 52, 53, 54, 62, 63, 68, 74, 129, 137, 141, 143, 148, 149, 150, 151, 163, 165, 170, 185, 215, 224, 233, 240, 255, 261, 263, 268, 274, 300, 303, 318, 319, 320, 324, 325, 350, 358, 425, 445, 446, 451, 477, 480, 494, 495, 503, 515, 517, 529, 532, 534, 535, 541, 581, 588, 589, 602, 616, 625, 626, 648, 654, 656, 658, 660, 662, 665, 667, 669, 689, 690, 691, 697, 698, 699, 700, 701, 702, 703, 706, 708, 712, 713, 714, 716, 727, 736, 771, 787, 788, 792, 843, 867, 874, 883, 888, 906, 926, 929, 930, 959, 965, 1034, 1058, 1059, 1064, 1094, 1097, 1113, 1123, 1222, 1245, 1246, 1248, 1251, 1252, 1253, 1275, 1276, 1277, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1292, 1294, 1298, 1299, 1300, 1302, 1313, 1322, 1358, 1367, 1368, 1371, 1384, 1386], "AND": [758, 759, 822, 965, 1377], "ANDs": [410, 843, 1019, 1358], "AS": [297, 350, 822, 823, 918, 959, 1367, 1374, 1375, 1376, 1377, 1378, 1380, 1381, 1382, 1383, 1384, 1386, 1388], "And": [734, 1320], "As": [13, 55, 96, 97, 130, 132, 133, 134, 136, 153, 157, 158, 167, 231, 278, 307, 312, 350, 581, 833, 879, 905, 959], "At": [47, 48, 49, 50, 51, 62, 63, 274, 350, 864, 865, 875, 902, 915, 959], "BY": [822, 918, 959, 1367, 1370, 1376, 1385, 1386], "Be": 959, "By": [5, 13, 15, 31, 34, 56, 148, 149, 163, 240, 254, 255, 282, 284, 293, 298, 320, 321, 350, 394, 470, 475, 488, 574, 577, 583, 631, 646, 651, 655, 657, 659, 661, 663, 666, 668, 670, 676, 687, 755, 775, 782, 783, 785, 786, 787, 803, 824, 830, 831, 832, 843, 864, 883, 887, 888, 908, 914, 919, 927, 959, 1003, 1087, 1092, 1105, 1195, 1238, 1262, 1273, 1348, 1358], "For": [15, 40, 41, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 222, 223, 226, 228, 254, 255, 274, 282, 307, 336, 350, 353, 467, 468, 480, 496, 498, 499, 510, 581, 590, 602, 643, 682, 689, 697, 698, 699, 701, 703, 727, 777, 787, 791, 792, 833, 839, 843, 872, 873, 888, 908, 942, 959, 1097, 1115, 1116, 1118, 1119, 1122, 1210, 1235, 1269, 1275, 1283, 1284, 1285, 1287, 1289, 1313, 1337, 1358, 1363], "IF": 1379, "If": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 61, 62, 63, 72, 130, 131, 132, 133, 134, 135, 136, 144, 145, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 163, 164, 166, 167, 168, 169, 172, 173, 174, 175, 180, 181, 182, 193, 207, 211, 223, 228, 231, 238, 240, 242, 250, 251, 252, 254, 255, 258, 259, 263, 270, 274, 278, 282, 284, 285, 286, 290, 293, 295, 297, 300, 301, 304, 305, 307, 308, 314, 315, 317, 318, 319, 350, 353, 362, 364, 387, 394, 399, 407, 421, 447, 451, 452, 459, 467, 468, 477, 480, 506, 521, 527, 531, 539, 560, 569, 574, 575, 581, 589, 590, 597, 598, 604, 606, 631, 636, 638, 641, 643, 645, 646, 647, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 676, 678, 682, 683, 688, 698, 699, 701, 703, 704, 705, 716, 717, 718, 719, 721, 722, 723, 726, 727, 728, 729, 733, 736, 754, 758, 760, 763, 767, 768, 769, 772, 773, 775, 777, 782, 783, 785, 786, 787, 790, 791, 797, 798, 799, 801, 802, 803, 805, 809, 815, 818, 819, 820, 825, 827, 830, 831, 833, 834, 843, 864, 865, 873, 875, 879, 883, 887, 888, 893, 897, 902, 904, 905, 906, 908, 912, 914, 915, 916, 918, 923, 925, 926, 934, 942, 952, 959, 964, 965, 972, 973, 996, 1003, 1008, 1016, 1029, 1042, 1060, 1064, 1065, 1072, 1084, 1085, 1094, 1097, 1122, 1139, 1140, 1145, 1150, 1159, 1160, 1164, 1181, 1190, 1195, 1196, 1202, 1210, 1229, 1231, 1233, 1235, 1237, 1238, 1239, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1256, 1258, 1260, 1262, 1265, 1269, 1270, 1274, 1284, 1285, 1287, 1289, 1290, 1291, 1298, 1302, 1303, 1304, 1305, 1307, 1308, 1309, 1312, 1313, 1314, 1315, 1319, 1322, 1330, 1333, 1337, 1339, 1347, 1358, 1363, 1367, 1368, 1370, 1378, 1381, 1386], "In": [56, 63, 150, 152, 164, 165, 168, 179, 183, 203, 208, 226, 228, 231, 240, 255, 256, 259, 270, 274, 282, 308, 317, 350, 353, 589, 590, 631, 651, 712, 713, 833, 843, 865, 883, 888, 889, 908, 925, 959, 1115, 1122, 1229, 1234, 1299, 1358, 1363], "It": [32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 72, 78, 95, 97, 140, 141, 142, 143, 144, 152, 158, 160, 161, 163, 164, 166, 167, 168, 169, 176, 177, 179, 180, 181, 182, 183, 184, 188, 189, 190, 191, 192, 193, 199, 205, 218, 256, 266, 273, 297, 307, 312, 319, 327, 336, 350, 353, 354, 439, 440, 447, 459, 521, 581, 590, 601, 638, 652, 653, 655, 657, 659, 661, 663, 664, 666, 668, 670, 768, 770, 801, 802, 833, 839, 843, 860, 864, 865, 869, 889, 893, 898, 918, 926, 933, 942, 959, 967, 1037, 1053, 1054, 1060, 1072, 1140, 1231, 1243, 1244, 1247, 1249, 1250, 1257, 1259, 1337, 1342, 1358, 1363], "Its": [241, 350, 519, 843, 1138, 1358], "NO": 965, "NOT": [133, 251, 291, 350, 581, 600, 675, 843, 913, 959, 1386], "No": [21, 254, 266, 350, 833, 887, 898, 959], "Not": [229, 254, 350, 504, 534, 535, 843, 864, 875, 877, 887, 902, 915, 959, 1124, 1358], "ON": 1386, "OR": [760, 761, 879, 959, 965, 1377], "ORs": [415, 843, 1024, 1358], "On": [750, 843, 891, 959], "One": [56, 218, 254, 270, 307, 312, 350, 363, 630, 762, 774, 790, 796, 799, 808, 810, 813, 814, 823, 843, 869, 887, 959, 965, 1055, 1358], "Or": [239, 240, 255, 282, 296, 320, 329, 350, 353, 497, 651, 685, 782, 783, 785, 786, 830, 831, 839, 843, 882, 883, 888, 908, 917, 935, 959, 1117, 1358], "That": [154, 893, 959], "The": [10, 21, 34, 38, 39, 40, 41, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 62, 63, 64, 65, 70, 71, 73, 74, 75, 83, 87, 88, 95, 97, 98, 100, 130, 132, 133, 134, 136, 137, 143, 145, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 163, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 179, 180, 181, 183, 185, 193, 210, 218, 219, 221, 222, 223, 224, 227, 228, 231, 238, 239, 240, 241, 246, 252, 254, 255, 256, 259, 266, 272, 274, 278, 282, 283, 284, 285, 288, 289, 290, 297, 302, 307, 308, 313, 316, 320, 324, 325, 327, 328, 329, 336, 350, 361, 402, 403, 404, 405, 419, 420, 439, 440, 442, 445, 446, 447, 455, 459, 466, 470, 471, 475, 477, 480, 488, 489, 496, 498, 499, 500, 503, 506, 510, 511, 519, 552, 556, 589, 590, 604, 631, 638, 641, 644, 645, 646, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 679, 682, 688, 692, 693, 697, 702, 703, 704, 705, 710, 711, 712, 713, 721, 722, 723, 724, 725, 726, 727, 737, 741, 747, 748, 749, 768, 771, 789, 793, 802, 803, 805, 819, 820, 821, 822, 825, 833, 835, 836, 838, 839, 843, 844, 845, 848, 850, 851, 852, 859, 864, 865, 869, 870, 872, 873, 875, 876, 879, 882, 883, 886, 887, 888, 889, 893, 898, 902, 905, 908, 910, 911, 912, 915, 918, 922, 924, 929, 930, 933, 935, 942, 959, 963, 964, 965, 971, 974, 1011, 1012, 1013, 1014, 1028, 1041, 1053, 1054, 1055, 1058, 1059, 1060, 1068, 1072, 1083, 1087, 1088, 1092, 1094, 1097, 1105, 1106, 1114, 1116, 1118, 1119, 1122, 1123, 1126, 1130, 1138, 1173, 1177, 1210, 1229, 1231, 1233, 1237, 1238, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1266, 1269, 1274, 1278, 1279, 1288, 1289, 1290, 1291, 1296, 1297, 1298, 1299, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1333, 1339, 1341, 1343, 1350, 1352, 1354, 1358, 1359, 1364, 1365, 1366, 1367, 1372, 1386, 1387, 1389], "Then": 168, "There": 1386, "These": [1, 33, 41, 139, 145, 150, 151, 203, 314, 350, 488, 842, 843, 1092, 1105], "To": [40, 63, 229, 350, 429, 445, 446, 504, 505, 689, 696, 697, 698, 701, 712, 713, 722, 723, 724, 725, 734, 843, 877, 959, 1042, 1058, 1059, 1124, 1275, 1282, 1283, 1284, 1287, 1298, 1299, 1320, 1339, 1358, 1386], "Will": [62, 63, 129, 864, 865, 875, 902, 915, 959, 1358], "With": [157, 250, 293, 350, 394, 574, 676, 843, 864, 914, 959, 1003, 1159, 1195, 1262, 1358], "_": [1, 56, 60, 203, 274, 305, 309, 350, 387, 424, 425, 560, 690, 698, 700, 702, 707, 708, 714, 717, 718, 1033, 1034, 1036, 1276, 1284, 1288, 1293, 1294, 1300, 1304, 1334, 1358], "__array_ufunc__": 967, "__call__": 839, "__enter__": 1386, "__exit__": 1386, "__getattr__": 839, "__getitem__": 737, "__init__": [1, 32, 33, 34, 35, 52, 53, 54, 55, 57, 58, 59, 60, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 140, 141, 142, 176, 188, 194, 195, 197, 198, 934, 1386], "__name__": [253, 350], "_bar_": 792, "_btm_by_a": [420, 843], "_btm_by_b": [420, 843], "_by_ca": [420, 749, 843], "_by_cb": [420, 749, 843], "_check_ord": [62, 63, 129, 864, 865, 875, 902, 915, 959], "_df": [1, 57], "_diff": [324, 350, 929, 959], "_eager": [581, 864, 959], "_expr": [1, 58], "_foo": 595, "_geventdataframeresult": [63, 865, 959], "_is_not_nan": [535, 843], "_is_odd": [288, 350, 910, 959], "_isnan": [534, 843], "_isnul": [537, 843], "_kwarg": [864, 902, 959], "_ldf": 1, "_lf": 59, "_lower_boundari": [240, 350, 883, 959], "_mean_squar": [329, 935], "_not_nul": [536, 843], "_o": [424, 425, 707, 708, 1033, 1034, 1293, 1294], "_revers": [615, 619, 648, 843], "_right": [254, 255, 256, 350, 887, 888, 889, 959], "_storage_account": 34, "_suffix": 620, "_sum": [329, 935], "_top_by_a": [749, 843], "_top_by_b": [749, 843], "_train": [931, 959], "_type": [904, 959], "_type_check": [48, 49, 50, 51, 62, 63, 129, 864, 865, 875, 902, 915, 959], "_upper_boundari": [240, 350, 883, 959], "_world": 792, "a1": [41, 57, 59, 350], "a101": 1389, "a123": [41, 350], "a2": [41, 57, 59, 350], "a_1": [718, 1304, 1334, 1358], "a_2": [1334, 1358], "a_3": [1334, 1358], "a_a": 823, "a_agg_list": [240, 350, 883, 959], "a_b_doubl": 788, "a_btm_by_a": [420, 843], "a_btm_by_b": [420, 843], "a_by_ca": [420, 749, 843], "a_by_cb": [420, 749, 843], "a_div_2": 1380, "a_div_5": 1380, "a_interpol": [526, 843], "a_is_even": [297, 350, 822, 918, 959], "a_isnul": [537, 843], "a_lag_": 771, "a_log2": 1380, "a_mod_2": 1380, "a_not_nul": [536, 843], "a_revers": [615, 619, 648, 843], "a_rol": 771, "a_suffix": 620, "a_times_2": [590, 843], "a_times_b": [589, 843], "a_top_by_a": [749, 843], "a_top_by_b": [749, 843], "a_txt": 823, "aa": [500, 689, 701, 789, 843, 965, 1055, 1275, 1287, 1358, 1381], "aaa": [1, 41, 350, 689, 701, 737, 739, 740, 965, 1275, 1287], "aaaa": [1013, 1014], "aabcdef": 723, "aad": [1013, 1014], "aag": 27, "aazz": 1381, "ab": [242, 258, 301, 324, 350, 713, 737, 739, 740, 843, 929, 959, 965, 1139, 1164, 1330, 1358, 1379, 1381], "ab12": 713, "ab12cd34ef": 713, "abc": [7, 17, 19, 20, 21, 22, 23, 24, 25, 26, 359, 695, 698, 712, 722, 843, 965, 1281, 1284, 1298, 1299, 1381], "abc123": 1381, "abc456": [712, 1298, 1299, 1381], "abcabc": 713, "abcd": 1381, "abcdeff": 722, "abf": [152, 164, 165], "abl": [104, 150, 581], "about": [52, 53, 54, 104, 143, 145, 150, 682, 689, 697, 698, 701, 712, 713, 843, 1269, 1275, 1283, 1284, 1287, 1298, 1299, 1358, 1389], "abov": [41, 255, 274, 350, 353, 888, 959], "abs_a": 1380, "absolut": [145, 152, 164, 165, 172, 173, 174, 175, 358, 496, 498, 499, 843, 970, 1116, 1118, 1119, 1358, 1380], "acc": [777, 778, 791, 817], "accent": 965, "accept": [38, 43, 47, 48, 49, 50, 51, 54, 143, 145, 146, 148, 149, 152, 154, 156, 158, 160, 163, 166, 167, 168, 179, 193, 210, 220, 239, 288, 289, 293, 296, 313, 324, 325, 329, 350, 359, 420, 429, 500, 527, 631, 645, 646, 685, 714, 741, 749, 757, 759, 761, 766, 769, 770, 771, 772, 780, 789, 807, 809, 812, 821, 825, 827, 833, 839, 843, 859, 871, 882, 910, 911, 914, 917, 922, 929, 930, 935, 959, 964, 1042, 1145, 1229, 1237, 1238, 1262, 1300, 1358], "access": [38, 43, 47, 48, 49, 50, 51, 57, 58, 59, 60, 154, 158, 160, 163, 165, 166, 167, 168, 193, 207, 214, 252, 283, 284, 297, 350, 699, 737, 866, 918, 931, 959, 964, 1285, 1389], "accord": [283, 350, 638, 782, 783, 785, 786, 830, 831, 843, 1074, 1231, 1358], "accordingli": [143, 146, 148, 149, 154, 155, 156, 157, 158, 159, 160, 161, 162], "account": [41, 137, 151, 165, 350, 470, 496, 498, 499, 843, 1087, 1116, 1118, 1119, 1358], "accumul": [777, 778, 791, 817], "acg": 27, "achiev": [259, 274, 336, 350, 425, 590, 708, 843, 1034, 1210, 1294, 1358], "aco": 1379, "acosd": 1379, "across": [41, 56, 151, 153, 219, 241, 254, 261, 263, 268, 290, 300, 350, 442, 519, 604, 759, 761, 777, 778, 780, 807, 809, 812, 827, 843, 870, 887, 912, 959, 1138, 1358], "action": [40, 350], "activ": [7, 8, 19, 20, 22, 23, 24, 25, 29, 30, 553, 698, 1174, 1284], "actual": [41, 133, 179, 183, 285, 350, 1264, 1358, 1381, 1388], "ad": [39, 41, 133, 153, 240, 297, 307, 312, 314, 319, 324, 325, 350, 365, 480, 503, 597, 598, 741, 777, 778, 822, 843, 883, 918, 926, 929, 930, 959, 965, 1097, 1123, 1337, 1342, 1358], "adbc": [39, 150, 151, 350], "adbc_driver_manag": 171, "adbc_ingest": [39, 350], "add": [40, 41, 42, 47, 51, 149, 228, 240, 259, 324, 325, 326, 327, 350, 353, 440, 617, 618, 619, 620, 638, 741, 787, 791, 833, 843, 883, 887, 929, 930, 931, 932, 933, 959, 1122, 1358, 1363], "add_calendar_dai": 787, "add_calendar_month": 787, "add_calendar_year": 787, "add_chart": [41, 350], "add_dai": 787, "add_format": [41, 350], "add_hour": 787, "add_milli": 787, "add_second": 787, "add_seri": [41, 350], "add_week": 787, "add_worksheet": [41, 350], "addit": [30, 37, 39, 40, 41, 133, 147, 152, 153, 164, 165, 177, 179, 181, 183, 193, 223, 227, 239, 257, 272, 288, 289, 296, 309, 316, 324, 325, 329, 350, 359, 456, 500, 503, 631, 685, 689, 697, 698, 701, 712, 713, 737, 741, 766, 769, 770, 771, 772, 789, 821, 822, 825, 839, 843, 876, 882, 910, 911, 917, 924, 929, 930, 935, 959, 965, 1061, 1069, 1123, 1275, 1283, 1284, 1287, 1298, 1299, 1340, 1358, 1368, 1386], "addition": [64, 153, 283, 350, 965], "address": 698, "adjac": [41, 350], "adjust": [496, 498, 499, 682, 843, 1116, 1118, 1119, 1269, 1358], "adl": [152, 164, 165], "adlf": 165, "advanc": [41, 274, 350, 399, 581, 614, 617, 619, 621, 622, 1008, 1202, 1389], "advantag": [41, 203, 273, 350], "advis": [41, 55, 97, 350], "aedt": 784, "aeiuo": [701, 1287], "af1": 56, "af2": 56, "af3": 56, "affect": [39, 172, 173, 174, 175, 350], "afm": 165, "afoo": [931, 959], "after": [41, 133, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 210, 211, 228, 313, 316, 350, 419, 420, 421, 447, 500, 631, 641, 736, 748, 749, 768, 843, 859, 922, 924, 959, 1028, 1060, 1122, 1233, 1322, 1343, 1358, 1373], "afterward": [55, 833], "ag": [266, 350, 898, 959, 1387], "again": [590, 843], "against": [39, 106, 148, 150, 231, 278, 297, 350, 553, 701, 822, 879, 905, 918, 959, 1174, 1287, 1367, 1386, 1388, 1389], "agg": [239, 240, 274, 282, 350, 360, 410, 415, 418, 420, 506, 508, 513, 516, 589, 590, 631, 684, 685, 749, 756, 782, 785, 805, 843, 864, 865, 875, 882, 883, 902, 904, 908, 915, 959, 965], "agg_group": [794, 843], "agg_list": [589, 843], "aggreg": [145, 148, 149, 152, 160, 164, 233, 239, 240, 260, 262, 264, 267, 270, 274, 275, 276, 282, 298, 299, 318, 321, 329, 330, 332, 334, 350, 360, 410, 415, 418, 506, 522, 589, 590, 631, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 758, 759, 760, 761, 777, 778, 779, 780, 791, 796, 806, 807, 809, 811, 812, 817, 826, 827, 843, 883, 893, 894, 895, 896, 899, 900, 903, 908, 919, 920, 927, 935, 936, 938, 940, 959, 1019, 1024, 1027, 1141, 1244, 1245, 1246, 1248, 1251, 1252, 1253, 1358, 1374, 1376, 1379, 1385], "aggregate_funct": [274, 350, 965], "aho": [690, 700, 702, 714, 1276, 1286, 1288, 1300], "aiosqlit": 150, "alchemy_conn": 150, "algorithm": [209, 350, 366, 690, 700, 702, 714, 762, 843, 858, 959, 975, 1276, 1286, 1288, 1300, 1358], "alia": [1, 13, 56, 58, 60, 64, 94, 196, 200, 214, 240, 245, 258, 274, 282, 316, 324, 327, 350, 353, 359, 363, 402, 403, 404, 405, 406, 409, 419, 422, 424, 425, 426, 434, 435, 436, 437, 438, 440, 443, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 487, 488, 489, 490, 491, 494, 495, 508, 510, 511, 515, 517, 523, 524, 527, 530, 533, 541, 543, 565, 577, 583, 588, 590, 594, 597, 598, 600, 602, 607, 610, 612, 614, 625, 626, 630, 632, 636, 638, 641, 643, 672, 674, 689, 690, 691, 692, 694, 695, 697, 698, 700, 701, 702, 703, 707, 708, 714, 715, 716, 717, 718, 719, 720, 724, 725, 727, 737, 738, 739, 740, 742, 747, 748, 750, 756, 757, 763, 764, 765, 769, 770, 771, 772, 782, 785, 787, 788, 791, 792, 797, 800, 801, 804, 805, 817, 821, 825, 830, 833, 843, 883, 885, 892, 908, 924, 929, 933, 959, 1011, 1054, 1061, 1062, 1065, 1068, 1069, 1070, 1071, 1077, 1078, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1091, 1092, 1094, 1096, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1130, 1164, 1231, 1236, 1283, 1284, 1288, 1299, 1304, 1305, 1358], "alias": [297, 350, 597, 598, 918, 959], "alic": [148, 1387], "align": [11, 16, 17, 41, 56, 64, 350, 1387], "align_fram": 64, "align_ful": 64, "align_inn": 64, "align_left": 64, "align_right": 64, "all": [1, 4, 5, 8, 14, 18, 21, 26, 31, 38, 40, 41, 47, 48, 49, 50, 51, 56, 62, 69, 115, 117, 130, 131, 135, 144, 148, 149, 152, 153, 154, 156, 158, 159, 160, 163, 164, 166, 167, 176, 177, 180, 183, 203, 208, 209, 211, 218, 220, 222, 223, 230, 242, 247, 249, 251, 252, 253, 254, 256, 257, 258, 263, 265, 269, 270, 274, 277, 279, 283, 284, 285, 289, 295, 296, 300, 301, 305, 307, 308, 312, 315, 317, 318, 319, 320, 325, 327, 350, 353, 363, 365, 387, 420, 433, 439, 445, 446, 447, 448, 459, 480, 488, 500, 505, 518, 519, 522, 525, 529, 532, 536, 537, 542, 552, 553, 560, 578, 581, 589, 611, 614, 615, 617, 618, 619, 620, 621, 622, 629, 631, 641, 646, 648, 653, 677, 683, 685, 691, 695, 698, 699, 703, 706, 709, 713, 721, 722, 723, 727, 749, 759, 768, 770, 777, 778, 779, 780, 789, 791, 796, 797, 800, 809, 817, 825, 826, 827, 833, 839, 843, 849, 855, 858, 861, 864, 865, 869, 871, 872, 873, 875, 878, 887, 889, 893, 897, 902, 906, 911, 915, 916, 917, 923, 925, 926, 930, 931, 933, 959, 965, 996, 1053, 1055, 1058, 1059, 1060, 1061, 1072, 1097, 1105, 1139, 1146, 1158, 1164, 1173, 1174, 1181, 1199, 1202, 1233, 1238, 1244, 1270, 1277, 1281, 1284, 1285, 1288, 1289, 1292, 1299, 1307, 1308, 1309, 1313, 1330, 1339, 1358, 1362, 1363, 1368, 1370, 1375, 1376, 1381, 1385, 1386, 1388, 1389], "all_compat": 1370, "all_data": 1386, "all_horizont": [222, 223, 350, 758, 833, 872, 873, 959], "all_stat": 31, "alloc": [145, 148, 149, 226, 277, 350, 843, 934, 1115, 1358], "allow": [1, 8, 40, 41, 48, 49, 50, 51, 55, 64, 97, 106, 131, 150, 153, 163, 165, 166, 167, 168, 169, 176, 179, 180, 183, 203, 207, 252, 255, 257, 283, 284, 286, 308, 309, 312, 315, 328, 350, 422, 426, 470, 477, 480, 569, 589, 590, 597, 598, 643, 673, 726, 728, 729, 843, 887, 888, 893, 897, 904, 923, 931, 959, 963, 965, 1087, 1094, 1097, 1190, 1210, 1235, 1256, 1312, 1314, 1315, 1339, 1340, 1358, 1381, 1389], "allow_alias": [597, 598], "allow_chunk": [179, 183], "allow_copi": [131, 207, 308, 350, 1339, 1358], "allow_dupl": [638, 843, 1231, 1358], "allow_exact_match": [255, 350, 888, 959], "allow_infin": [179, 183], "allow_masked_out": [179, 183], "allow_missing_column": [160, 168], "allow_nul": [176, 179, 183, 1389], "allow_object": 803, "allow_parallel": [255, 350, 887, 888, 959], "allow_pyarrow_filt": 169, "allow_time_zon": [179, 180, 183], "allowed_dtyp": [179, 180, 183, 1389], "almost": [63, 259, 336, 350, 726, 728, 729, 865, 959, 963, 1210, 1312, 1314, 1315, 1358], "along": [38, 40, 43, 47, 48, 49, 50, 51, 152, 158, 160, 163, 164, 166, 167, 168, 193, 350, 959], "alpha": [496, 498, 499, 843, 965, 1116, 1118, 1119, 1358], "alpha_i": [497, 843, 1117, 1358], "alphabet": [965, 1389], "alphanumer": [734, 965, 1320], "alreadi": [39, 40, 105, 307, 350, 439, 553, 605, 754, 843, 915, 959, 1053, 1174, 1347, 1358], "also": [28, 38, 41, 48, 49, 50, 51, 55, 62, 63, 133, 150, 153, 154, 159, 160, 163, 168, 178, 179, 182, 183, 188, 197, 203, 224, 239, 240, 266, 270, 274, 282, 284, 288, 296, 307, 319, 324, 327, 350, 435, 438, 447, 459, 470, 474, 480, 506, 527, 590, 597, 598, 631, 641, 645, 646, 685, 712, 713, 714, 721, 722, 737, 768, 777, 778, 781, 784, 791, 793, 817, 833, 842, 843, 849, 864, 865, 875, 882, 883, 898, 902, 908, 910, 915, 917, 926, 929, 931, 933, 959, 965, 1060, 1072, 1091, 1145, 1233, 1237, 1238, 1277, 1298, 1299, 1300, 1307, 1358, 1362, 1368, 1370, 1373, 1377, 1381, 1384, 1386, 1387], "alt": [350, 353, 1358, 1363], "altair": [171, 350, 353, 1358, 1363], "altern": [41, 188, 350, 839, 1378], "although": [297, 350, 918, 959], "alwai": [14, 38, 40, 48, 54, 72, 78, 148, 154, 158, 160, 210, 239, 254, 255, 259, 313, 336, 350, 419, 420, 589, 601, 726, 748, 749, 833, 843, 859, 887, 888, 893, 922, 959, 965, 1028, 1210, 1312, 1343, 1358, 1367, 1368, 1386, 1389], "am": [715, 1301], "amarillo": 1381, "amaz": [350, 353, 1358, 1363], "amazonaw": 33, "ambigu": [473, 474, 475, 488, 726, 729, 784, 1090, 1091, 1092, 1105, 1312, 1315], "america": 785, "amount": [52, 55, 73, 97, 158, 163, 166, 167, 590, 787, 843, 1375], "amsterdam": [474, 1091], "an": [1, 31, 34, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 57, 59, 60, 64, 72, 73, 74, 95, 102, 106, 109, 112, 119, 121, 130, 132, 133, 136, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 163, 164, 165, 166, 167, 168, 177, 179, 183, 193, 212, 213, 214, 220, 226, 229, 233, 235, 240, 251, 252, 253, 255, 256, 259, 270, 274, 279, 280, 282, 283, 287, 297, 302, 308, 312, 314, 318, 319, 324, 327, 336, 350, 353, 361, 383, 386, 398, 402, 404, 410, 413, 415, 416, 418, 435, 436, 437, 438, 439, 440, 447, 451, 452, 470, 474, 477, 491, 497, 505, 506, 511, 512, 513, 516, 550, 553, 556, 558, 580, 581, 589, 590, 602, 604, 614, 615, 636, 637, 638, 646, 647, 651, 653, 654, 656, 658, 660, 662, 665, 667, 669, 688, 689, 692, 698, 701, 705, 726, 728, 729, 731, 733, 747, 750, 758, 763, 767, 769, 773, 775, 782, 783, 785, 786, 788, 790, 793, 797, 798, 799, 800, 801, 802, 803, 815, 817, 818, 821, 825, 830, 831, 833, 834, 839, 843, 861, 862, 863, 865, 869, 871, 875, 879, 883, 888, 889, 893, 906, 908, 909, 918, 926, 929, 931, 933, 934, 942, 956, 959, 963, 964, 965, 992, 995, 1007, 1011, 1013, 1019, 1022, 1024, 1025, 1027, 1041, 1043, 1049, 1050, 1051, 1052, 1053, 1060, 1064, 1094, 1108, 1115, 1117, 1130, 1159, 1171, 1174, 1177, 1179, 1201, 1210, 1238, 1239, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1257, 1259, 1274, 1275, 1278, 1284, 1287, 1291, 1312, 1314, 1315, 1317, 1319, 1339, 1341, 1358, 1376, 1378, 1381, 1385, 1386, 1388], "ana": [715, 1301], "anan": [715, 1301], "ananab": 1381, "and_": 843, "ang": 1381, "angl": [764, 765], "ani": [4, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 61, 63, 71, 72, 78, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 169, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 190, 191, 192, 193, 199, 203, 205, 208, 210, 216, 220, 222, 223, 228, 230, 231, 233, 235, 250, 252, 253, 254, 255, 256, 259, 263, 273, 278, 279, 283, 284, 285, 297, 300, 303, 304, 307, 308, 309, 312, 313, 315, 318, 319, 327, 350, 353, 354, 359, 362, 363, 387, 419, 420, 421, 439, 440, 447, 459, 476, 494, 495, 505, 506, 510, 513, 515, 517, 521, 531, 541, 548, 553, 560, 570, 571, 572, 573, 588, 589, 590, 597, 607, 610, 612, 614, 615, 617, 619, 621, 622, 625, 626, 630, 635, 638, 645, 646, 647, 652, 653, 655, 657, 659, 661, 663, 664, 666, 668, 670, 674, 678, 688, 690, 704, 722, 723, 724, 725, 726, 728, 729, 731, 733, 742, 748, 749, 750, 757, 758, 759, 761, 768, 770, 772, 773, 774, 801, 802, 803, 805, 809, 827, 833, 843, 859, 864, 865, 871, 872, 873, 878, 879, 887, 888, 889, 901, 902, 905, 906, 918, 922, 923, 926, 933, 934, 959, 963, 965, 967, 969, 972, 996, 1028, 1037, 1053, 1054, 1060, 1072, 1093, 1112, 1113, 1122, 1125, 1131, 1133, 1135, 1140, 1150, 1159, 1162, 1169, 1174, 1181, 1191, 1192, 1193, 1194, 1209, 1210, 1221, 1222, 1231, 1237, 1238, 1239, 1243, 1244, 1247, 1249, 1250, 1257, 1258, 1274, 1276, 1290, 1312, 1314, 1315, 1317, 1319, 1337, 1338, 1339, 1340, 1342, 1343, 1358, 1363, 1386, 1389], "anna": [266, 350, 898, 959], "annex": [709, 1295], "announc": [904, 959], "anoth": [99, 178, 211, 219, 225, 239, 255, 290, 350, 439, 442, 449, 526, 556, 594, 600, 604, 645, 655, 657, 659, 661, 663, 666, 668, 670, 701, 843, 861, 870, 882, 888, 912, 931, 959, 1053, 1062, 1114, 1122, 1144, 1177, 1237, 1238, 1287, 1358, 1380, 1381], "anti": [254, 350, 887, 942, 959, 1257, 1259, 1358, 1374], "antipattern": [148, 154, 158, 160], "any_horizont": [760, 833], "anyth": [40, 283, 350], "anywher": [406, 409, 726, 728, 729, 1312, 1314, 1315], "ap": 1381, "apach": [36, 43, 44, 47, 131, 146, 150, 151, 154, 156, 165, 206, 350, 968], "apaya": [727, 1313], "api": [0, 33, 38, 43, 47, 48, 49, 50, 51, 131, 158, 160, 163, 166, 167, 168, 169, 188, 193, 207, 259, 336, 350, 590, 805, 843, 942, 959, 1210, 1358, 1385], "apia": [448, 1061], "app": [426, 720, 1035, 1306], "appear": [41, 68, 133, 174, 175, 350, 713, 752, 843, 965, 1345, 1358, 1387], "append": [39, 40, 42, 179, 228, 254, 255, 256, 350, 642, 833, 843, 887, 888, 889, 959, 1122, 1358], "appl": [215, 244, 254, 279, 280, 303, 331, 332, 334, 335, 337, 338, 339, 340, 341, 342, 343, 350, 420, 422, 426, 648, 694, 720, 749, 843, 887, 906, 937, 938, 940, 941, 943, 944, 945, 946, 947, 948, 949, 959, 1030, 1035, 1280, 1306, 1374, 1381], "appli": [11, 21, 38, 41, 48, 62, 64, 129, 143, 150, 163, 176, 179, 183, 203, 218, 233, 256, 259, 273, 296, 297, 307, 336, 350, 375, 450, 453, 454, 455, 458, 460, 461, 462, 463, 464, 465, 466, 469, 471, 472, 476, 478, 489, 490, 492, 498, 499, 589, 590, 635, 654, 655, 656, 657, 660, 661, 667, 668, 685, 712, 713, 726, 728, 729, 733, 766, 777, 778, 791, 804, 805, 817, 822, 833, 843, 869, 889, 893, 901, 917, 918, 942, 959, 1042, 1063, 1066, 1067, 1068, 1071, 1073, 1074, 1078, 1079, 1080, 1082, 1083, 1086, 1088, 1089, 1093, 1095, 1106, 1107, 1109, 1118, 1119, 1210, 1245, 1246, 1248, 1252, 1298, 1299, 1312, 1314, 1315, 1319, 1358, 1367], "applic": [54, 308, 350, 590, 843], "apply_on_context_ent": 203, "appropri": [41, 169, 231, 278, 308, 350, 480, 641, 843, 879, 905, 959, 1097, 1233, 1358], "approx": [366, 843], "approx_n_uniqu": [350, 843, 959, 1358], "approxim": [47, 209, 350, 366, 497, 762, 843, 858, 959, 975, 1117, 1358, 1380, 1389], "april": [477, 1094, 1381, 1382], "ar": [1, 11, 12, 18, 21, 31, 33, 35, 38, 40, 41, 43, 47, 48, 49, 50, 51, 52, 54, 55, 56, 62, 63, 64, 95, 96, 97, 104, 110, 126, 130, 131, 132, 133, 134, 135, 136, 137, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 163, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 177, 179, 180, 181, 183, 193, 203, 207, 210, 211, 216, 218, 222, 223, 226, 229, 231, 232, 233, 238, 239, 240, 252, 254, 255, 256, 257, 259, 265, 266, 272, 274, 278, 282, 283, 284, 285, 288, 289, 293, 296, 303, 307, 308, 309, 312, 313, 317, 319, 320, 324, 325, 328, 329, 350, 362, 364, 378, 394, 399, 419, 420, 421, 429, 435, 437, 438, 447, 475, 480, 488, 493, 495, 496, 497, 498, 499, 504, 506, 521, 527, 529, 531, 532, 534, 535, 536, 537, 539, 544, 574, 581, 589, 626, 631, 638, 641, 644, 645, 646, 647, 651, 652, 655, 657, 659, 661, 663, 664, 666, 668, 670, 676, 679, 682, 684, 685, 690, 699, 703, 705, 706, 710, 711, 712, 713, 714, 716, 727, 729, 731, 736, 741, 743, 747, 748, 749, 758, 759, 761, 766, 769, 770, 771, 772, 773, 780, 782, 783, 785, 786, 801, 802, 807, 809, 812, 821, 825, 827, 830, 831, 833, 835, 836, 838, 842, 843, 844, 845, 848, 849, 850, 851, 852, 855, 859, 864, 865, 869, 872, 873, 877, 879, 882, 883, 887, 888, 889, 893, 897, 898, 902, 904, 905, 906, 908, 910, 911, 914, 915, 917, 922, 925, 926, 929, 930, 931, 935, 959, 963, 965, 972, 973, 987, 1003, 1008, 1028, 1032, 1042, 1051, 1052, 1060, 1092, 1097, 1105, 1111, 1113, 1115, 1116, 1117, 1118, 1119, 1124, 1126, 1128, 1140, 1145, 1148, 1150, 1151, 1153, 1154, 1155, 1156, 1160, 1165, 1195, 1202, 1222, 1231, 1233, 1237, 1238, 1239, 1243, 1250, 1262, 1266, 1269, 1276, 1285, 1289, 1291, 1296, 1297, 1298, 1299, 1302, 1313, 1315, 1317, 1322, 1329, 1337, 1339, 1340, 1341, 1343, 1350, 1352, 1354, 1358, 1359, 1362, 1364, 1365, 1366, 1368, 1370, 1373, 1378, 1386, 1389], "arbitrari": [52, 85, 235, 350, 442, 843, 870, 959, 965], "arbitrarili": [259, 350], "arcco": [843, 1358], "arccosh": [843, 1358], "arcsin": [843, 1358], "arcsinh": [843, 1358], "arctan": [764, 765, 843, 1358], "arctan2": 765, "arctanh": [843, 1358], "aren": [38, 48, 350, 959], "arg": [32, 55, 66, 67, 69, 70, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 93, 145, 196, 200, 231, 273, 278, 350, 375, 635, 766, 792, 843, 879, 901, 905, 959, 1210, 1358, 1371], "arg_max": [843, 1358], "arg_min": [843, 1358], "arg_sort": [843, 1358], "arg_tru": [767, 843, 1358], "arg_uniqu": [843, 1358], "arg_wher": [376, 843], "argmax": [589, 843], "argument": [37, 40, 47, 95, 143, 145, 147, 148, 152, 160, 163, 164, 179, 181, 183, 193, 216, 220, 227, 239, 240, 255, 272, 273, 282, 288, 289, 296, 309, 316, 320, 324, 325, 329, 350, 447, 475, 488, 500, 506, 527, 589, 631, 635, 651, 685, 721, 722, 723, 730, 741, 758, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 789, 821, 825, 833, 839, 843, 871, 876, 882, 883, 888, 901, 908, 910, 911, 917, 924, 929, 930, 935, 956, 959, 965, 1060, 1092, 1105, 1145, 1307, 1308, 1309, 1316, 1340, 1358, 1380, 1381], "aris": 150, "arithmet": [233, 350], "arm": 171, "arm64": 171, "around": [38, 48, 350, 959], "arr": [308, 350, 835, 1339, 1350, 1358, 1381], "arr_bar": 1376, "arr_foo": 1376, "arrai": [130, 134, 148, 149, 152, 160, 164, 205, 226, 227, 302, 307, 308, 309, 350, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 407, 435, 436, 437, 438, 548, 563, 564, 565, 566, 568, 577, 578, 580, 583, 585, 589, 647, 654, 656, 658, 660, 662, 665, 667, 669, 675, 747, 770, 788, 802, 822, 843, 876, 959, 964, 967, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1016, 1049, 1050, 1051, 1052, 1057, 1115, 1169, 1184, 1185, 1186, 1187, 1189, 1197, 1198, 1199, 1201, 1204, 1206, 1207, 1239, 1245, 1246, 1248, 1251, 1252, 1253, 1260, 1264, 1333, 1337, 1339, 1340, 1341, 1358, 1379, 1381, 1385, 1388], "array_agg": 1379, "array_contain": 1379, "array_get": 1379, "array_length": 1379, "array_low": 1379, "array_mean": 1379, "array_revers": 1379, "array_sum": 1379, "array_to_str": 1379, "array_uniqu": 1379, "array_upp": 1379, "arraylik": [1057, 1358], "arrow": [43, 44, 49, 130, 131, 150, 151, 154, 156, 166, 206, 252, 284, 285, 302, 304, 308, 350, 959, 968, 1333, 1339, 1358], "arrowarrayexport": [130, 131], "arrowinvaliderror": [40, 350], "arrowstreamexport": [130, 131], "as_": [1358, 1363], "as_arrai": 802, "as_dict": [149, 272, 350], "as_expr": 965, "as_seri": [211, 303, 350, 861, 959, 965], "asarrai": [205, 967], "ascend": [240, 266, 282, 350, 631, 651, 843, 883, 898, 908, 959], "ascii": [7, 21, 424, 425, 690, 700, 702, 703, 707, 708, 714, 716, 727, 736, 965, 1033, 1034, 1276, 1286, 1288, 1289, 1293, 1294, 1300, 1302, 1313, 1322], "ascii_borders_onli": 21, "ascii_borders_only_condens": 21, "ascii_case_insensit": [690, 700, 702, 714, 1276, 1286, 1288, 1300], "ascii_ful": 21, "ascii_full_condens": 21, "ascii_horizontal_onli": 21, "ascii_lett": 1389, "ascii_markdown": 21, "ascii_no_bord": 21, "ascii_onli": 965, "ascii_t": 203, "ascii_uppercas": [318, 350], "asd": [691, 698, 1277, 1284], "asia": [137, 965, 1066, 1067, 1095], "asid": 480, "asin": 1379, "asind": 1379, "asof": [255, 350, 888, 959], "asofjoinstrategi": [255, 350, 888, 959], "assert": [172, 173, 174, 175, 179, 183, 282, 350, 855, 965], "assert_frame_equ": [173, 174, 225, 350, 1389], "assert_frame_not_equ": [172, 175], "assert_series_equ": [172, 175, 1114, 1358, 1389], "assert_series_not_equ": [173, 174], "assert_someth": 177, "assertionerror": [172, 173, 174, 175], "assign": [177, 240, 335, 350, 399, 581, 631, 641, 718, 719, 843, 883, 941, 959, 1008, 1202, 1233, 1304, 1305, 1358], "associ": [39, 41, 56, 151, 153, 178, 181, 285, 350, 964, 1369, 1371, 1375], "assum": [33, 285, 350, 893, 942, 959, 1381], "assume_rol": 33, "assumpt": [589, 843], "async": [62, 63, 150, 865, 959], "async_engin": 150, "asynchron": [63, 150, 865, 959], "asyncio": [63, 150, 865, 959], "asyncresult": [63, 865, 959], "asyncsurrealdb": 150, "ata": 27, "atan": 1379, "atan2": [764, 765, 1379], "atan2_ab": 1383, "atan2d": [765, 1379], "atan2d_ab": 1383, "atand": 1379, "atg": 27, "atgataaaggag": 27, "atol": [172, 173, 174, 175], "attain": [685, 843], "attempt": [1, 10, 48, 49, 50, 51, 62, 63, 442, 843, 864, 865, 870, 875, 902, 915, 959], "attr": [350, 353, 1358, 1363], "attribut": [65, 68, 71, 72, 73, 74, 75, 83, 87, 140, 141, 142, 176, 194, 195, 197, 198, 350, 353, 835, 836, 838, 839, 844, 845, 848, 850, 851, 852, 934, 959, 1350, 1352, 1354, 1358, 1359, 1363, 1364, 1365, 1366], "attributeerror": 1, "audi": [303, 350, 648, 843], "august": 480, "australia": 784, "auth": 35, "authent": [40, 152, 160, 163, 164, 165, 166, 168, 188, 350], "author": 1, "auto": [10, 38, 40, 43, 47, 48, 49, 50, 51, 62, 63, 64, 130, 132, 133, 134, 136, 152, 157, 158, 160, 163, 164, 166, 167, 168, 188, 193, 314, 350, 864, 865, 875, 902, 915, 959, 1389], "auto_structifi": [288, 324, 350, 910, 929, 959], "autofilt": [41, 350], "autofit": [41, 350], "autogener": [148, 149, 153, 159, 163], "automat": [8, 38, 48, 64, 130, 132, 133, 134, 136, 137, 145, 148, 149, 150, 151, 157, 158, 160, 163, 165, 166, 167, 179, 183, 185, 188, 288, 297, 324, 350, 589, 646, 721, 722, 723, 822, 843, 910, 918, 929, 959, 1237, 1238, 1307, 1308, 1309, 1342, 1358, 1368, 1370, 1373, 1386], "autumn": [712, 713], "avail": [41, 47, 51, 139, 150, 151, 152, 161, 164, 165, 177, 190, 191, 192, 203, 274, 297, 349, 350, 480, 641, 822, 835, 836, 838, 842, 843, 844, 845, 848, 849, 850, 851, 852, 855, 918, 957, 958, 959, 965, 1055, 1233, 1350, 1352, 1354, 1358, 1359, 1362, 1364, 1365, 1366, 1377], "available_timezon": [71, 965], "averag": [41, 350, 496, 497, 498, 499, 641, 843, 1116, 1117, 1118, 1119, 1233, 1358, 1375], "avg": 1379, "avocado": 1381, "avoid": [179, 183, 231, 278, 284, 350, 361, 843, 879, 905, 959], "avro": [36, 146, 196, 350, 855], "avrocompress": [36, 350], "aw": [33, 38, 43, 47, 48, 49, 50, 51, 152, 158, 160, 163, 164, 166, 167, 168, 193, 350, 959], "awai": 1380, "await": [63, 150, 865, 953, 959], "await_result": [904, 959], "awar": [11, 150, 252, 284, 285, 304, 350, 497, 690, 700, 702, 714, 729, 843, 959, 1117, 1276, 1286, 1288, 1300, 1315, 1358], "aws_access_key_id": [40, 152, 164, 168, 350], "aws_region": [40, 164, 168, 350], "aws_secret_access_kei": [40, 152, 164, 168, 350], "awsassumerolekwarg": 33, "axi": [265, 317, 350, 353, 764, 765, 897, 925, 959, 1358, 1363], "aya": [716, 1302, 1313], "az": [152, 164, 165], "azur": [34, 38, 40, 43, 47, 48, 49, 50, 51, 152, 158, 160, 163, 164, 165, 166, 167, 168, 193, 350, 959], "azure_storage_account_kei": [152, 164, 165], "azure_storage_account_nam": [152, 164, 165], "b": [1, 11, 36, 38, 40, 43, 44, 47, 52, 59, 64, 87, 95, 101, 104, 130, 131, 132, 133, 134, 135, 136, 137, 144, 148, 150, 153, 207, 208, 209, 210, 212, 213, 214, 215, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 236, 237, 238, 239, 240, 241, 242, 244, 245, 247, 249, 250, 251, 252, 253, 254, 257, 258, 260, 262, 264, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 293, 295, 296, 297, 298, 299, 301, 302, 303, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 350, 353, 359, 361, 362, 364, 365, 375, 377, 382, 387, 403, 404, 405, 406, 407, 408, 409, 410, 415, 418, 420, 421, 433, 440, 444, 477, 480, 500, 502, 504, 505, 506, 508, 518, 519, 522, 525, 526, 527, 529, 532, 534, 535, 536, 537, 542, 548, 553, 560, 570, 571, 572, 573, 589, 590, 595, 611, 614, 615, 616, 617, 618, 619, 620, 628, 629, 631, 635, 638, 641, 645, 646, 648, 650, 677, 683, 685, 692, 696, 701, 705, 712, 713, 737, 738, 749, 752, 756, 758, 759, 760, 761, 762, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 788, 789, 790, 791, 792, 795, 796, 797, 799, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 819, 820, 822, 824, 825, 826, 827, 828, 832, 839, 843, 858, 859, 862, 863, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 887, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 905, 906, 907, 909, 910, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 931, 932, 933, 935, 936, 937, 938, 939, 940, 941, 943, 944, 945, 946, 947, 948, 949, 950, 959, 965, 971, 974, 996, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1032, 1036, 1037, 1054, 1057, 1094, 1097, 1111, 1114, 1115, 1122, 1125, 1145, 1150, 1169, 1191, 1192, 1193, 1194, 1231, 1236, 1278, 1282, 1287, 1291, 1298, 1299, 1323, 1325, 1326, 1328, 1340, 1345, 1349, 1358, 1368, 1370, 1371, 1373, 1374, 1375, 1376, 1381, 1382, 1383, 1386], "b1": [57, 59], "b2": [57, 59], "b345": [41, 350], "b4": [41, 350], "b_b": [297, 350], "b_btm_by_a": [420, 843], "b_btm_by_b": [420, 843], "b_by_ca": [420, 749, 843], "b_by_cb": [420, 749, 843], "b_div_a": [245, 350], "b_is_not_nan": [535, 843], "b_isnan": [534, 843], "b_isnul": [537, 843], "b_not_nul": [536, 843], "b_revers": [615, 619, 648, 843], "b_suffix": 620, "b_sum": [329, 935], "b_top_by_a": [749, 843], "b_top_by_b": [749, 843], "ba": [442, 500, 604, 720, 789, 843, 965], "back": [4, 56, 168, 228, 240, 290, 308, 309, 350, 604, 631, 713, 843, 864, 875, 883, 902, 912, 915, 934, 959, 1122, 1340, 1358], "backend": [40, 150, 151, 152, 164, 165, 350, 353, 1358, 1363], "background": [62, 63, 350, 354, 864, 865, 958, 959], "backward": [47, 51, 230, 255, 350, 402, 447, 468, 505, 843, 878, 888, 959, 1011, 1060, 1085, 1125, 1358], "backward_fil": [505, 511, 843, 1125, 1130, 1358], "bad": [712, 713, 1298, 1299], "balanc": [182, 184, 1389], "ballon_dor": [697, 699, 1283, 1285], "banana": [215, 303, 332, 334, 337, 338, 339, 340, 341, 342, 343, 350, 420, 648, 694, 720, 749, 843, 938, 940, 943, 944, 945, 946, 947, 948, 949, 1381], "banded_column": [41, 350], "banded_row": [41, 350], "bar": [36, 38, 40, 43, 44, 45, 46, 47, 144, 157, 158, 211, 214, 215, 216, 220, 221, 222, 223, 224, 225, 228, 231, 233, 235, 236, 237, 242, 244, 245, 246, 248, 254, 258, 259, 260, 261, 262, 263, 264, 267, 268, 271, 274, 276, 278, 279, 280, 283, 286, 287, 288, 290, 295, 298, 299, 300, 301, 302, 304, 305, 306, 308, 309, 310, 315, 316, 321, 322, 323, 328, 350, 353, 423, 442, 524, 594, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 682, 691, 693, 696, 698, 699, 715, 717, 719, 724, 725, 762, 773, 774, 775, 790, 795, 796, 799, 800, 806, 808, 810, 811, 813, 814, 821, 824, 828, 832, 833, 839, 843, 861, 866, 867, 871, 872, 873, 874, 879, 885, 886, 887, 900, 905, 906, 909, 910, 923, 924, 928, 959, 964, 965, 1031, 1181, 1269, 1277, 1279, 1282, 1284, 1285, 1301, 1305, 1310, 1311, 1358, 1372, 1374, 1375, 1376, 1378, 1381, 1384], "bar2": 1381, "bar22": [233, 350], "bar_": 717, "bar_3": [305, 350], "bar_4": [305, 350], "bar_a": [274, 350], "bar_at_2": 1376, "bar_avg": 1375, "bar_b": [274, 350], "bar_color": [41, 350], "bar_max": 1375, "bar_median": 1375, "bar_min": 1375, "bar_negative_border_color_sam": [41, 350], "bar_negative_color_sam": [41, 350], "bar_std": 1375, "bar_sum": 1375, "bar_var": 1375, "bare": [597, 598, 965], "base": [32, 41, 52, 53, 54, 69, 115, 117, 153, 181, 223, 231, 240, 256, 278, 282, 350, 448, 456, 493, 496, 497, 498, 499, 506, 521, 526, 584, 585, 589, 590, 636, 638, 646, 651, 655, 657, 659, 661, 663, 666, 668, 670, 731, 791, 843, 879, 883, 889, 905, 908, 959, 965, 1061, 1069, 1111, 1116, 1117, 1118, 1119, 1140, 1144, 1205, 1206, 1210, 1229, 1231, 1237, 1238, 1317, 1349, 1358, 1374, 1380, 1389], "base64": [404, 405, 692, 693, 1013, 1014, 1278, 1279], "base_nam": [314, 350], "base_path": [52, 53, 54], "base_utc_offset": [456, 1069], "baseexcept": 1386, "basepartitioncontext": 53, "basi": [41, 153, 179, 350], "basic": [41, 205, 350, 596, 967, 1389], "basic_chart": [41, 350], "batch": [44, 95, 139, 143, 149, 150, 156, 158, 167, 169, 284, 312, 350, 864, 893, 959], "batch_siz": [38, 48, 143, 148, 149, 150, 158, 167, 169, 312, 350, 959], "batchedcsvread": 149, "baz": [235, 245, 246, 316, 350, 699, 717, 719, 790, 799, 814, 839, 886, 924, 959, 964, 965, 1285, 1305, 1372, 1378, 1381], "bb": [965, 1055, 1358, 1381, 1386], "bbb": [1, 41, 350, 737, 739, 740, 965], "bc": [701, 713, 826, 1287], "bcbc45": 1381, "bea": 13, "bear": 965, "bearer": 188, "bearer_token": 188, "beauti": 13, "becaus": [158, 167, 226, 240, 257, 259, 318, 336, 350, 510, 553, 581, 843, 883, 942, 959, 1115, 1174, 1210, 1358], "becom": [181, 349, 957, 958], "bed3": [41, 350], "been": [5, 31, 41, 186, 207, 331, 350, 512, 590, 608, 641, 843, 937, 1233, 1358], "beetl": [303, 350, 648, 843], "befor": [41, 48, 49, 50, 51, 52, 70, 71, 143, 145, 148, 150, 153, 163, 169, 172, 173, 174, 175, 185, 203, 228, 240, 255, 297, 307, 312, 316, 350, 413, 414, 416, 417, 437, 438, 439, 589, 631, 632, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 696, 736, 743, 771, 819, 820, 843, 883, 885, 888, 924, 959, 1022, 1023, 1025, 1026, 1051, 1052, 1053, 1122, 1226, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1282, 1322, 1329, 1358, 1374], "beforehand": [726, 728, 729, 1312, 1314, 1315], "begin": [13, 41, 246, 350, 496, 498, 499, 525, 526, 697, 727, 843, 886, 959, 1116, 1118, 1119, 1143, 1144, 1283, 1313, 1358], "behav": [231, 278, 350, 506, 590, 722, 723, 833, 843, 879, 905, 959], "behavior": [47, 51, 160, 168, 222, 223, 231, 254, 255, 350, 386, 512, 556, 558, 696, 790, 799, 843, 872, 873, 887, 888, 956, 959, 995, 1177, 1179, 1282], "behaviour": [11, 56, 222, 223, 231, 278, 297, 350, 689, 697, 698, 701, 712, 713, 750, 822, 843, 872, 873, 879, 905, 918, 959, 1275, 1283, 1284, 1287, 1298, 1299], "behind": 185, "being": [14, 32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 63, 72, 78, 140, 141, 142, 143, 144, 148, 149, 150, 152, 153, 158, 159, 160, 161, 163, 164, 166, 167, 168, 169, 176, 177, 179, 180, 181, 182, 183, 184, 188, 189, 190, 191, 192, 193, 199, 211, 227, 256, 297, 305, 307, 312, 319, 350, 353, 354, 439, 440, 447, 459, 521, 590, 638, 652, 653, 655, 657, 659, 661, 663, 664, 666, 668, 670, 696, 768, 770, 788, 801, 802, 833, 843, 861, 864, 865, 876, 889, 918, 926, 959, 1037, 1053, 1054, 1060, 1072, 1140, 1231, 1243, 1244, 1247, 1249, 1250, 1282, 1334, 1337, 1342, 1358, 1363, 1389], "belong": [1, 240, 350, 883, 959], "below": [20, 40, 152, 153, 164, 165, 223, 231, 274, 278, 350, 480, 505, 703, 712, 713, 727, 782, 783, 785, 786, 830, 831, 833, 839, 843, 879, 905, 959, 1097, 1289, 1298, 1299, 1313], "best": [165, 259, 336, 350, 590, 843, 1210, 1358], "better": [259, 307, 308, 336, 350, 425, 590, 708, 843, 860, 942, 959, 1034, 1257, 1259, 1294, 1358], "between": [25, 64, 100, 176, 177, 179, 183, 208, 216, 254, 266, 276, 284, 342, 350, 387, 421, 443, 444, 480, 527, 551, 560, 570, 571, 572, 573, 632, 638, 639, 662, 663, 688, 704, 764, 765, 768, 773, 775, 802, 816, 819, 820, 843, 887, 898, 903, 948, 959, 996, 1029, 1036, 1056, 1057, 1097, 1145, 1172, 1181, 1191, 1192, 1193, 1194, 1226, 1231, 1232, 1249, 1274, 1290, 1349, 1358, 1375, 1383], "between_ab": [527, 843], "beyond": [52, 734, 1320], "bia": [498, 499, 539, 652, 664, 682, 843, 1118, 1119, 1160, 1243, 1250, 1269, 1358], "bias": [539, 682, 843, 1160, 1269, 1358], "big": [149, 407, 1016], "big_fil": 149, "bigidx": 138, "bigqueri": 151, "bigquery_format": 196, "bin": [440, 521, 638, 731, 757, 836, 843, 1054, 1140, 1231, 1317, 1352, 1358, 1363], "bin2int": 407, "bin_count": [521, 843, 1140, 1358], "bin_i": [757, 843], "bin_x": [757, 843], "bin_xor_xi": [757, 843], "binari": [41, 43, 144, 150, 219, 290, 350, 403, 404, 405, 406, 407, 408, 409, 442, 604, 692, 843, 870, 912, 959, 965, 1012, 1013, 1015, 1016, 1017, 1018, 1278, 1377], "binary_str": [757, 843], "bind": 153, "birthdai": 148, "bit": [70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 88, 89, 90, 91, 92, 411, 412, 413, 414, 416, 417, 643, 689, 843, 1020, 1022, 1023, 1025, 1026, 1235, 1275, 1358, 1377, 1381], "bit_and": 1379, "bit_count": 1379, "bit_length": 1379, "bit_or": 1379, "bit_xor": 1379, "bitmap": [226, 350, 1115, 1358], "bitwis": [363, 410, 415, 418, 630, 757, 758, 759, 760, 761, 843, 1019, 1024, 1027, 1358, 1379, 1385], "bitwise_and": [843, 1358], "bitwise_count_on": [843, 1358], "bitwise_count_zero": [843, 1358], "bitwise_leading_on": [843, 1358], "bitwise_leading_zero": [843, 1358], "bitwise_or": [843, 1358], "bitwise_trailing_on": [843, 1358], "bitwise_trailing_zero": [843, 1358], "bitwise_xor": [843, 1358], "bla": [691, 698, 1277, 1284], "black": [259, 350, 403, 404, 405, 406, 409], "blindli": [553, 1174], "block": [21, 63, 239, 315, 350, 865, 882, 906, 923, 932, 933, 942, 959, 1257, 1259, 1358], "blue": [55, 96, 97, 403, 404, 405, 406, 409, 754, 843, 1347, 1358], "bob": [148, 266, 350, 898, 959, 1387], "bodi": [41, 350, 354], "bold": [41, 350], "bom": [38, 48, 350, 959], "bool": [5, 7, 8, 9, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 38, 40, 41, 47, 48, 49, 50, 51, 52, 54, 56, 62, 63, 64, 95, 96, 129, 130, 131, 132, 133, 135, 136, 137, 143, 144, 145, 148, 149, 150, 152, 153, 154, 156, 158, 159, 160, 163, 164, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 188, 205, 207, 210, 211, 212, 213, 218, 220, 225, 230, 231, 232, 233, 237, 238, 239, 240, 244, 247, 248, 249, 252, 254, 255, 263, 272, 274, 278, 279, 283, 284, 285, 286, 291, 294, 296, 297, 300, 303, 305, 308, 309, 313, 314, 315, 316, 319, 320, 322, 324, 332, 334, 337, 340, 350, 361, 362, 363, 364, 365, 375, 378, 379, 382, 386, 387, 395, 400, 403, 404, 406, 409, 420, 421, 422, 426, 434, 435, 436, 437, 438, 439, 440, 447, 459, 460, 476, 493, 494, 495, 496, 498, 499, 515, 517, 518, 521, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 544, 545, 549, 553, 556, 558, 560, 569, 576, 581, 582, 588, 589, 590, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 625, 626, 628, 630, 631, 633, 634, 638, 641, 643, 652, 653, 654, 656, 658, 660, 662, 664, 665, 667, 669, 673, 675, 677, 682, 684, 685, 688, 689, 690, 691, 692, 694, 700, 701, 702, 704, 712, 713, 714, 717, 718, 720, 726, 728, 729, 731, 733, 737, 739, 740, 749, 751, 754, 757, 758, 759, 760, 761, 763, 766, 767, 768, 769, 772, 773, 775, 776, 777, 782, 783, 785, 786, 791, 797, 798, 801, 802, 803, 805, 809, 815, 818, 821, 822, 825, 827, 830, 831, 833, 834, 843, 859, 861, 862, 864, 865, 869, 871, 875, 878, 879, 882, 883, 887, 888, 893, 897, 902, 905, 906, 913, 915, 917, 918, 922, 923, 924, 925, 926, 929, 934, 938, 940, 943, 946, 959, 964, 965, 967, 972, 973, 984, 987, 988, 991, 995, 996, 1004, 1009, 1012, 1013, 1015, 1018, 1029, 1030, 1032, 1035, 1037, 1041, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1060, 1072, 1073, 1093, 1111, 1113, 1114, 1116, 1118, 1119, 1126, 1128, 1136, 1137, 1140, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1160, 1165, 1166, 1170, 1174, 1177, 1179, 1181, 1190, 1197, 1203, 1210, 1222, 1224, 1227, 1228, 1231, 1233, 1234, 1235, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1256, 1259, 1260, 1264, 1269, 1271, 1274, 1275, 1276, 1277, 1278, 1280, 1286, 1287, 1288, 1290, 1298, 1299, 1300, 1303, 1304, 1306, 1312, 1314, 1315, 1317, 1319, 1334, 1339, 1340, 1344, 1347, 1358, 1367, 1368, 1370, 1376, 1381, 1386], "boolean": [56, 95, 179, 210, 231, 233, 278, 296, 313, 350, 362, 363, 364, 378, 379, 382, 403, 406, 409, 420, 459, 460, 506, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 544, 545, 549, 628, 630, 633, 634, 685, 705, 749, 756, 757, 766, 767, 825, 833, 843, 859, 879, 905, 917, 922, 959, 965, 972, 973, 985, 987, 988, 991, 1012, 1072, 1073, 1126, 1145, 1146, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1165, 1166, 1170, 1224, 1227, 1228, 1259, 1275, 1349, 1358, 1378], "border": 21, "both": [11, 26, 38, 48, 55, 96, 97, 150, 153, 168, 214, 240, 254, 255, 256, 266, 282, 283, 309, 319, 350, 365, 429, 440, 480, 500, 527, 638, 651, 655, 657, 659, 661, 663, 666, 668, 670, 716, 782, 783, 785, 786, 801, 802, 830, 831, 833, 839, 843, 854, 883, 887, 888, 889, 898, 908, 915, 926, 959, 965, 1042, 1097, 1145, 1302, 1340, 1358, 1386, 1387], "boto3": 33, "bottom": [210, 350, 420, 843, 859, 959], "bottom_k": [313, 350, 420, 748, 749, 843, 922, 959, 1343, 1358], "bottom_k_bi": [419, 748, 749, 843], "bound": [111, 148, 149, 226, 240, 350, 386, 429, 527, 556, 558, 581, 587, 753, 763, 782, 783, 785, 786, 801, 802, 830, 831, 843, 883, 959, 995, 1042, 1115, 1145, 1177, 1179, 1208, 1346, 1358, 1376], "boundari": [240, 350, 429, 734, 843, 883, 959, 1042, 1320, 1358], "box": [21, 259, 350], "box_draw": 21, "branch": [62, 63, 129, 833, 864, 865, 875, 902, 915, 959], "break": [32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 63, 72, 78, 140, 141, 142, 143, 144, 152, 158, 160, 161, 163, 164, 166, 167, 168, 169, 176, 177, 179, 180, 181, 182, 183, 184, 188, 189, 190, 191, 192, 193, 199, 254, 256, 297, 307, 312, 319, 350, 353, 354, 439, 440, 447, 459, 521, 590, 638, 652, 653, 655, 657, 659, 661, 663, 664, 666, 668, 670, 768, 770, 801, 802, 843, 864, 865, 887, 889, 918, 926, 959, 1037, 1053, 1054, 1060, 1072, 1140, 1231, 1243, 1244, 1247, 1249, 1250, 1337, 1342, 1358, 1363], "breakpoint": [440, 521, 638, 843, 1054, 1140, 1231, 1358], "breezah": 163, "breviti": 203, "broadcast": [714, 770, 965, 1300], "broader": 965, "brotli": [47, 51, 350, 959], "brussel": [474, 1091], "bst": [452, 456, 474, 1065, 1069, 1091], "bucket": [40, 152, 164, 165, 168, 350, 475, 488, 521, 843, 1092, 1105, 1140, 1358], "bud": [712, 713, 1298, 1299], "budget": 1367, "buffer": [52, 148, 149, 150, 226, 252, 350, 407, 1016, 1115, 1358], "buffer_s": [252, 350], "bug": [95, 143, 589, 590, 843, 893, 942, 959, 1210, 1358], "build": [61, 131, 965, 1389], "built": 100, "builtin": [146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 219, 350, 442, 843, 870, 959], "bundl": 203, "busi": [447, 459, 768, 1060, 1072], "by_alternate_row": 1, "by_dtyp": 965, "by_first_letter_of_column_nam": 57, "by_first_letter_of_column_valu": 57, "by_index": 965, "by_left": [255, 350, 888, 959], "by_nam": 965, "by_pred": [283, 350], "by_right": [255, 350, 888, 959], "bye": 1, "byi": 1381, "bys": [240, 350, 883, 959], "byte": [36, 38, 41, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 144, 146, 147, 148, 149, 154, 155, 156, 157, 158, 161, 162, 163, 166, 167, 219, 226, 290, 350, 407, 424, 425, 442, 604, 701, 702, 703, 707, 708, 716, 727, 843, 870, 912, 959, 1016, 1033, 1034, 1115, 1287, 1288, 1289, 1293, 1294, 1302, 1313, 1358, 1381], "bytesio": [41, 43, 44, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 219, 290, 350, 442, 604, 843, 870, 912, 959], "c": [1, 11, 36, 38, 40, 43, 44, 47, 52, 57, 59, 64, 104, 131, 133, 135, 137, 145, 153, 163, 207, 208, 210, 211, 212, 213, 214, 215, 217, 220, 221, 222, 223, 224, 225, 227, 231, 233, 236, 237, 238, 239, 240, 242, 244, 245, 253, 254, 257, 258, 260, 262, 264, 267, 269, 270, 271, 272, 274, 275, 276, 278, 279, 280, 281, 283, 286, 287, 288, 295, 296, 297, 298, 299, 301, 302, 305, 306, 307, 308, 309, 310, 313, 317, 318, 319, 321, 322, 324, 329, 332, 333, 334, 337, 338, 340, 343, 344, 350, 354, 359, 361, 362, 364, 382, 420, 440, 480, 518, 527, 548, 560, 590, 597, 614, 615, 629, 631, 635, 638, 677, 718, 726, 749, 752, 759, 761, 762, 764, 765, 766, 769, 770, 772, 773, 774, 775, 777, 778, 780, 790, 791, 792, 795, 796, 799, 800, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 822, 824, 826, 827, 828, 832, 839, 843, 859, 861, 862, 863, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 879, 882, 883, 887, 891, 900, 902, 905, 906, 907, 909, 910, 915, 916, 917, 918, 922, 925, 926, 929, 931, 935, 938, 939, 940, 943, 944, 946, 949, 950, 959, 965, 1036, 1054, 1145, 1169, 1231, 1304, 1312, 1326, 1345, 1358, 1368, 1370, 1371, 1373, 1374, 1375, 1376, 1381, 1386], "c00": 965, "c01": 965, "c02": 965, "c03": 965, "c05": 965, "c1": 399, "c123": 1381, "c2": 399, "c20": 965, "c25": 965, "c3": 399, "c40": 965, "c45": 1381, "c4d79b": [41, 350], "c50": 965, "c567": [41, 350], "c60": 965, "c75": 965, "c80": 965, "c8ae6d2b276": [41, 350], "c93": 965, "c95": 965, "c96": 965, "c97": 965, "c98": 965, "c99": 965, "c_btm_by_a": [420, 843], "c_btm_by_b": [420, 843], "c_by_ca": [420, 749, 843], "c_by_cb": [420, 749, 843], "c_c_c": [822, 918, 959], "c_contigu": [308, 350], "c_max": [631, 843], "c_mean_squar": [329, 935], "c_min": [631, 843], "c_top_by_a": [749, 843], "c_top_by_b": [749, 843], "c_total": 1386, "cach": [55, 62, 63, 96, 97, 124, 129, 154, 163, 166, 168, 172, 173, 174, 175, 187, 645, 646, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 726, 728, 729, 733, 843, 854, 864, 865, 875, 902, 915, 959, 1032, 1237, 1238, 1312, 1314, 1315, 1319, 1358], "cadi": [274, 350], "cafe": [731, 1317], "caf\u00e9": [424, 425, 707, 708, 965, 1033, 1034, 1293, 1294], "calamin": 153, "calcul": [41, 47, 51, 56, 218, 240, 298, 321, 350, 443, 496, 497, 498, 499, 539, 551, 570, 577, 583, 587, 652, 664, 682, 687, 753, 755, 775, 819, 820, 824, 832, 843, 869, 883, 919, 927, 959, 1055, 1056, 1116, 1117, 1118, 1119, 1160, 1172, 1191, 1243, 1250, 1269, 1273, 1348, 1358], "calendar": [70, 71, 240, 255, 282, 320, 350, 450, 461, 463, 470, 475, 488, 492, 497, 651, 655, 657, 659, 661, 663, 666, 668, 670, 782, 783, 785, 786, 787, 830, 831, 843, 883, 888, 908, 959, 1063, 1074, 1079, 1087, 1092, 1105, 1109, 1117, 1358], "calendar_year": [461, 492], "call": [10, 38, 40, 41, 43, 47, 48, 49, 50, 51, 55, 62, 63, 129, 135, 143, 145, 148, 149, 150, 152, 153, 154, 158, 160, 163, 164, 166, 167, 168, 172, 173, 174, 175, 179, 183, 193, 203, 210, 239, 240, 257, 259, 282, 297, 308, 313, 349, 350, 419, 420, 435, 438, 447, 459, 589, 590, 614, 615, 617, 619, 621, 622, 645, 646, 678, 748, 749, 768, 774, 839, 843, 859, 864, 865, 875, 882, 883, 902, 908, 915, 918, 922, 956, 957, 958, 959, 965, 1028, 1060, 1072, 1210, 1238, 1265, 1339, 1343, 1358, 1368, 1372, 1386], "callabl": [52, 53, 54, 57, 58, 59, 60, 95, 143, 163, 233, 259, 273, 279, 336, 350, 399, 581, 589, 590, 615, 616, 635, 653, 777, 778, 791, 804, 805, 817, 843, 893, 901, 906, 942, 959, 1008, 1202, 1210, 1244, 1358], "callback": [47, 51, 52, 53, 54, 140, 142, 350, 959], "caller": [95, 151, 266, 350, 581, 893, 898, 942, 959], "cam": [279, 350, 906, 959], "can": [1, 15, 28, 38, 40, 41, 43, 47, 48, 49, 50, 51, 52, 55, 56, 62, 70, 71, 73, 87, 95, 96, 97, 133, 143, 148, 149, 150, 152, 153, 154, 158, 159, 160, 163, 164, 166, 167, 168, 169, 177, 178, 179, 183, 185, 188, 193, 203, 205, 210, 212, 222, 223, 224, 233, 235, 239, 240, 247, 249, 251, 254, 255, 259, 270, 274, 282, 284, 285, 288, 290, 291, 296, 307, 308, 312, 313, 314, 318, 324, 327, 336, 350, 353, 362, 399, 420, 435, 438, 439, 442, 447, 459, 467, 468, 470, 474, 477, 480, 488, 497, 503, 506, 527, 553, 581, 589, 590, 597, 601, 604, 605, 611, 614, 615, 617, 619, 621, 622, 631, 636, 638, 643, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 675, 677, 682, 685, 690, 699, 706, 712, 713, 714, 721, 722, 723, 726, 737, 749, 766, 768, 781, 784, 791, 793, 797, 798, 801, 805, 822, 833, 839, 842, 843, 854, 859, 860, 864, 865, 870, 872, 873, 875, 883, 887, 888, 908, 910, 912, 913, 915, 917, 918, 922, 929, 932, 933, 959, 965, 967, 1008, 1053, 1060, 1072, 1084, 1085, 1087, 1091, 1092, 1094, 1097, 1105, 1117, 1123, 1145, 1174, 1202, 1210, 1215, 1229, 1231, 1235, 1238, 1257, 1259, 1260, 1263, 1269, 1276, 1277, 1285, 1292, 1298, 1299, 1300, 1307, 1308, 1309, 1312, 1337, 1339, 1358, 1363, 1373, 1386], "cancel": [864, 959], "candid": [697, 699, 1283, 1285], "cannot": [1, 47, 48, 49, 50, 51, 62, 63, 106, 109, 148, 149, 153, 154, 156, 158, 159, 160, 168, 185, 203, 255, 259, 285, 286, 308, 327, 336, 350, 404, 480, 500, 569, 590, 605, 673, 692, 718, 739, 805, 843, 864, 865, 875, 888, 902, 915, 933, 934, 942, 959, 965, 1013, 1097, 1190, 1210, 1256, 1278, 1304, 1339, 1358], "capabl": [1, 41, 350], "capac": [226, 294, 350, 1115, 1264, 1358], "capit": [734, 1320], "captur": [697, 699, 712, 713, 1283, 1285, 1298, 1299], "car": [279, 303, 350, 648, 843, 906, 959], "cardin": [209, 350, 366, 762, 843, 858, 959, 975, 1358], "care": [41, 291, 350, 590, 631, 675, 843, 913, 959, 1260, 1358], "cars_revers": [648, 843], "cartesian": [254, 350, 887, 959], "case": [41, 55, 56, 63, 95, 104, 130, 132, 133, 134, 136, 143, 145, 150, 157, 158, 167, 168, 185, 228, 240, 252, 259, 274, 282, 284, 285, 304, 307, 308, 350, 448, 497, 589, 601, 602, 615, 631, 651, 689, 690, 698, 700, 701, 702, 712, 713, 714, 734, 833, 843, 865, 883, 905, 908, 959, 965, 1061, 1117, 1122, 1275, 1276, 1284, 1286, 1287, 1288, 1298, 1299, 1300, 1320, 1337, 1358], "cast": [1, 40, 58, 59, 130, 132, 133, 136, 145, 172, 173, 174, 175, 233, 240, 273, 282, 307, 308, 312, 324, 350, 365, 437, 438, 449, 477, 480, 491, 630, 635, 636, 643, 645, 651, 705, 706, 736, 743, 747, 771, 772, 823, 843, 883, 901, 908, 929, 959, 965, 1037, 1051, 1052, 1062, 1094, 1097, 1108, 1229, 1235, 1291, 1292, 1322, 1329, 1335, 1339, 1341, 1342, 1358, 1379], "cast_str_to_int": [273, 350, 901, 959], "cast_to_supertyp": [145, 843], "cat": [27, 55, 96, 97, 440, 638, 689, 691, 732, 735, 747, 772, 838, 843, 965, 1054, 1140, 1231, 1275, 1277, 1318, 1321, 1354, 1358], "catalog": [0, 855], "catalog_nam": [189, 191, 192, 193], "cataloginfo": [190, 201], "categor": [40, 55, 74, 96, 97, 99, 172, 173, 174, 175, 254, 305, 350, 422, 423, 424, 425, 426, 440, 638, 645, 646, 747, 843, 965, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1054, 1231, 1237, 1238, 1341, 1358], "categori": [41, 55, 74, 97, 305, 350, 423, 440, 521, 638, 843, 1031, 1054, 1140, 1231, 1334, 1358], "categorical_as_str": [172, 173, 174, 175], "categoricalord": 68, "categoricaltyp": [302, 350], "caus": [112, 121, 131, 148, 149, 150, 163, 207, 228, 308, 350, 589, 843, 1122, 1339, 1358], "cba": 723, "cbrt": [843, 1358, 1379], "cbrt_a": 1380, "cc": [500, 789, 843, 965, 1055, 1358, 1381], "ccc": [1, 41, 350, 737, 739, 740, 965, 1381], "ccy": 1389, "cd": [713, 737, 739, 740, 965], "cd34": 713, "cdatainterfac": [131, 206, 968], "cde": [965, 1381], "cdt": [475, 488, 1092, 1105], "ceil": [58, 843, 1358, 1379], "ceil_a": 1380, "cell": [16, 17, 41, 274, 350], "cent": [450, 1298], "center": [16, 17, 41, 350, 496, 498, 499, 652, 653, 654, 656, 658, 660, 662, 664, 665, 667, 669, 843, 1116, 1118, 1119, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1358], "central": [164, 165, 203, 539, 682, 843, 1160, 1269, 1358], "centuri": 1382, "certain": [48, 49, 50, 51, 52, 63, 245, 320, 350, 722, 723, 839, 864, 865, 902, 959, 1358], "certainli": [726, 728, 729, 1312, 1314, 1315], "cest": [474, 1091], "cet": [474, 1091], "cfg": [2, 4, 18, 203], "cfg_ascii_fram": 203, "cfg_markdown": 203, "cfg_verbos": 203, "cfoo": [931, 959], "chain": [614, 615, 617, 619, 621, 622, 833], "chanc": [176, 179, 183, 1389], "chang": [31, 32, 33, 34, 35, 38, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 56, 63, 72, 78, 131, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 152, 153, 154, 156, 158, 160, 161, 163, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 188, 189, 190, 191, 192, 193, 199, 210, 240, 254, 256, 274, 282, 297, 302, 307, 312, 313, 319, 320, 326, 350, 353, 354, 420, 439, 440, 443, 447, 459, 480, 496, 498, 499, 521, 590, 631, 632, 638, 645, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 730, 749, 768, 770, 801, 802, 819, 820, 833, 843, 859, 864, 865, 883, 887, 889, 908, 918, 922, 926, 932, 959, 965, 1036, 1037, 1053, 1054, 1060, 1072, 1097, 1114, 1116, 1118, 1119, 1140, 1226, 1231, 1237, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1264, 1316, 1333, 1337, 1342, 1358, 1363, 1386], "changes_length": [145, 843], "char": [28, 148, 163, 698, 1284], "char_length": 1381, "charact": [7, 9, 13, 21, 27, 28, 29, 38, 39, 48, 98, 147, 148, 149, 151, 163, 350, 424, 425, 470, 695, 696, 698, 703, 707, 708, 710, 711, 712, 713, 716, 717, 718, 721, 722, 723, 724, 725, 727, 734, 736, 902, 959, 965, 1033, 1034, 1087, 1281, 1282, 1284, 1289, 1293, 1294, 1296, 1297, 1298, 1299, 1302, 1303, 1304, 1307, 1308, 1309, 1313, 1320, 1322, 1381], "character_length": 1381, "characterist": [179, 183], "charli": [148, 1387], "chart": [41, 350, 353, 902, 959, 1358, 1363], "cheap": [212, 213, 289, 325, 350, 862, 863, 911, 930, 959, 1041, 1043, 1358], "cheaper": [556, 1177], "check": [40, 71, 106, 148, 149, 163, 172, 173, 174, 175, 187, 225, 250, 254, 255, 350, 382, 403, 406, 409, 422, 426, 518, 527, 531, 549, 689, 694, 701, 720, 843, 887, 888, 893, 959, 991, 1012, 1015, 1018, 1030, 1035, 1114, 1136, 1137, 1147, 1150, 1157, 1159, 1170, 1275, 1280, 1287, 1306, 1358], "check_column_ord": [172, 173], "check_dtyp": [172, 173, 174, 175, 964, 1114, 1358], "check_exact": [172, 173, 174, 175], "check_nam": [174, 175, 1114, 1358], "check_ord": [174, 175], "check_row_ord": [172, 173], "check_sorted": [255, 350, 888, 959], "choos": [47, 49, 51, 240, 274, 350, 480, 883, 959, 1097], "chrono": [38, 48, 100, 350, 477, 480, 726, 728, 729, 733, 959, 1094, 1097, 1312, 1314, 1315, 1319, 1381, 1382], "chunk": [15, 51, 139, 148, 149, 152, 158, 160, 163, 164, 166, 167, 168, 179, 183, 228, 253, 269, 308, 350, 365, 642, 843, 959, 974, 1040, 1122, 1134, 1216, 1234, 1333, 1339, 1358], "chunk_length": 1358, "chunkedarrai": [130, 269, 350], "citi": [712, 713], "clang": 171, "clariti": [283, 350], "class": [1, 18, 32, 33, 34, 35, 52, 53, 54, 55, 57, 58, 59, 60, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 115, 117, 140, 141, 142, 176, 177, 188, 194, 195, 197, 198, 285, 290, 350, 604, 801, 830, 839, 843, 849, 855, 867, 874, 909, 928, 934, 959, 964, 1338, 1358, 1362, 1370, 1386], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 219, 350, 442, 512, 843, 870, 959, 1368, 1386], "claus": [855, 1376, 1385], "clean": [726, 728, 729, 1312, 1314, 1315], "cleaner": 203, "cleanli": [11, 238, 350, 1386], "clear": [55, 96, 213, 350, 863, 959, 1043, 1358], "clearer": 133, "clickhous": 151, "client": [33, 150, 188], "clip": [843, 1358], "clipboard": [37, 147, 350, 855], "clone": [132, 133, 134, 135, 136, 212, 308, 350, 862, 959, 1041, 1358], "close": [41, 48, 49, 50, 51, 53, 150, 240, 282, 297, 350, 440, 527, 586, 638, 651, 655, 657, 659, 661, 663, 666, 668, 670, 682, 782, 783, 785, 786, 801, 802, 830, 831, 843, 883, 908, 918, 959, 1054, 1145, 1231, 1269, 1358], "closedinterv": [240, 282, 350, 527, 651, 655, 657, 659, 661, 663, 666, 668, 670, 782, 783, 785, 786, 801, 802, 830, 831, 843, 883, 908, 959, 1145, 1358], "closest": [130, 255, 350, 888, 959, 1375, 1380], "closur": [655, 657, 666, 668, 670, 843], "cloud": [35, 38, 40, 43, 47, 48, 49, 50, 51, 95, 150, 152, 158, 160, 163, 164, 165, 166, 167, 168, 169, 193, 350, 855, 904, 959], "cloudi": [712, 713], "cloudpickl": 171, "cluster": 168, "cluster_with_column": [62, 63, 129, 864, 865, 875, 902, 915, 959], "co": [698, 843, 1284, 1358, 1379], "coalesc": [64, 254, 255, 319, 350, 525, 700, 702, 726, 833, 843, 887, 888, 926, 959, 1288, 1312, 1374, 1379], "code": [203, 214, 254, 350, 403, 404, 405, 406, 409, 442, 590, 675, 843, 870, 887, 891, 959, 1260, 1358, 1368], "codebas": 203, "coeffici": [216, 350, 682, 843, 1269, 1358], "coerc": [64, 644, 843, 1358], "coercion": [48, 49, 50, 51, 62, 63, 129, 644, 843, 864, 865, 875, 902, 915, 959, 1358], "col": [1, 13, 38, 41, 48, 52, 56, 57, 58, 59, 134, 136, 163, 177, 179, 231, 239, 240, 245, 248, 250, 254, 255, 256, 259, 270, 273, 274, 278, 282, 283, 288, 296, 307, 312, 316, 318, 324, 329, 350, 354, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 415, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 520, 521, 523, 524, 525, 526, 527, 528, 530, 531, 533, 534, 535, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 612, 613, 614, 616, 618, 620, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 762, 766, 767, 769, 770, 771, 772, 774, 776, 779, 781, 782, 784, 785, 787, 791, 792, 793, 794, 795, 796, 806, 808, 810, 811, 813, 816, 817, 821, 822, 824, 826, 828, 829, 832, 833, 843, 879, 882, 883, 885, 887, 888, 889, 901, 905, 908, 910, 917, 918, 924, 929, 931, 935, 959, 965, 1087, 1091, 1174, 1257, 1259, 1288, 1292, 1312, 1358, 1389], "col0": [179, 1389], "col1": [179, 274, 350, 959, 1389], "col2": [179, 274, 350, 959, 1389], "col3": [274, 350, 1389], "col4": 1389, "col_nam": [273, 350, 590, 833, 843, 901, 959], "cole": 144, "coli": [41, 350, 621, 622, 965, 1389], "collaps": [48, 49, 50, 51, 62, 63, 129, 864, 865, 875, 902, 915, 959], "collapse_join": [48, 49, 50, 51, 62, 63, 129, 864, 865, 875, 902, 915, 959], "collect": [10, 48, 49, 50, 51, 59, 62, 63, 95, 129, 163, 164, 165, 169, 179, 180, 183, 222, 223, 257, 274, 297, 302, 315, 316, 350, 500, 531, 570, 571, 572, 573, 590, 771, 789, 793, 821, 822, 825, 843, 858, 859, 861, 862, 865, 868, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 898, 899, 900, 901, 903, 904, 905, 906, 907, 908, 910, 912, 914, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 931, 932, 933, 935, 936, 937, 938, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 956, 958, 959, 965, 1150, 1191, 1192, 1193, 1194, 1358, 1368, 1369, 1370, 1373, 1374, 1386, 1387, 1389], "collect_al": [59, 63, 129, 864, 865, 959], "collect_all_async": [865, 959], "collect_async": [63, 959], "collect_schema": [59, 257, 350, 867, 874, 901, 909, 928, 959], "collis": 64, "colnam": [25, 41, 163, 350], "color": [55, 96, 97, 336, 350, 353, 403, 404, 405, 406, 409, 692, 754, 843, 942, 1012, 1013, 1014, 1015, 1018, 1278, 1347, 1358, 1381], "column": [11, 17, 18, 19, 22, 23, 25, 40, 41, 47, 51, 52, 54, 55, 56, 57, 64, 71, 87, 97, 101, 105, 130, 132, 133, 134, 135, 136, 137, 143, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 166, 167, 168, 169, 172, 173, 174, 175, 179, 195, 198, 208, 210, 211, 214, 216, 217, 220, 221, 222, 223, 224, 227, 231, 232, 235, 236, 238, 239, 240, 244, 245, 250, 251, 252, 254, 255, 256, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 282, 283, 284, 285, 287, 288, 289, 291, 296, 298, 299, 300, 303, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 329, 335, 350, 353, 354, 361, 362, 364, 375, 384, 393, 395, 398, 407, 420, 429, 433, 434, 440, 450, 451, 453, 454, 455, 458, 460, 461, 462, 463, 464, 465, 466, 469, 471, 472, 473, 476, 477, 478, 480, 489, 490, 492, 500, 502, 506, 508, 521, 526, 527, 542, 548, 554, 556, 576, 580, 581, 590, 596, 597, 599, 601, 603, 614, 616, 617, 618, 619, 620, 621, 622, 631, 638, 642, 644, 645, 646, 647, 649, 650, 651, 655, 657, 659, 661, 663, 666, 668, 670, 677, 678, 684, 685, 688, 696, 701, 703, 704, 714, 718, 719, 726, 727, 728, 729, 730, 731, 733, 738, 741, 749, 754, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 839, 843, 859, 861, 868, 871, 872, 873, 874, 876, 879, 882, 883, 887, 888, 889, 893, 894, 895, 896, 897, 899, 900, 903, 905, 906, 908, 909, 910, 911, 913, 917, 919, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 941, 942, 959, 964, 965, 972, 973, 993, 1002, 1004, 1007, 1016, 1032, 1036, 1042, 1047, 1048, 1054, 1063, 1066, 1067, 1068, 1071, 1073, 1074, 1078, 1079, 1080, 1082, 1083, 1086, 1088, 1089, 1093, 1094, 1095, 1097, 1106, 1107, 1109, 1121, 1140, 1144, 1169, 1175, 1177, 1197, 1201, 1231, 1238, 1239, 1242, 1263, 1274, 1282, 1287, 1290, 1304, 1305, 1312, 1314, 1315, 1316, 1317, 1319, 1325, 1328, 1334, 1335, 1347, 1358, 1374, 1376, 1378, 1380, 1381, 1383, 1384, 1387, 1388, 1389], "column_0": [1, 259, 314, 350, 904, 959], "column_1": [259, 314, 350, 1383], "column_2": [314, 350, 1383], "column_abc": 16, "column_format": [41, 350], "column_nam": [279, 314, 350, 906, 959], "column_tot": [41, 350], "column_width": [41, 350], "column_x": [148, 149, 153, 159, 163], "column_xyz": 16, "columnar": [134, 136, 252, 284, 350], "columnformatdict": [41, 350], "columninfo": [198, 201], "columnnameorselector": [211, 220, 222, 223, 265, 272, 274, 285, 305, 315, 316, 317, 318, 350, 861, 871, 872, 873, 897, 923, 924, 925, 959], "columnnotfounderror": [235, 236, 350], "columntotalsdefinit": [41, 350], "columnwidthsdefinit": [41, 350], "colx": [41, 350, 621, 622, 965, 1373, 1389], "colz": [965, 1389], "com": [33, 41, 151, 350, 496, 498, 499, 697, 698, 699, 843, 1116, 1118, 1119, 1283, 1284, 1285, 1358], "combin": [47, 51, 62, 63, 64, 129, 231, 240, 241, 255, 274, 278, 282, 320, 350, 363, 376, 488, 497, 510, 605, 630, 646, 651, 721, 722, 723, 782, 783, 785, 786, 830, 831, 833, 843, 864, 865, 875, 883, 888, 902, 905, 908, 915, 959, 1092, 1105, 1117, 1238, 1307, 1308, 1309, 1358, 1374, 1387], "come": [124, 151, 240, 315, 317, 350, 447, 459, 467, 468, 539, 581, 768, 833, 843, 883, 923, 925, 959, 1060, 1072, 1084, 1085, 1160, 1358], "comm_subexpr_elim": [62, 63, 129, 864, 865, 875, 902, 915, 959], "comm_subplan_elim": [62, 63, 129, 864, 865, 875, 902, 915, 959], "comma": [37, 38, 148, 149, 163, 350], "comment": [148, 149, 163, 194, 195, 197, 198], "comment_prefix": [148, 149, 163], "common": [56, 62, 63, 64, 104, 129, 148, 149, 163, 319, 350, 615, 849, 864, 865, 875, 902, 915, 926, 959, 1362], "commonli": 833, "compact": 1384, "compani": 151, "compar": [168, 172, 173, 174, 175, 225, 231, 278, 350, 494, 495, 515, 517, 527, 541, 588, 625, 626, 843, 879, 905, 959, 1036, 1113, 1114, 1222, 1358], "comparison": [169, 231, 278, 350, 879, 905, 959, 1349, 1358], "compat": [21, 41, 43, 44, 47, 49, 51, 99, 302, 350, 689, 691, 697, 698, 699, 701, 712, 713, 959, 965, 1097, 1275, 1277, 1283, 1284, 1285, 1287, 1298, 1299, 1333, 1358, 1368, 1381, 1382, 1386], "compat_level": [43, 44, 49, 302, 350, 959, 1333, 1358], "compatibleframetyp": [1369, 1371, 1386], "compatlevel": [43, 44, 49, 302, 350, 959, 1333, 1358], "competit": [641, 843, 1233, 1358], "compil": [61, 380, 381, 546, 547, 963, 989, 990, 1167, 1168], "complement": 965, "complet": [148, 150, 163, 1387], "complex": [180, 419, 420, 439, 748, 749, 843, 1028, 1053, 1343, 1358], "compliant": [41, 350, 480, 1097], "compon": [451, 476, 480, 726, 729, 787, 1064, 1093, 1097, 1312, 1315], "compos": 1387, "composit": [87, 1389], "compound": [137, 285, 350, 965], "comprehens": 177, "compress": [36, 40, 43, 44, 47, 49, 51, 350, 649, 843, 959, 1241, 1358], "compression_level": [47, 51, 350, 959], "comput": [62, 64, 102, 226, 239, 255, 274, 309, 315, 329, 342, 350, 358, 367, 368, 369, 370, 371, 372, 389, 390, 391, 396, 397, 401, 427, 430, 431, 432, 435, 436, 437, 438, 444, 493, 496, 497, 498, 499, 501, 539, 563, 564, 565, 566, 570, 571, 572, 573, 577, 583, 584, 585, 586, 611, 631, 632, 637, 641, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 679, 680, 681, 682, 686, 745, 746, 754, 759, 761, 764, 765, 766, 773, 775, 788, 809, 819, 820, 833, 843, 864, 882, 885, 887, 888, 904, 923, 931, 935, 948, 959, 970, 976, 977, 978, 979, 980, 981, 998, 999, 1000, 1005, 1006, 1010, 1038, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1057, 1111, 1115, 1116, 1117, 1118, 1119, 1120, 1160, 1184, 1185, 1186, 1187, 1191, 1192, 1193, 1194, 1198, 1204, 1205, 1206, 1207, 1215, 1226, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1266, 1267, 1268, 1269, 1272, 1331, 1332, 1340, 1347, 1358, 1380, 1383], "computecontext": [904, 959], "computeerror": [601, 731, 833, 1317], "concat": [55, 96, 97, 105, 149, 255, 350, 888, 931, 959, 1040, 1134, 1216, 1234, 1358, 1379], "concat_list": [553, 788], "concat_w": [297, 350, 822, 918, 959, 1379, 1386], "concaten": [55, 64, 96, 97, 233, 273, 350, 635, 688, 704, 770, 771, 772, 843, 901, 959, 1040, 1216, 1274, 1290, 1358, 1381], "concatmethod": 64, "conclus": [134, 136, 350, 959], "concret": [179, 183], "condit": [41, 223, 231, 256, 278, 283, 350, 422, 426, 506, 527, 694, 720, 767, 791, 833, 843, 879, 889, 905, 959, 1145, 1358, 1374, 1379, 1385], "conditional_format": [41, 350], "conditionalformatdict": [41, 350], "config": [0, 56, 218, 288, 307, 324, 350, 690, 700, 702, 714, 782, 783, 785, 786, 787, 855, 864, 869, 910, 929, 959, 1276, 1288, 1300], "configur": [5, 33, 40, 152, 164, 165, 203, 350, 353, 856, 864, 875, 902, 915, 934, 959, 1358, 1363], "configure_axisx": [350, 353, 1358, 1363], "configure_point": [350, 353, 1358, 1363], "conflat": [527, 843], "conform": 1389, "confus": [104, 362, 534, 535, 714, 843], "conjunct": [41, 96, 150, 153, 159, 177, 350, 797, 800, 959], "conn": 150, "connect": [38, 39, 43, 47, 48, 49, 50, 51, 74, 148, 150, 151, 154, 156, 158, 160, 163, 166, 167, 168, 169, 193, 350, 856, 959], "connectionorcursor": [39, 150, 350], "connector": 151, "connectorx": [150, 151, 171], "consecut": [230, 350, 402, 505, 511, 688, 704, 712, 843, 878, 959, 1011, 1125, 1130, 1274, 1290, 1299, 1358], "consid": [32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 63, 72, 78, 96, 97, 140, 141, 142, 143, 144, 148, 149, 150, 152, 158, 160, 161, 163, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 188, 189, 190, 191, 192, 193, 199, 210, 222, 223, 225, 251, 256, 259, 265, 284, 297, 307, 312, 313, 315, 317, 319, 350, 353, 354, 420, 429, 439, 440, 447, 459, 510, 521, 589, 590, 597, 613, 614, 617, 619, 621, 622, 638, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 749, 768, 770, 777, 791, 801, 802, 839, 843, 859, 864, 865, 872, 873, 875, 889, 897, 902, 915, 918, 922, 923, 925, 926, 942, 959, 965, 1032, 1037, 1042, 1053, 1054, 1060, 1072, 1114, 1140, 1210, 1231, 1243, 1244, 1247, 1249, 1250, 1257, 1259, 1337, 1342, 1358, 1363, 1368], "consider": 144, "consist": [239, 272, 308, 350, 726, 782, 783, 801, 833, 882, 959, 965, 974, 1122, 1312, 1339, 1358], "consola": [41, 350], "const": 11, "constant": [226, 282, 350, 448, 497, 503, 802, 843, 908, 959, 1061, 1115, 1117, 1123, 1358], "constrain": [56, 163, 222, 223, 350, 872, 873, 959, 965], "constraint": [231, 278, 350, 506, 614, 615, 617, 619, 621, 622, 833, 843, 879, 905, 959, 965, 1388], "construct": [55, 96, 97, 104, 130, 132, 133, 134, 135, 136, 137, 144, 150, 350, 512, 815, 818, 834, 839, 843, 870, 959, 1032, 1358, 1373], "construct_categor": 55, "constructor": [144, 153, 183], "contain": [5, 38, 39, 40, 41, 48, 52, 53, 54, 56, 61, 100, 132, 135, 137, 145, 150, 151, 152, 160, 164, 165, 168, 178, 179, 181, 183, 210, 215, 222, 223, 224, 240, 248, 253, 270, 307, 308, 312, 313, 319, 331, 350, 362, 364, 387, 406, 409, 422, 426, 442, 518, 531, 560, 590, 688, 690, 694, 697, 699, 701, 704, 706, 719, 720, 736, 758, 759, 760, 761, 772, 805, 833, 843, 859, 867, 870, 872, 873, 874, 883, 902, 922, 926, 937, 959, 965, 972, 973, 996, 1030, 1035, 1136, 1137, 1181, 1216, 1274, 1276, 1280, 1283, 1285, 1287, 1290, 1292, 1305, 1306, 1322, 1333, 1339, 1358, 1376], "contains_with_expr": 403, "contains_with_lit": 403, "content": [14, 48, 49, 50, 51, 678, 843, 959, 963, 1265, 1358], "context": [55, 96, 97, 140, 142, 185, 270, 297, 350, 360, 506, 553, 589, 590, 601, 684, 685, 754, 774, 790, 793, 799, 800, 805, 814, 818, 821, 842, 843, 854, 855, 904, 918, 931, 959, 1174, 1347, 1358, 1373, 1386, 1388], "contigu": [64, 130, 131, 135, 148, 149, 152, 154, 156, 158, 160, 163, 164, 166, 167, 168, 277, 308, 350], "continu": [440, 638, 682, 843, 1054, 1231, 1269, 1358, 1375], "contrast": 787, "control": [11, 12, 41, 63, 64, 153, 177, 179, 296, 297, 307, 350, 646, 685, 822, 843, 864, 865, 875, 902, 915, 917, 918, 934, 956, 959, 1238, 1337, 1358, 1370, 1373, 1386], "conveni": [228, 312, 350, 951, 974, 1122, 1358, 1368], "convers": [131, 207, 252, 253, 284, 285, 304, 308, 309, 350, 452, 726, 728, 729, 733, 855, 1065, 1312, 1314, 1315, 1319, 1339, 1340, 1358, 1384, 1386], "convert": [40, 100, 131, 135, 145, 152, 153, 159, 164, 207, 285, 303, 304, 305, 306, 307, 308, 309, 311, 312, 350, 398, 399, 441, 452, 477, 480, 580, 581, 589, 615, 640, 699, 726, 728, 729, 730, 731, 733, 738, 843, 959, 1007, 1008, 1036, 1065, 1094, 1097, 1201, 1202, 1285, 1312, 1314, 1315, 1316, 1317, 1319, 1325, 1328, 1336, 1337, 1338, 1339, 1340, 1342, 1358, 1381, 1383, 1384, 1386], "convert_time_zon": [474, 1091], "coo": [279, 350, 906, 959], "coord": 741, "coordin": [41, 350, 1144, 1358], "copi": [37, 130, 131, 147, 205, 207, 212, 213, 253, 302, 308, 309, 324, 350, 503, 843, 862, 863, 929, 959, 967, 1041, 1043, 1123, 1333, 1338, 1339, 1340, 1358, 1386], "corasick": [690, 700, 702, 714, 1276, 1286, 1288, 1300], "core": [1, 256, 350, 889, 959, 1386, 1389], "cores_right": [256, 350, 889, 959], "corner": [21, 41, 137, 350], "corr": 350, "corrcoef": [216, 350], "correct": [95, 145, 153, 159, 498, 499, 539, 581, 652, 664, 682, 843, 893, 959, 1118, 1119, 1160, 1243, 1250, 1269, 1358], "correctli": [41, 350, 589, 791, 843], "correl": [216, 350, 773, 819], "correlationmethod": 773, "correspond": [240, 255, 282, 308, 320, 350, 420, 461, 470, 475, 488, 590, 641, 651, 655, 657, 659, 661, 663, 666, 668, 670, 749, 782, 783, 785, 786, 830, 831, 843, 864, 883, 888, 908, 959, 1074, 1087, 1092, 1105, 1233, 1358, 1375], "cosd": 1379, "cosh": [843, 1358], "cosin": [367, 368, 430, 431, 589, 843, 976, 977, 1044, 1045, 1358, 1383], "cost": [256, 285, 350, 712, 889, 959, 1299], "cost_usd": [712, 1299], "cot": [843, 1358, 1379], "cotang": [432, 843, 1046, 1358, 1383], "cotd": 1379, "could": [40, 93, 102, 350, 679, 777, 787, 791, 833, 843, 861, 869, 959, 1266, 1358], "count": [41, 169, 209, 218, 240, 270, 271, 282, 314, 320, 326, 341, 350, 366, 383, 392, 434, 447, 459, 497, 521, 542, 550, 562, 567, 590, 613, 629, 641, 651, 655, 657, 659, 661, 663, 666, 668, 670, 691, 752, 754, 762, 768, 776, 800, 813, 843, 858, 869, 883, 900, 908, 932, 947, 959, 965, 975, 992, 1001, 1048, 1055, 1060, 1072, 1117, 1140, 1163, 1171, 1183, 1188, 1217, 1225, 1277, 1345, 1347, 1358, 1363, 1367, 1379], "count_digit": 691, "count_num": [41, 350], "counterpart": 144, "countri": [255, 350, 448, 888, 959, 1061], "country_holidai": [447, 459, 768, 1060, 1072], "covari": [145, 775, 820, 843], "cover": 11, "cow": [710, 711, 1296, 1297], "cpu": [148, 149, 171, 307, 350, 934, 1337, 1358], "crab": [689, 701, 1275, 1287], "crate": [38, 48, 100, 350, 689, 691, 697, 698, 699, 701, 712, 713, 726, 728, 729, 733, 959, 965, 1275, 1277, 1283, 1284, 1285, 1287, 1298, 1299, 1312, 1314, 1315, 1319], "creat": [39, 41, 48, 49, 50, 51, 52, 54, 55, 97, 130, 134, 136, 148, 149, 150, 151, 154, 156, 160, 164, 165, 177, 178, 179, 180, 181, 182, 183, 184, 203, 212, 213, 240, 271, 274, 282, 307, 308, 320, 324, 327, 350, 353, 354, 451, 475, 488, 497, 521, 581, 589, 642, 651, 655, 657, 659, 661, 663, 666, 668, 670, 771, 781, 782, 783, 784, 785, 786, 787, 801, 829, 830, 831, 833, 839, 843, 862, 863, 869, 875, 883, 908, 929, 933, 959, 963, 964, 1041, 1043, 1054, 1064, 1092, 1105, 1117, 1140, 1223, 1231, 1234, 1337, 1339, 1349, 1358, 1363, 1385, 1386, 1389], "create_async_engin": 150, "create_engin": [39, 350], "created_at": [194, 197, 198], "created_bi": [194, 197, 198], "creation": [140, 142, 149], "credenti": [32, 33, 34, 35, 38, 40, 43, 47, 48, 49, 50, 51, 152, 158, 160, 163, 164, 166, 167, 168, 193, 350, 855, 959], "credential_provid": [38, 40, 43, 47, 48, 49, 50, 51, 152, 158, 160, 163, 164, 166, 167, 168, 193, 350, 959], "credentialproviderfunct": [38, 40, 43, 47, 48, 49, 50, 51, 152, 158, 160, 163, 164, 166, 167, 168, 193, 350, 959], "cross": [254, 350, 887, 959, 1374], "crustacean": [701, 1287], "cst": [475, 488, 1092, 1105], "csv": [37, 38, 48, 49, 50, 51, 52, 53, 54, 147, 148, 149, 153, 154, 163, 196, 350, 855, 959], "csvencod": [148, 149, 163], "csvquotestyl": [38, 48, 350, 959], "ctx": [52, 53, 54, 1367, 1369, 1370, 1371, 1372, 1373, 1386], "cube": [1, 60, 427, 636, 843, 1038, 1358, 1380], "cuda": 934, "cum_count": [843, 1358], "cum_count_revers": [434, 843], "cum_max": [843, 1358], "cum_max_all_fil": [435, 843], "cum_max_revers": [435, 843], "cum_min": [843, 1358], "cum_min_revers": [436, 843], "cum_prod": [359, 843, 1358], "cum_prod_revers": [437, 843], "cum_reduc": 777, "cum_sum": [524, 631, 742, 780, 843, 885, 959, 1159, 1358], "cum_sum_revers": [438, 843], "cumsum_horizont": 779, "cumul": [434, 435, 436, 437, 438, 776, 777, 778, 779, 780, 843, 1048, 1049, 1050, 1051, 1052, 1358], "cumulative_ev": [843, 1358], "cumulative_sal": [631, 843], "current": [2, 3, 5, 6, 31, 38, 39, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 137, 140, 141, 142, 150, 151, 158, 160, 163, 166, 167, 168, 176, 177, 179, 180, 181, 182, 183, 184, 193, 212, 213, 220, 254, 255, 279, 297, 307, 312, 350, 353, 354, 456, 581, 632, 843, 862, 863, 871, 887, 888, 906, 915, 918, 934, 959, 965, 1041, 1043, 1061, 1069, 1226, 1337, 1342, 1358, 1363, 1370, 1386], "cursor": [39, 150, 350], "custom": [1, 28, 40, 41, 57, 58, 59, 60, 103, 144, 161, 182, 184, 218, 259, 274, 336, 350, 399, 447, 459, 477, 480, 581, 589, 590, 653, 754, 768, 804, 805, 843, 869, 893, 942, 959, 1008, 1060, 1072, 1094, 1097, 1202, 1210, 1244, 1347, 1358, 1389], "customis": [41, 350], "cut": [638, 843, 1231, 1358], "cxx": 1381, "cypher": 150, "d": [29, 36, 38, 40, 41, 43, 44, 47, 133, 169, 208, 231, 238, 240, 241, 242, 254, 258, 278, 301, 302, 312, 318, 322, 332, 334, 337, 338, 339, 340, 341, 342, 343, 350, 359, 361, 434, 457, 477, 480, 527, 596, 635, 677, 691, 698, 712, 713, 718, 726, 728, 729, 769, 770, 787, 793, 822, 843, 879, 883, 887, 905, 918, 938, 940, 943, 944, 945, 946, 947, 948, 949, 959, 965, 1036, 1048, 1070, 1094, 1097, 1145, 1169, 1277, 1284, 1298, 1299, 1304, 1312, 1314, 1315, 1326, 1358, 1374, 1376, 1378, 1381, 1382], "d1": [41, 350, 451], "d2": 451, "d3": 451, "d789": [41, 350], "d_4": [718, 1304], "dai": [70, 71, 88, 240, 253, 255, 282, 320, 350, 353, 447, 459, 467, 468, 470, 471, 473, 475, 477, 480, 481, 488, 490, 497, 651, 655, 657, 659, 661, 663, 666, 668, 670, 768, 781, 782, 783, 784, 785, 786, 787, 830, 831, 843, 883, 888, 908, 959, 965, 1060, 1072, 1084, 1085, 1087, 1088, 1090, 1092, 1094, 1097, 1098, 1105, 1107, 1117, 1358, 1382], "dark": 1367, "data": [0, 1, 11, 19, 20, 22, 25, 29, 36, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 59, 64, 69, 70, 71, 73, 84, 85, 87, 88, 97, 100, 104, 106, 109, 123, 130, 131, 132, 133, 134, 135, 136, 137, 138, 144, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 201, 205, 207, 213, 214, 224, 226, 227, 228, 238, 239, 240, 252, 253, 254, 257, 259, 272, 273, 277, 283, 284, 285, 287, 291, 294, 302, 307, 308, 309, 312, 314, 324, 328, 348, 350, 354, 362, 363, 364, 367, 368, 369, 370, 371, 372, 375, 378, 379, 380, 381, 382, 384, 387, 389, 390, 391, 396, 397, 398, 400, 401, 403, 404, 405, 406, 407, 408, 409, 421, 423, 424, 425, 429, 430, 431, 432, 433, 440, 441, 442, 447, 448, 449, 450, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 497, 502, 513, 515, 516, 517, 521, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 541, 542, 546, 547, 549, 554, 560, 562, 569, 580, 582, 588, 590, 625, 626, 630, 631, 638, 640, 641, 644, 645, 646, 647, 649, 650, 655, 657, 659, 661, 663, 666, 668, 670, 671, 673, 675, 680, 681, 682, 688, 691, 692, 693, 696, 697, 698, 699, 703, 704, 705, 706, 707, 708, 716, 717, 718, 719, 726, 727, 728, 729, 731, 733, 736, 745, 746, 747, 750, 751, 754, 757, 763, 771, 774, 781, 782, 783, 784, 785, 786, 787, 797, 798, 800, 801, 802, 803, 804, 805, 815, 818, 829, 830, 831, 834, 839, 843, 855, 862, 863, 870, 874, 876, 882, 883, 909, 913, 929, 959, 964, 967, 972, 973, 985, 987, 988, 989, 990, 991, 993, 995, 996, 1007, 1009, 1012, 1013, 1014, 1016, 1017, 1029, 1031, 1033, 1034, 1041, 1042, 1043, 1054, 1055, 1060, 1061, 1062, 1063, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1078, 1079, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1114, 1115, 1117, 1121, 1122, 1140, 1146, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1165, 1166, 1167, 1168, 1170, 1175, 1181, 1183, 1190, 1201, 1203, 1210, 1224, 1231, 1233, 1237, 1238, 1239, 1241, 1242, 1254, 1256, 1264, 1269, 1274, 1275, 1277, 1278, 1279, 1281, 1282, 1283, 1284, 1285, 1289, 1290, 1291, 1292, 1293, 1294, 1302, 1303, 1304, 1305, 1312, 1313, 1314, 1315, 1317, 1319, 1322, 1333, 1338, 1339, 1340, 1341, 1344, 1357, 1358, 1367, 1374, 1381, 1386, 1388], "data_bar": [41, 350], "data_bar_2010": [41, 350], "data_label": [41, 350], "data_page_s": [47, 51, 350, 959], "data_source_format": 198, "databas": [39, 128, 150, 151, 350, 855], "databrick": 188, "databricks_format": 196, "datafram": [0, 1, 7, 8, 9, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 62, 63, 64, 83, 95, 101, 104, 105, 130, 131, 132, 133, 134, 135, 136, 137, 139, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 163, 166, 167, 168, 172, 173, 176, 177, 203, 348, 349, 353, 354, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 415, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 839, 843, 855, 864, 865, 867, 869, 871, 874, 876, 880, 883, 887, 888, 889, 890, 891, 893, 897, 898, 902, 907, 909, 916, 918, 923, 924, 925, 926, 928, 931, 935, 936, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 949, 950, 952, 953, 959, 964, 965, 1054, 1055, 1091, 1117, 1140, 1210, 1231, 1288, 1292, 1304, 1305, 1328, 1334, 1335, 1347, 1358, 1367, 1368, 1369, 1370, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1380, 1381, 1382, 1383, 1384, 1386, 1389], "dataframeplot": [350, 353], "dataload": [312, 350], "datapoint": [240, 350, 883, 959], "dataset": [15, 47, 74, 148, 149, 152, 153, 159, 163, 164, 169, 254, 312, 350, 539, 843, 855, 887, 893, 959, 1160, 1358, 1387], "datasourceformat": [198, 201], "datat": [41, 350], "datatyp": [38, 48, 130, 132, 133, 134, 136, 138, 155, 157, 158, 160, 162, 167, 168, 180, 181, 183, 224, 233, 350, 421, 500, 677, 747, 770, 789, 791, 803, 839, 843, 855, 874, 959, 964, 965, 1029, 1055, 1110, 1210, 1263, 1341, 1358, 1384], "date": [17, 41, 56, 71, 148, 149, 151, 153, 159, 160, 163, 166, 168, 169, 211, 218, 238, 240, 253, 255, 282, 297, 350, 353, 382, 447, 449, 450, 451, 452, 455, 457, 459, 460, 461, 463, 466, 467, 468, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 497, 549, 631, 651, 655, 657, 659, 661, 663, 666, 668, 670, 726, 728, 747, 768, 782, 783, 785, 786, 793, 801, 803, 829, 843, 861, 869, 883, 888, 908, 959, 965, 991, 1060, 1062, 1063, 1064, 1065, 1068, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1109, 1117, 1170, 1219, 1220, 1312, 1314, 1341, 1358, 1379, 1382, 1384], "date32": [253, 350], "date_format": [38, 48, 350, 959], "date_min": 470, "date_minus_1y_2mon": 1087, "date_part": 1379, "date_plus_1i": [470, 1087], "date_rang": [255, 320, 350, 455, 457, 471, 479, 490, 785, 786, 888, 959, 1068, 1083, 1088, 1089, 1106, 1107], "date_right": [255, 350, 888, 959], "datetim": [17, 38, 41, 48, 56, 100, 137, 152, 160, 164, 166, 168, 179, 180, 181, 183, 193, 194, 197, 198, 211, 218, 238, 240, 253, 255, 282, 297, 320, 350, 353, 382, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 497, 549, 598, 631, 651, 655, 657, 659, 661, 663, 666, 668, 670, 726, 729, 747, 768, 781, 782, 783, 785, 786, 787, 793, 801, 803, 830, 831, 843, 861, 869, 883, 888, 908, 959, 964, 965, 991, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1117, 1170, 1219, 1220, 1312, 1315, 1339, 1341, 1358, 1381, 1382], "datetime_format": [38, 48, 350, 959], "datetime_rang": [240, 350, 449, 452, 467, 468, 470, 474, 475, 481, 482, 483, 484, 485, 486, 487, 488, 491, 655, 657, 659, 661, 663, 666, 668, 670, 782, 783, 843, 883, 959, 1061, 1062, 1065, 1069, 1070, 1071, 1077, 1078, 1080, 1082, 1084, 1085, 1086, 1087, 1091, 1092, 1096, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105], "datetime_str": 477, "datetimeindex": 135, "david": 1387, "day_nam": [477, 480], "day_of_month": [455, 471, 490], "day_of_year": [455, 471, 490], "daylight": [240, 255, 282, 320, 350, 448, 456, 470, 475, 488, 651, 655, 657, 659, 661, 663, 666, 668, 670, 782, 783, 785, 786, 787, 830, 831, 843, 883, 888, 908, 959, 1069, 1087, 1092, 1105], "dayofweek": 1382, "dayofyear": 1382, "days_diff": 481, "db": [39, 150, 151, 350], "dbapi2": 150, "dbc": [691, 1277], "dbreadengin": 151, "dbwriteengin": [39, 350], "dbwritemod": [39, 350], "dd": [41, 350, 1381], "ddd": [1, 41, 350, 737, 739, 740], "dddd": 1381, "ddof": [298, 321, 350, 396, 401, 577, 583, 665, 666, 669, 670, 687, 755, 773, 775, 819, 820, 824, 832, 843, 919, 927, 959, 1005, 1010, 1198, 1204, 1251, 1253, 1273, 1348, 1358], "ddww": 1381, "de": 1381, "deal": [47, 51, 252, 350, 362, 364, 473, 474, 641, 726, 729, 758, 759, 760, 761, 784, 843, 959, 972, 973, 1090, 1091, 1233, 1312, 1315, 1358], "debug": [30, 893, 959, 1389], "decad": [1367, 1382], "decai": [496, 497, 498, 499, 843, 1116, 1117, 1118, 1119, 1358], "decemb": [480, 1097], "decim": [9, 11, 12, 28, 29, 38, 41, 48, 148, 149, 163, 350, 354, 671, 730, 843, 959, 965, 1254, 1316, 1358, 1380], "decimal_comma": [148, 149, 163], "decimal_separ": [9, 28], "declar": [130, 132, 133, 134, 136, 150, 157, 158, 167, 307, 312, 350, 833, 959, 965, 1367], "decod": [148, 149, 705], "decompos": [316, 350, 924, 959], "decompress": [47, 49, 51, 350, 959], "decor": [55, 57, 58, 59, 60, 179, 183, 259, 350, 590, 843, 854, 855, 1210, 1358], "dedic": [1, 131, 252, 284, 350, 965, 1386], "deem": [218, 350, 869, 959], "deepcopi": [212, 350, 862, 959, 1041, 1358], "def": [1, 55, 57, 58, 59, 60, 150, 177, 179, 183, 203, 273, 314, 350, 359, 635, 695, 698, 723, 757, 804, 843, 865, 901, 959, 965, 1281, 1284, 1389], "default": [4, 5, 9, 10, 11, 15, 28, 31, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 62, 63, 64, 68, 71, 72, 73, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 149, 151, 153, 154, 156, 157, 158, 159, 160, 163, 165, 166, 167, 168, 172, 174, 176, 177, 178, 179, 180, 181, 182, 183, 203, 218, 219, 222, 223, 226, 235, 239, 240, 241, 252, 254, 255, 263, 265, 272, 274, 282, 283, 284, 285, 286, 290, 293, 297, 298, 300, 305, 307, 308, 312, 315, 317, 318, 319, 321, 326, 335, 350, 361, 362, 364, 387, 394, 399, 407, 440, 442, 447, 459, 473, 474, 480, 493, 495, 496, 498, 499, 519, 531, 556, 560, 569, 574, 575, 577, 581, 583, 584, 589, 597, 598, 601, 604, 623, 624, 626, 631, 632, 638, 641, 645, 646, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 676, 678, 687, 688, 697, 704, 716, 721, 722, 723, 726, 728, 729, 731, 733, 754, 755, 758, 760, 763, 767, 768, 769, 772, 773, 775, 782, 783, 784, 785, 786, 787, 790, 793, 797, 798, 799, 801, 802, 803, 809, 815, 818, 821, 824, 825, 827, 830, 831, 832, 833, 834, 843, 864, 865, 869, 870, 872, 873, 875, 882, 883, 887, 888, 897, 902, 904, 908, 912, 914, 915, 918, 919, 923, 925, 926, 927, 932, 934, 941, 959, 963, 965, 972, 973, 996, 1003, 1008, 1016, 1042, 1054, 1055, 1060, 1072, 1090, 1091, 1097, 1111, 1115, 1116, 1118, 1119, 1138, 1150, 1177, 1181, 1190, 1195, 1196, 1202, 1219, 1220, 1226, 1231, 1233, 1237, 1238, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1256, 1262, 1265, 1273, 1274, 1275, 1283, 1287, 1290, 1302, 1307, 1308, 1309, 1312, 1314, 1315, 1317, 1319, 1337, 1339, 1347, 1348, 1358, 1380, 1381, 1389], "default_match": [689, 701], "default_scop": 35, "defaultazurecredenti": 34, "defaultdict": [285, 350], "defer": [203, 350, 353, 354, 1358, 1363], "defin": [38, 41, 48, 71, 74, 150, 157, 176, 177, 179, 211, 222, 223, 227, 240, 259, 270, 273, 282, 319, 336, 350, 425, 527, 556, 590, 635, 638, 650, 651, 655, 657, 659, 661, 663, 666, 668, 670, 703, 708, 716, 727, 734, 782, 783, 785, 786, 801, 802, 805, 825, 830, 831, 843, 861, 872, 873, 876, 883, 901, 908, 926, 942, 959, 963, 964, 965, 1034, 1145, 1177, 1210, 1231, 1242, 1289, 1294, 1302, 1313, 1320, 1358], "definit": [41, 75, 350, 539, 652, 843, 964, 965, 1160, 1243, 1358], "deflat": [36, 350], "deg": 1383, "degre": [298, 321, 350, 577, 583, 640, 665, 666, 669, 670, 687, 755, 765, 775, 819, 820, 824, 832, 843, 919, 927, 959, 1251, 1253, 1273, 1348, 1358, 1379], "delai": 95, "delet": [74, 1374, 1385], "delimit": [46, 48, 158, 167, 274, 305, 350, 688, 704, 959, 1274, 1290, 1334, 1358, 1381], "delta": [40, 152, 164, 196, 298, 321, 350, 577, 583, 665, 666, 669, 670, 687, 755, 775, 819, 820, 824, 832, 843, 855, 919, 927, 959, 1251, 1253, 1273, 1348, 1358], "delta_merge_opt": [40, 350], "delta_table_opt": [152, 164, 193], "delta_table_vers": 193, "delta_write_opt": [40, 350], "deltalak": [40, 152, 164, 171, 193, 350], "deltashar": 196, "deltat": [40, 152, 164, 350], "demo": [41, 350], "demonstr": [148, 510, 843, 965], "dens": [21, 238, 350, 641, 843, 1233, 1358], "densiti": [1358, 1363], "depend": [47, 52, 55, 61, 97, 150, 153, 159, 171, 208, 350, 380, 381, 546, 547, 590, 601, 638, 641, 787, 790, 793, 799, 843, 969, 989, 990, 1167, 1168, 1231, 1233, 1358, 1389], "deploi": [179, 183], "deprec": [40, 65, 148, 149, 176, 177, 178, 179, 183, 186, 209, 265, 308, 326, 331, 350, 454, 491, 512, 608, 645, 688, 696, 756, 765, 773, 774, 843, 858, 875, 897, 912, 925, 931, 932, 937, 959, 1067, 1076, 1077, 1108, 1137, 1237, 1274, 1282, 1339, 1358], "depth": 144, "desc": [965, 1367, 1370, 1374, 1376], "descend": [56, 210, 291, 296, 313, 350, 375, 395, 420, 576, 631, 641, 675, 684, 685, 749, 754, 766, 843, 859, 913, 917, 922, 959, 984, 1004, 1157, 1197, 1233, 1260, 1271, 1347, 1358], "describ": [179, 238, 350, 709, 959, 1295, 1358], "descript": [240, 350, 883, 959, 1374, 1375, 1376, 1377, 1378, 1380, 1381, 1382, 1384, 1387, 1388], "deseri": [144, 290, 350, 512, 604, 843, 912, 959], "deserializ": [219, 290, 350, 442, 604, 843, 870, 912, 959], "design": [307, 312, 350], "desir": [179, 254, 350, 399, 491, 581, 887, 959, 1008, 1108, 1202], "destin": 151, "detail": [61, 131, 150, 151, 172, 174, 207, 240, 319, 350, 480, 747, 843, 883, 926, 934, 959, 1097, 1341, 1358, 1389], "determin": [15, 38, 41, 48, 56, 64, 93, 144, 148, 149, 150, 153, 159, 160, 163, 168, 170, 210, 214, 233, 240, 252, 253, 259, 282, 313, 314, 320, 350, 420, 459, 460, 473, 474, 521, 581, 601, 638, 644, 646, 682, 690, 703, 726, 727, 729, 730, 749, 784, 802, 815, 818, 834, 843, 859, 866, 867, 874, 883, 908, 922, 928, 959, 1072, 1073, 1090, 1091, 1140, 1202, 1231, 1237, 1238, 1269, 1276, 1312, 1315, 1316, 1358], "dev": [206, 968, 1251, 1358], "develop": [151, 179, 183], "deviat": [298, 350, 498, 665, 666, 687, 824, 843, 919, 959, 1118, 1273, 1358, 1375], "devic": [307, 350, 864, 875, 902, 915, 934, 959, 1337, 1358], "devicememoryresourc": 934, "df": [1, 7, 8, 9, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 57, 58, 83, 101, 105, 131, 132, 133, 134, 135, 136, 137, 149, 150, 151, 163, 176, 177, 179, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 350, 353, 354, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 407, 408, 410, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 658, 660, 662, 664, 665, 667, 669, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 730, 731, 732, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 821, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 839, 843, 883, 908, 924, 926, 939, 942, 950, 959, 965, 1091, 1117, 1288, 1292, 1304, 1305, 1335, 1358, 1363, 1367, 1368, 1369, 1374, 1375, 1376, 1377, 1378, 1380, 1381, 1382, 1383, 1384, 1386, 1389], "df0": [266, 350, 898, 959, 1373], "df1": [56, 64, 172, 173, 225, 228, 266, 297, 322, 350, 898, 959, 1370, 1372, 1373, 1374, 1386], "df2": [56, 64, 172, 173, 225, 228, 322, 350, 1370, 1372, 1373, 1374, 1386], "df3": [56, 350], "df4": 350, "df5": 350, "df6": 350, "df_a": 1386, "df_a1": 64, "df_a2": 64, "df_a3": 64, "df_agg_nuniqu": [270, 350], "df_b": 1386, "df_current_batch": 149, "df_d1": 64, "df_d2": 64, "df_from_str_repr": [306, 350], "df_h1": 64, "df_h2": 64, "df_new_grid": [525, 843], "df_nuniqu": [270, 350], "df_original_grid": [525, 843], "df_panda": 1368, "df_pd": 131, "df_tempor": [655, 657, 659, 661, 663, 666, 668, 670, 843], "dfi": 207, "diagon": [64, 314, 350], "diagonal_relax": 64, "diagram": [904, 959], "dict": [31, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 57, 59, 61, 130, 132, 133, 134, 135, 136, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 179, 193, 194, 197, 198, 232, 252, 272, 283, 284, 285, 303, 304, 307, 312, 314, 350, 843, 959, 964, 965, 1128, 1358, 1371], "dictat": [145, 470, 843, 1087], "dictionari": [31, 38, 40, 41, 43, 47, 48, 49, 50, 51, 61, 87, 130, 132, 133, 134, 136, 144, 148, 149, 150, 151, 152, 155, 157, 158, 160, 161, 162, 163, 164, 166, 167, 168, 193, 252, 272, 283, 284, 285, 303, 304, 307, 312, 350, 959, 964], "did": [448, 1061], "diff": [324, 350, 481, 482, 483, 484, 485, 486, 487, 570, 843, 929, 959, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1191, 1358], "differ": [41, 47, 100, 103, 124, 148, 153, 169, 172, 174, 203, 222, 228, 240, 241, 252, 254, 274, 282, 284, 285, 304, 307, 308, 314, 350, 443, 455, 470, 471, 474, 480, 489, 495, 510, 519, 551, 570, 572, 581, 590, 623, 624, 626, 631, 645, 646, 726, 752, 790, 793, 799, 843, 856, 872, 873, 875, 883, 887, 908, 959, 963, 965, 1036, 1056, 1068, 1087, 1088, 1091, 1097, 1106, 1113, 1122, 1138, 1172, 1191, 1193, 1210, 1219, 1220, 1222, 1237, 1238, 1312, 1358, 1382, 1384, 1386], "digit": [72, 635, 671, 672, 698, 843, 965, 1254, 1255, 1277, 1284, 1358, 1389], "dimens": [130, 132, 134, 136, 157, 158, 167, 350, 647, 843, 959, 1239, 1339, 1358], "dimension": [132, 134, 136, 308, 350, 959, 1358], "direct": [41, 151, 160, 165, 168, 293, 307, 318, 350, 394, 574, 676, 843, 914, 959, 1003, 1195, 1262, 1358], "directli": [6, 31, 41, 63, 64, 150, 179, 183, 203, 285, 307, 350, 496, 498, 499, 646, 818, 843, 865, 959, 1116, 1118, 1119, 1238, 1337, 1358, 1370, 1386, 1389], "directori": [41, 47, 48, 49, 50, 51, 52, 54, 145, 160, 163, 166, 168, 350, 959], "dirpath": [36, 38, 43, 44, 47, 163, 350], "disabl": [47, 51, 55, 96, 97, 160, 166, 180, 252, 350, 864, 959], "disable_string_cach": 97, "disallow": 179, "discard": [231, 278, 350, 506, 843, 879, 905, 959, 1126, 1358], "disco": [700, 702, 1286, 1288], "discont": [700, 702, 1286, 1288], "discourag": [590, 843], "discoveri": [274, 350], "discret": [440, 443, 493, 551, 570, 638, 843, 1054, 1056, 1111, 1172, 1191, 1231, 1358], "disk": [47, 48, 49, 50, 51, 154, 350, 605, 856, 915, 959], "dispatch": 965, "displai": [7, 11, 12, 13, 14, 18, 19, 20, 24, 25, 26, 27, 41, 218, 238, 350, 869, 875, 915, 959], "distanc": [255, 350, 888, 959], "distinct": [41, 183, 272, 274, 328, 350, 400, 530, 531, 533, 582, 641, 650, 787, 843, 1009, 1149, 1150, 1152, 1203, 1233, 1242, 1358, 1375, 1385, 1387, 1389], "distinct_count": [47, 51, 350, 959], "distinguish": [480, 1097], "distribut": [539, 682, 843, 904, 959, 1160, 1269, 1358], "div": 1379, "diverg": [62, 129], "divid": [21, 440, 475, 488, 496, 498, 499, 510, 539, 638, 641, 843, 1054, 1092, 1105, 1116, 1118, 1119, 1160, 1231, 1358, 1375, 1380], "divis": [510, 750, 843, 1380], "divisor": [298, 321, 350, 577, 583, 665, 666, 669, 670, 687, 755, 775, 819, 820, 824, 832, 843, 919, 927, 959, 1251, 1253, 1273, 1348, 1358], "dl": [312, 350], "do": [1, 41, 48, 49, 50, 51, 56, 62, 63, 129, 132, 133, 136, 148, 160, 163, 168, 172, 173, 174, 175, 208, 218, 220, 228, 251, 254, 255, 274, 279, 302, 314, 318, 350, 353, 439, 447, 553, 589, 712, 713, 721, 722, 723, 773, 815, 818, 834, 843, 860, 864, 865, 869, 871, 875, 887, 888, 893, 902, 904, 906, 915, 934, 959, 965, 1053, 1060, 1122, 1174, 1298, 1299, 1307, 1308, 1309, 1342, 1358, 1363], "do_polars_oper": 30, "do_someth": 150, "do_various_th": 203, "doc": [40, 43, 44, 131, 151, 154, 156, 172, 174, 205, 206, 216, 350, 967, 968], "document": [33, 100, 151, 205, 350, 354, 477, 480, 706, 726, 728, 729, 733, 839, 934, 967, 1036, 1094, 1097, 1292, 1312, 1314, 1315, 1319], "doe": [11, 38, 40, 48, 49, 50, 51, 56, 62, 63, 118, 130, 132, 133, 134, 136, 137, 148, 149, 150, 151, 152, 153, 157, 158, 163, 164, 167, 169, 213, 228, 235, 240, 241, 253, 254, 278, 283, 284, 285, 315, 324, 327, 350, 353, 354, 491, 506, 510, 519, 581, 590, 690, 700, 702, 714, 722, 723, 752, 839, 843, 863, 864, 865, 869, 875, 879, 883, 887, 893, 902, 905, 915, 923, 929, 933, 959, 1043, 1108, 1122, 1126, 1138, 1264, 1276, 1286, 1288, 1300, 1358, 1363, 1381], "doesn": [40, 148, 163, 240, 255, 350, 493, 843, 883, 888, 959, 1111, 1358], "dog": [689, 732, 735, 772, 1275, 1318, 1321], "doi": 1382, "dollar": [712, 713, 1298, 1299], "domain": [1, 698, 1284], "don": [64, 240, 255, 259, 315, 318, 350, 439, 553, 590, 631, 843, 883, 888, 923, 959, 965, 1053, 1174, 1210, 1358], "done": [149, 169, 203, 209, 255, 350, 365, 366, 631, 843, 858, 861, 888, 959, 975, 1358], "dot": [56, 605, 839, 843, 904, 915, 959, 1358], "doubl": [309, 350, 712, 713, 1298, 1299], "dow": 1382, "down": [163, 166, 167, 168, 169, 211, 350, 421, 509, 843, 1129, 1358], "download": [158, 163, 166, 167, 605, 915, 959], "downstream": [308, 350, 675, 843, 1260, 1358], "dr": 165, "drago": [703, 1289], "dragon": 703, "dragonfr": 1289, "dragonfruit": [703, 716, 727, 1289, 1302, 1313], "dramat": 153, "draw": [21, 26, 179, 183, 1389], "drawback": 839, "drawfn": 1389, "drawing_charact": 21, "dremio": 150, "driver": [39, 150, 151, 350], "drop": [1, 133, 221, 222, 223, 259, 278, 315, 324, 350, 443, 445, 446, 551, 552, 638, 843, 872, 873, 905, 923, 929, 959, 1056, 1058, 1059, 1172, 1173, 1231, 1358, 1385], "drop_dupl": [315, 350, 923, 959], "drop_empty_col": [153, 159], "drop_empty_row": [153, 159], "drop_first": [305, 350, 1334, 1358], "drop_in_plac": 350, "drop_nan": [350, 446, 843, 959, 1059, 1358], "drop_nul": [350, 445, 843, 959, 1058, 1358], "dset": 169, "dst": [475, 488, 1092, 1105], "dst_offset": [448, 1061], "dt": [1, 41, 56, 153, 159, 282, 350, 651, 787, 843, 852, 908, 959, 965, 1366, 1381, 1382], "dt1": 1381, "dt2": 1381, "dtm": [41, 350, 451, 480, 965, 1064, 1097, 1381], "dtm_iso": 480, "dtm_iso_strict": 480, "dtype": [11, 41, 55, 59, 65, 71, 75, 87, 96, 97, 107, 130, 132, 134, 136, 137, 148, 149, 150, 151, 153, 157, 158, 159, 163, 167, 176, 177, 178, 179, 183, 205, 207, 211, 214, 226, 240, 255, 282, 306, 307, 308, 309, 312, 318, 327, 350, 407, 421, 422, 423, 424, 425, 426, 437, 438, 480, 491, 500, 513, 548, 556, 587, 589, 590, 597, 636, 643, 644, 651, 677, 679, 705, 726, 743, 747, 753, 763, 770, 789, 791, 793, 797, 798, 800, 801, 802, 803, 804, 805, 815, 818, 825, 834, 843, 861, 866, 883, 888, 908, 933, 959, 964, 965, 967, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1016, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1041, 1051, 1052, 1055, 1056, 1097, 1108, 1115, 1147, 1165, 1166, 1169, 1177, 1201, 1208, 1210, 1229, 1240, 1263, 1266, 1291, 1312, 1329, 1336, 1337, 1339, 1340, 1341, 1342, 1346, 1358, 1386, 1389], "dtype_format": [41, 350], "dtypekind": 207, "dtypelik": [205, 967], "dtypeoper": [1, 59], "dubiou": 100, "due": [240, 255, 282, 285, 320, 350, 361, 456, 470, 475, 488, 614, 615, 617, 619, 621, 622, 651, 655, 657, 659, 661, 663, 666, 668, 670, 768, 782, 783, 785, 786, 830, 831, 843, 861, 883, 888, 908, 959, 1069, 1087, 1092, 1105], "dummi": [305, 350, 1334, 1358], "dump": 144, "duplic": [56, 105, 247, 254, 255, 256, 315, 319, 350, 361, 528, 614, 638, 833, 843, 887, 888, 889, 923, 926, 959, 1146, 1231, 1358, 1387], "duplicateerror": [638, 843, 1231, 1358], "dur": [256, 350, 889, 959], "durat": [203, 255, 320, 350, 448, 456, 480, 481, 482, 483, 484, 485, 486, 487, 491, 497, 747, 782, 783, 785, 786, 830, 831, 843, 888, 959, 964, 965, 1061, 1069, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1108, 1117, 1339, 1341, 1358], "dure": [55, 104, 148, 149, 163, 203, 228, 350, 1122, 1358], "dutch": [447, 459, 768, 1060, 1072], "dynam": [145, 240, 350, 399, 581, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 843, 883, 959, 963, 1008, 1202], "dynamicgroupbi": [240, 350], "e": [11, 34, 36, 38, 40, 43, 44, 47, 48, 144, 148, 154, 156, 160, 166, 168, 169, 181, 219, 231, 238, 242, 251, 255, 258, 301, 302, 308, 318, 350, 359, 442, 493, 497, 500, 527, 584, 590, 595, 596, 597, 598, 599, 601, 602, 603, 605, 606, 607, 677, 682, 701, 722, 723, 734, 789, 805, 822, 833, 843, 870, 879, 888, 891, 906, 959, 963, 965, 1111, 1117, 1145, 1269, 1287, 1320, 1358, 1376, 1381, 1389], "e101": [41, 350], "e_filt": [601, 603], "e_sum_ov": [601, 603], "e_sum_slic": [601, 603], "each": [38, 41, 48, 52, 53, 54, 56, 65, 72, 83, 149, 150, 153, 158, 167, 172, 173, 174, 175, 177, 215, 217, 224, 231, 238, 239, 240, 253, 255, 259, 272, 274, 278, 282, 284, 286, 307, 312, 316, 319, 320, 328, 329, 331, 333, 335, 336, 344, 350, 375, 420, 424, 425, 440, 459, 475, 488, 506, 530, 533, 559, 562, 569, 579, 586, 590, 638, 641, 649, 650, 658, 662, 673, 678, 685, 698, 702, 703, 707, 708, 716, 718, 719, 727, 734, 749, 763, 766, 772, 797, 798, 802, 825, 833, 843, 864, 867, 868, 874, 879, 883, 888, 902, 905, 908, 924, 926, 935, 937, 939, 941, 942, 950, 959, 984, 1033, 1034, 1040, 1054, 1072, 1092, 1105, 1149, 1152, 1180, 1183, 1190, 1200, 1231, 1233, 1241, 1242, 1256, 1265, 1284, 1288, 1289, 1293, 1294, 1302, 1304, 1305, 1313, 1320, 1328, 1358, 1375, 1381, 1386, 1387, 1389], "eager": [95, 240, 255, 274, 318, 350, 449, 452, 455, 457, 467, 468, 470, 471, 474, 475, 479, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 655, 657, 659, 661, 663, 666, 668, 670, 763, 767, 769, 773, 775, 782, 783, 785, 786, 793, 797, 798, 801, 802, 815, 818, 821, 822, 825, 830, 831, 834, 842, 843, 883, 888, 893, 959, 964, 1061, 1062, 1065, 1068, 1069, 1070, 1071, 1077, 1078, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1091, 1092, 1096, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1386], "eager_execut": 1386, "eagerli": [581, 1367], "ear": [716, 727, 1302], "earlier": [255, 350, 888, 959], "earliest": [240, 350, 473, 474, 726, 729, 784, 883, 951, 959, 1090, 1091, 1312, 1315], "easi": 203, "easiest": 208, "easili": [56, 288, 312, 324, 329, 350, 825, 839, 910, 929, 935, 959], "east": [74, 168, 256, 350, 889, 959], "ebf1d": [41, 350], "edg": [521, 843, 1140, 1358], "eee": [1, 41, 350, 965], "ef": 713, "effect": [41, 233, 240, 350, 456, 510, 590, 616, 618, 620, 773, 843, 883, 932, 933, 959, 1061, 1069], "effici": [131, 150, 251, 253, 350, 589, 843], "efgh": 1381, "eg": [18, 26, 27, 41, 64, 151, 203, 307, 350, 475, 726, 729, 750, 843, 965, 1312, 1315], "egnaro": 1381, "either": [62, 63, 87, 145, 179, 250, 254, 255, 256, 272, 282, 283, 307, 308, 350, 497, 589, 636, 638, 651, 726, 758, 766, 770, 825, 843, 864, 865, 887, 888, 889, 891, 908, 959, 963, 965, 1117, 1229, 1231, 1312, 1358, 1371, 1389], "element": [14, 15, 26, 174, 175, 178, 179, 181, 183, 208, 210, 217, 250, 274, 283, 296, 298, 313, 321, 350, 367, 368, 369, 370, 371, 372, 383, 384, 419, 420, 427, 430, 431, 432, 433, 435, 436, 437, 438, 439, 445, 446, 501, 502, 506, 519, 523, 531, 542, 550, 552, 553, 554, 557, 562, 570, 571, 572, 573, 577, 583, 585, 586, 589, 590, 631, 632, 641, 644, 652, 653, 654, 656, 658, 660, 662, 664, 665, 667, 669, 674, 679, 680, 681, 685, 686, 687, 718, 719, 730, 745, 746, 748, 749, 755, 766, 775, 801, 819, 820, 824, 832, 843, 859, 868, 917, 919, 922, 927, 959, 976, 977, 978, 979, 980, 981, 992, 993, 1028, 1038, 1041, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1058, 1059, 1120, 1121, 1126, 1127, 1139, 1142, 1150, 1159, 1161, 1163, 1164, 1171, 1173, 1174, 1175, 1178, 1183, 1191, 1192, 1193, 1194, 1206, 1207, 1210, 1226, 1233, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1258, 1266, 1267, 1268, 1272, 1273, 1304, 1305, 1316, 1330, 1331, 1332, 1336, 1343, 1344, 1348, 1358, 1375, 1376], "elementwis": [589, 631, 653, 654, 656, 658, 660, 662, 665, 667, 669, 843, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1358], "elig": [893, 959], "elimin": [62, 129, 539, 843, 1160, 1358], "elis": [266, 350, 898, 959], "ellips": 21, "ellipsi": [238, 350], "elppa": 1381, "els": 149, "email": [698, 1284], "email_part": [698, 1284], "emphas": [350, 354], "emploi": 965, "empti": [14, 36, 38, 48, 109, 133, 148, 149, 153, 159, 161, 163, 212, 213, 240, 265, 317, 350, 688, 696, 803, 821, 862, 863, 883, 897, 925, 959, 964, 965, 1041, 1043, 1127, 1147, 1161, 1274, 1282, 1358], "en": [21, 41, 350], "enabl": [29, 30, 47, 51, 55, 62, 63, 96, 97, 152, 160, 164, 166, 168, 172, 173, 174, 175, 187, 205, 288, 309, 324, 350, 362, 364, 645, 646, 675, 690, 700, 702, 714, 754, 839, 843, 864, 865, 875, 902, 910, 915, 929, 959, 967, 972, 973, 1237, 1238, 1260, 1276, 1286, 1288, 1300, 1340, 1347, 1358], "enable_string_cach": 96, "enclos": [512, 843], "encod": [68, 74, 86, 144, 148, 149, 163, 305, 350, 353, 404, 512, 649, 692, 738, 843, 1013, 1241, 1278, 1334, 1358, 1363], "encompass": [521, 843, 1140, 1358], "encount": [120, 148, 149, 163, 240, 350, 623, 624, 705, 706, 773, 777, 791, 843, 883, 959, 1219, 1220, 1291, 1292, 1358], "end": [38, 41, 48, 148, 149, 163, 240, 246, 274, 350, 403, 406, 409, 422, 426, 448, 475, 500, 525, 526, 575, 689, 694, 698, 703, 710, 716, 720, 721, 722, 725, 763, 768, 781, 782, 783, 784, 785, 786, 789, 797, 798, 801, 802, 830, 831, 833, 839, 843, 883, 886, 902, 959, 965, 1015, 1030, 1035, 1061, 1092, 1143, 1144, 1157, 1196, 1280, 1284, 1289, 1296, 1302, 1306, 1307, 1308, 1313, 1358, 1381], "endian": [407, 1016], "endpoint": [188, 440, 638, 801, 843, 1054, 1231, 1358], "ends_a": 1381, "ends_in_digit": 1381, "ends_with": [403, 409, 426, 689, 720, 965, 1035, 1306, 1379], "ends_with_expr": 406, "ends_with_lit": 406, "engin": [10, 15, 39, 48, 49, 50, 51, 62, 63, 95, 143, 150, 151, 153, 159, 185, 239, 254, 259, 308, 315, 336, 350, 589, 822, 843, 864, 865, 875, 882, 887, 893, 897, 902, 915, 923, 934, 942, 956, 959, 963, 1210, 1339, 1358, 1370, 1386], "engine_opt": [39, 153, 350], "enginetyp": [48, 49, 50, 51, 62, 63, 864, 865, 875, 902, 915, 959], "enough": [553, 682, 843, 1174, 1269, 1358], "ensur": [11, 41, 52, 54, 95, 145, 151, 178, 181, 205, 231, 239, 272, 274, 278, 283, 308, 350, 527, 589, 843, 879, 882, 893, 905, 934, 959, 965, 967, 1339, 1358], "enter": 203, "entir": [41, 153, 159, 350], "entri": [203, 350, 959, 964, 1386], "entropi": [843, 1358], "enumer": [74, 135, 148, 149, 153, 159, 163, 253, 350], "env": [4, 184], "env_onli": 31, "environ": [4, 31, 38, 43, 47, 48, 49, 50, 51, 62, 63, 145, 158, 160, 163, 166, 167, 168, 182, 185, 188, 193, 307, 350, 864, 865, 875, 902, 915, 959], "eol_char": [148, 149, 163], "eparg": 1381, "epoch": [70, 71, 488, 793, 1105, 1382], "epoch_": [457, 1070], "epoch_n": [457, 1070], "epochtimeunit": [457, 793, 1070], "eq": [231, 278, 350, 495, 506, 843, 879, 905, 959, 1113, 1358], "eq_miss": [843, 1222, 1358], "equal": [55, 97, 148, 149, 163, 172, 173, 174, 175, 240, 255, 256, 266, 296, 350, 440, 488, 494, 495, 515, 541, 581, 626, 638, 644, 652, 653, 654, 656, 658, 660, 662, 664, 665, 667, 669, 685, 710, 711, 714, 736, 766, 801, 819, 820, 833, 839, 843, 879, 883, 888, 889, 898, 905, 917, 959, 1054, 1092, 1113, 1202, 1222, 1231, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1296, 1297, 1300, 1322, 1358, 1375, 1378, 1389], "equiprob": [218, 276, 342, 350, 639, 662, 663, 816, 843, 869, 903, 948, 959, 1055, 1232, 1249, 1358], "equival": [41, 64, 130, 132, 133, 134, 136, 157, 158, 167, 240, 250, 270, 350, 359, 363, 425, 494, 495, 497, 510, 515, 517, 541, 588, 610, 612, 625, 626, 627, 630, 636, 708, 732, 734, 735, 742, 750, 757, 843, 883, 959, 1034, 1112, 1113, 1117, 1133, 1135, 1159, 1162, 1209, 1221, 1222, 1294, 1318, 1320, 1321, 1358, 1368, 1376, 1388], "err": 699, "error": [15, 40, 63, 64, 95, 115, 119, 121, 132, 133, 136, 143, 148, 149, 153, 160, 163, 168, 255, 274, 283, 308, 350, 361, 386, 387, 404, 447, 556, 558, 560, 581, 614, 646, 689, 692, 697, 699, 701, 705, 706, 726, 728, 729, 733, 843, 861, 865, 888, 934, 942, 959, 995, 996, 1013, 1060, 1177, 1179, 1181, 1238, 1275, 1278, 1283, 1285, 1287, 1291, 1292, 1312, 1314, 1315, 1319, 1339, 1358, 1384], "escap": [98, 148, 149, 151, 163, 695, 712, 713, 1281, 1298, 1299], "esp": 15, "especi": [177, 650, 843, 959, 1242, 1358], "espresso": 965, "est": 785, "establish": [150, 203], "estim": [148, 149, 209, 226, 350, 366, 498, 499, 539, 762, 843, 858, 959, 975, 1115, 1118, 1119, 1160, 1358], "estimated_s": [350, 1358], "etc": [22, 40, 41, 145, 148, 152, 153, 154, 156, 164, 165, 350, 590, 843, 965, 1257, 1259, 1358, 1382], "eu": [164, 165], "eur": [238, 350, 1389], "europ": [452, 456, 474, 1065, 1069, 1091], "eval": [306, 350, 589, 590, 788, 843, 1210, 1336, 1358], "evalu": [48, 49, 50, 51, 168, 229, 231, 255, 278, 350, 363, 376, 378, 379, 411, 412, 413, 414, 416, 417, 439, 506, 524, 544, 545, 581, 630, 631, 758, 760, 763, 767, 769, 773, 775, 782, 783, 785, 786, 788, 797, 798, 801, 802, 815, 818, 821, 825, 830, 831, 833, 834, 843, 864, 879, 885, 887, 888, 905, 959, 985, 987, 988, 1020, 1021, 1022, 1023, 1025, 1026, 1053, 1126, 1165, 1166, 1349, 1358, 1378], "even": [38, 48, 148, 254, 350, 497, 635, 638, 843, 887, 959, 965, 1117, 1231, 1358], "evenli": [240, 350, 801, 802, 883, 959], "event": [63, 865, 959], "eventu": [39, 350], "ever": [631, 843], "everi": [15, 38, 48, 148, 149, 153, 159, 163, 234, 240, 304, 320, 350, 378, 379, 380, 381, 384, 386, 392, 435, 436, 437, 438, 439, 475, 488, 502, 514, 546, 547, 551, 554, 557, 558, 559, 567, 570, 575, 579, 650, 696, 777, 778, 843, 881, 883, 959, 987, 988, 989, 990, 993, 995, 1001, 1049, 1050, 1051, 1052, 1053, 1092, 1105, 1121, 1132, 1167, 1168, 1172, 1175, 1178, 1179, 1180, 1188, 1191, 1196, 1200, 1242, 1282, 1358], "everybodi": [690, 714, 1276, 1300], "everyth": 965, "ew": [496, 498, 499, 843, 1116, 1118, 1119, 1358], "ewm_mean": [843, 1358], "ewm_mean_bi": [843, 1358], "ewm_std": [843, 1358], "ewm_var": [843, 1358], "ewma": [497, 843, 1117, 1358], "exact": [174, 177, 179, 183, 255, 294, 350, 366, 510, 696, 724, 725, 726, 728, 729, 750, 843, 888, 959, 1282, 1312, 1314, 1315], "exactli": [132, 133, 136, 172, 173, 174, 175, 178, 179, 183, 350, 718, 719, 724, 725, 787, 959, 1264, 1304, 1305, 1310, 1311, 1358], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 64, 65, 74, 83, 87, 95, 96, 97, 101, 104, 105, 106, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 144, 145, 148, 149, 150, 151, 152, 153, 157, 158, 159, 163, 164, 165, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 350, 353, 354, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 839, 843, 855, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 959, 964, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1129, 1131, 1132, 1134, 1136, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1325, 1326, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1358, 1363, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1378, 1380, 1381, 1382, 1383, 1384, 1386, 1387, 1388], "exc_tb": 1386, "exc_typ": 1386, "exc_val": 1386, "exce": [238, 350], "excel": [37, 41, 147, 153, 350, 855], "excelspreadsheetengin": 153, "except": [0, 220, 235, 242, 255, 258, 279, 301, 350, 646, 703, 727, 789, 843, 855, 871, 888, 906, 959, 965, 1029, 1139, 1164, 1238, 1289, 1313, 1330, 1339, 1358, 1385], "exclud": [179, 183, 240, 350, 420, 435, 438, 447, 459, 527, 597, 749, 768, 839, 843, 883, 959, 965, 1060, 1072, 1145, 1358], "excluded_dtyp": [179, 180, 183], "exclus": [283, 350, 757, 763, 797, 798, 843], "execut": [10, 40, 48, 49, 50, 51, 55, 62, 63, 64, 95, 145, 150, 151, 257, 297, 350, 442, 553, 754, 822, 833, 843, 860, 864, 865, 870, 875, 893, 902, 904, 915, 918, 934, 959, 1174, 1347, 1358, 1368, 1369, 1370, 1372, 1386, 1388], "execute_glob": 1386, "execute_opt": [150, 151], "exist": [1, 39, 40, 41, 42, 56, 74, 105, 152, 160, 164, 168, 179, 220, 235, 274, 279, 314, 319, 324, 325, 350, 361, 403, 406, 409, 451, 474, 712, 713, 771, 843, 867, 871, 874, 906, 909, 926, 928, 929, 930, 959, 965, 1064, 1091, 1298, 1299, 1388], "existing_t": 1388, "existing_table_path": [40, 350], "exit": [55, 96, 203, 1373, 1386], "exp": [496, 497, 498, 499, 843, 1116, 1117, 1118, 1119, 1358, 1379], "exp_a": 1380, "expand": [145, 148, 160, 163, 168, 502, 595, 599, 644, 740, 843, 965, 1121, 1358], "expand_selector": 965, "expans": 737, "expect": [38, 40, 43, 47, 48, 49, 50, 51, 54, 72, 78, 110, 118, 126, 148, 150, 152, 158, 160, 163, 164, 166, 167, 168, 173, 175, 193, 350, 581, 590, 803, 843, 891, 893, 959], "expens": [148, 149, 158, 160, 163, 167, 168, 182, 184, 252, 259, 283, 284, 285, 314, 315, 350, 590, 843, 867, 869, 874, 909, 923, 928, 959, 1122, 1210, 1358, 1389], "experiment": [47, 51, 161, 256, 312, 350, 801, 802, 889, 929, 959], "expiri": [38, 40, 43, 47, 48, 49, 50, 51, 152, 158, 160, 163, 164, 166, 167, 168, 193, 350, 959], "explain": [129, 208, 257, 350, 864, 959, 1385], "explainformat": [875, 959], "explicit": [41, 104, 150, 163, 177, 297, 319, 350, 480, 817, 918, 926, 959, 1097], "explicitli": [74, 104, 151, 177, 179, 203, 235, 254, 350, 645, 825, 843, 854, 887, 959, 1386], "explod": [145, 350, 420, 508, 631, 647, 749, 843, 959, 1239, 1358, 1376], "explor": [218, 350, 869, 959], "expon": [636, 843, 1229, 1358, 1380], "exponenti": [496, 497, 498, 499, 501, 636, 843, 1116, 1117, 1118, 1119, 1120, 1358, 1380], "export": [41, 43, 44, 49, 206, 252, 253, 284, 285, 302, 304, 307, 350, 839, 959, 965, 968, 1333, 1358], "expos": 855, "expr": [1, 52, 54, 56, 57, 58, 59, 60, 143, 145, 227, 229, 230, 245, 254, 255, 256, 270, 274, 283, 288, 289, 307, 312, 324, 325, 350, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 838, 839, 843, 844, 845, 848, 849, 850, 851, 852, 876, 877, 878, 887, 888, 889, 903, 910, 911, 929, 930, 959, 965, 1053, 1112, 1113, 1117, 1124, 1125, 1131, 1133, 1135, 1162, 1174, 1180, 1196, 1200, 1209, 1221, 1222, 1275, 1280, 1287, 1306, 1358, 1384], "expr1": [1378, 1386], "expr2": [1378, 1386], "expr_unique_subset": [270, 350], "express": [0, 8, 48, 49, 50, 51, 52, 54, 62, 63, 129, 143, 145, 176, 179, 183, 210, 227, 229, 231, 239, 245, 254, 255, 259, 270, 274, 278, 283, 288, 289, 293, 296, 307, 312, 313, 324, 325, 327, 329, 336, 350, 359, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 375, 376, 380, 381, 382, 383, 384, 387, 398, 403, 404, 405, 406, 407, 408, 409, 420, 422, 424, 425, 426, 429, 430, 431, 432, 433, 439, 440, 441, 442, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 497, 500, 502, 503, 505, 506, 510, 512, 513, 515, 516, 517, 518, 524, 527, 528, 529, 530, 531, 532, 533, 541, 542, 546, 547, 549, 550, 553, 554, 560, 562, 580, 581, 587, 588, 589, 590, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 608, 610, 612, 614, 615, 617, 619, 621, 622, 625, 626, 628, 630, 631, 635, 636, 637, 638, 640, 644, 645, 646, 647, 649, 650, 673, 674, 675, 678, 680, 681, 683, 685, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 712, 713, 714, 716, 717, 718, 719, 727, 731, 741, 742, 745, 746, 749, 750, 751, 753, 754, 756, 757, 758, 759, 761, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 809, 812, 815, 817, 818, 819, 820, 821, 823, 825, 827, 829, 830, 831, 833, 834, 839, 842, 855, 859, 864, 865, 875, 876, 879, 882, 887, 888, 902, 905, 910, 911, 914, 915, 917, 922, 929, 930, 931, 933, 935, 942, 959, 965, 992, 1042, 1053, 1060, 1064, 1097, 1112, 1113, 1117, 1123, 1133, 1135, 1145, 1162, 1171, 1174, 1209, 1210, 1221, 1222, 1237, 1238, 1258, 1262, 1275, 1276, 1277, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1291, 1292, 1298, 1299, 1300, 1313, 1317, 1358, 1376, 1378, 1380, 1381, 1385], "exprmetanamespac": [594, 600], "ext": [52, 53, 54, 150], "extend": [0, 133, 322, 350, 503, 843, 855, 963, 974, 1123, 1358], "extend_const": [843, 1358], "extens": [309, 350, 1340, 1358], "extern": [200, 931, 959], "external_shallow_clon": 200, "extra": [40, 145, 148, 149, 152, 154, 156, 160, 163, 164, 165, 168, 228, 240, 350, 843, 883, 959, 1122, 1358], "extract": [137, 208, 297, 350, 450, 453, 455, 458, 461, 462, 463, 464, 465, 466, 469, 471, 472, 476, 478, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 492, 635, 698, 699, 700, 705, 706, 716, 718, 843, 1063, 1066, 1067, 1068, 1071, 1074, 1078, 1079, 1080, 1082, 1083, 1086, 1088, 1089, 1093, 1095, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1106, 1107, 1109, 1284, 1285, 1286, 1291, 1292, 1302, 1379], "extract_mani": [702, 1288], "extract_numb": [635, 843], "extracted_nr": 698, "extrem": [503, 653, 843, 1123, 1244, 1358], "extrema": [677, 843, 1263, 1358], "f": [52, 57, 149, 150, 231, 238, 253, 302, 308, 314, 318, 350, 359, 399, 408, 581, 677, 696, 726, 729, 771, 843, 879, 959, 965, 1008, 1202, 1282, 1312, 1315, 1358, 1363, 1376], "f32": [1, 59, 211, 297, 306, 312, 350, 677, 822, 843, 861, 918, 959, 965, 1208, 1358, 1384], "f4": [308, 350], "f5ed2452": [41, 350], "f64": [7, 9, 11, 12, 16, 19, 20, 22, 23, 24, 25, 26, 28, 56, 58, 60, 64, 83, 95, 131, 133, 157, 169, 176, 179, 211, 212, 213, 216, 218, 219, 220, 222, 224, 229, 230, 233, 237, 238, 239, 240, 245, 246, 254, 255, 261, 262, 263, 264, 268, 274, 275, 276, 295, 296, 298, 300, 312, 321, 324, 329, 332, 334, 337, 338, 339, 340, 342, 343, 350, 358, 361, 367, 368, 369, 370, 371, 372, 390, 396, 401, 408, 421, 427, 428, 430, 431, 432, 440, 441, 445, 446, 476, 493, 494, 495, 496, 497, 498, 499, 500, 501, 504, 505, 509, 510, 515, 517, 525, 526, 534, 535, 536, 537, 539, 541, 553, 564, 565, 577, 583, 584, 585, 586, 588, 591, 592, 593, 609, 612, 614, 623, 624, 625, 626, 632, 636, 638, 639, 640, 641, 645, 646, 652, 653, 654, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 679, 680, 681, 682, 686, 687, 741, 745, 746, 750, 755, 764, 765, 769, 771, 773, 775, 788, 789, 801, 802, 805, 808, 809, 810, 822, 824, 832, 839, 843, 861, 862, 869, 871, 872, 877, 878, 882, 883, 886, 887, 888, 895, 896, 903, 917, 919, 927, 929, 931, 935, 938, 940, 943, 944, 945, 946, 948, 949, 959, 965, 976, 977, 978, 979, 980, 981, 999, 1005, 1010, 1017, 1038, 1039, 1044, 1045, 1046, 1054, 1055, 1058, 1059, 1093, 1116, 1117, 1118, 1119, 1120, 1124, 1129, 1140, 1143, 1144, 1174, 1185, 1186, 1198, 1204, 1205, 1206, 1207, 1226, 1229, 1231, 1233, 1238, 1243, 1244, 1246, 1247, 1249, 1250, 1251, 1253, 1254, 1255, 1266, 1267, 1268, 1272, 1331, 1332, 1346, 1358, 1367, 1375, 1376, 1380, 1383, 1386, 1389], "f_string": 792, "fa1e": [731, 1317], "face": [38, 43, 47, 48, 49, 50, 51, 158, 160, 163, 166, 167, 168, 193, 350, 959], "facil": 150, "facilit": [214, 350], "factor": [496, 498, 499, 747, 843, 1116, 1118, 1119, 1341, 1358], "fail": [38, 39, 40, 43, 47, 48, 49, 50, 51, 131, 152, 154, 158, 160, 163, 164, 166, 167, 168, 193, 207, 308, 315, 350, 376, 478, 581, 726, 728, 729, 733, 843, 923, 959, 1210, 1312, 1314, 1315, 1319, 1339, 1358, 1384], "fall": [168, 440, 638, 843, 864, 875, 902, 915, 934, 959, 1054, 1231, 1358, 1375], "fallback": [131, 153], "fals": [5, 7, 8, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 38, 40, 41, 47, 48, 49, 50, 51, 52, 56, 62, 63, 64, 129, 131, 132, 133, 135, 136, 137, 143, 145, 148, 149, 150, 152, 153, 154, 156, 158, 159, 160, 163, 164, 166, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 207, 210, 211, 212, 213, 218, 225, 231, 233, 237, 238, 239, 240, 244, 247, 248, 249, 252, 254, 255, 257, 262, 263, 269, 270, 272, 274, 275, 278, 283, 284, 285, 286, 288, 291, 294, 296, 297, 300, 303, 305, 308, 309, 313, 314, 315, 319, 320, 322, 324, 332, 334, 337, 338, 340, 343, 350, 362, 363, 364, 375, 378, 379, 382, 386, 387, 395, 400, 403, 406, 409, 420, 421, 422, 426, 434, 435, 436, 437, 438, 439, 440, 447, 459, 460, 476, 493, 494, 495, 496, 498, 499, 517, 518, 521, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 544, 545, 549, 553, 556, 558, 560, 569, 576, 581, 582, 588, 589, 590, 594, 596, 597, 598, 600, 602, 605, 606, 625, 626, 628, 630, 631, 633, 634, 638, 641, 652, 653, 654, 656, 658, 660, 662, 664, 665, 667, 669, 673, 675, 677, 682, 684, 685, 688, 689, 690, 691, 694, 700, 701, 702, 704, 705, 712, 713, 714, 717, 718, 720, 726, 728, 729, 731, 749, 751, 754, 757, 758, 759, 760, 761, 763, 766, 767, 768, 769, 772, 773, 775, 776, 777, 782, 783, 785, 786, 791, 797, 798, 801, 802, 803, 805, 809, 815, 818, 821, 822, 825, 827, 830, 831, 833, 834, 843, 859, 861, 862, 863, 864, 865, 869, 875, 879, 882, 883, 887, 888, 891, 893, 902, 905, 910, 913, 915, 917, 918, 922, 923, 926, 929, 934, 938, 940, 943, 944, 946, 949, 959, 964, 965, 972, 973, 984, 987, 988, 991, 995, 996, 1004, 1009, 1012, 1013, 1015, 1018, 1029, 1030, 1032, 1035, 1037, 1040, 1041, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1060, 1072, 1073, 1093, 1113, 1114, 1116, 1118, 1119, 1126, 1128, 1134, 1136, 1145, 1146, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1160, 1165, 1166, 1170, 1174, 1177, 1179, 1181, 1190, 1197, 1203, 1216, 1222, 1224, 1227, 1228, 1231, 1233, 1234, 1235, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1256, 1260, 1264, 1269, 1271, 1274, 1275, 1276, 1277, 1280, 1286, 1287, 1288, 1290, 1291, 1298, 1299, 1300, 1303, 1304, 1306, 1312, 1314, 1315, 1317, 1334, 1339, 1340, 1344, 1347, 1349, 1358, 1368, 1370, 1376, 1381, 1386], "far": [41, 350], "fashion": [254, 350], "fast": [47, 49, 51, 145, 182, 184, 350, 503, 675, 843, 959, 963, 1123, 1260, 1358, 1389], "fast_executemani": [39, 350], "faster": [48, 49, 50, 51, 62, 63, 129, 150, 153, 228, 308, 318, 350, 590, 752, 843, 864, 865, 875, 902, 915, 959, 1122, 1210, 1358], "fastexcel": [153, 171], "favor": [39, 350], "fay": 144, "feat1": [307, 312, 350], "feat2": [307, 312, 350], "feather": [43, 154, 166, 350, 855], "featur": [1, 47, 61, 72, 78, 165, 307, 312, 350], "feature_0": [931, 959], "feature_0_train": [931, 959], "feature_1": [931, 959], "feature_nam": [312, 350], "feb": [171, 1381], "februari": 1381, "fed": 722, "feel": [690, 714, 1276, 1300], "fetch": [139, 864, 959], "fetch_california_h": [312, 350], "few": [238, 350], "fewer": [703, 727, 959, 1289, 1313], "ff": 1375, "ff00": [731, 1317], "fff": 1, "ffff00": [404, 405, 692, 1013, 1014, 1278], "ffffff": [41, 350], "ffi": [226, 350, 1115, 1358], "fgg": 965, "fghi": 1381, "fh": 149, "fiction": 1367, "field": [37, 38, 40, 48, 87, 122, 125, 133, 316, 350, 399, 581, 589, 590, 616, 618, 620, 649, 698, 699, 705, 718, 719, 739, 740, 741, 747, 754, 777, 778, 804, 825, 833, 843, 924, 959, 1008, 1202, 1210, 1241, 1285, 1304, 1305, 1326, 1328, 1341, 1358, 1382], "field_0": [399, 581, 1008, 1202], "field_1": [399, 581, 1008, 1202], "field_2": [1008, 1202], "field_n": [399, 581, 1008, 1202], "field_nam": [590, 843, 1210, 1358], "fiftyf": [523, 843], "figsiz": [605, 902, 915, 959], "figur": [605, 672, 843, 915, 959, 1255, 1358], "file": [2, 3, 5, 6, 33, 36, 37, 38, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 219, 228, 290, 350, 442, 512, 604, 608, 843, 870, 912, 959, 963, 1122, 1358], "file_cache_ttl": [158, 163, 166, 167], "file_idx": [53, 140, 142], "file_path": [52, 53, 54, 140, 142], "filenam": 154, "filesourc": [153, 159, 160, 168], "filesystem": [40, 152, 164, 165, 350], "fill": [56, 64, 212, 229, 230, 293, 318, 350, 354, 402, 435, 438, 504, 505, 511, 525, 526, 654, 656, 658, 660, 662, 665, 667, 669, 676, 792, 815, 818, 834, 843, 877, 878, 914, 931, 959, 1011, 1124, 1125, 1130, 1144, 1223, 1245, 1246, 1248, 1251, 1252, 1253, 1262, 1358], "fill_char": [710, 711, 1296, 1297], "fill_nan": [230, 350, 505, 843, 878, 959, 1125, 1358], "fill_nul": [56, 229, 320, 350, 402, 435, 438, 504, 511, 676, 843, 877, 931, 959, 1011, 1124, 1130, 1358], "fill_valu": [293, 318, 350, 676, 843, 914, 959, 1262, 1358], "fillnullstrategi": [230, 350, 505, 843, 878, 959, 1125, 1358], "film": 1367, "filter": [1, 48, 49, 50, 51, 57, 62, 63, 95, 129, 143, 163, 164, 168, 169, 222, 223, 247, 248, 249, 274, 278, 336, 350, 422, 426, 601, 603, 694, 720, 756, 781, 784, 791, 821, 822, 833, 843, 864, 865, 872, 873, 875, 885, 902, 905, 915, 918, 942, 959, 965, 1259, 1358, 1374], "final": [14, 41, 56, 145, 168, 255, 257, 350, 496, 498, 499, 843, 869, 888, 959, 1116, 1118, 1119, 1358, 1387], "find": [64, 236, 350, 523, 674, 689, 690, 702, 843, 1142, 1258, 1276, 1288, 1298, 1358], "find_pat": 701, "fine": [864, 875, 902, 915, 956, 959], "finish": [228, 350, 1122, 1358], "finit": [529, 750, 773, 843, 1148, 1358], "first": [47, 56, 148, 149, 153, 154, 156, 159, 160, 163, 168, 172, 173, 174, 175, 208, 238, 240, 242, 254, 255, 258, 259, 269, 273, 274, 282, 301, 305, 306, 314, 315, 320, 327, 333, 350, 375, 377, 386, 439, 443, 468, 470, 475, 491, 510, 520, 523, 530, 543, 551, 553, 558, 559, 581, 589, 590, 602, 611, 635, 636, 651, 674, 685, 689, 696, 697, 701, 703, 705, 706, 712, 713, 727, 734, 769, 770, 777, 791, 795, 833, 839, 843, 883, 884, 887, 888, 892, 901, 908, 923, 931, 933, 939, 959, 965, 984, 995, 1053, 1055, 1056, 1085, 1087, 1092, 1108, 1139, 1142, 1149, 1164, 1172, 1174, 1179, 1180, 1202, 1210, 1258, 1271, 1282, 1283, 1285, 1287, 1289, 1291, 1292, 1298, 1299, 1313, 1320, 1330, 1334, 1336, 1339, 1358, 1378, 1379, 1381, 1387, 1389], "first_column": [41, 350], "first_non_nul": [581, 1202], "first_part": [718, 719, 1304, 1305], "fisher": [539, 652, 682, 843, 1160, 1243, 1269, 1358], "fit": [144, 252, 294, 318, 350, 677, 818, 843, 1263, 1264, 1358], "five": [311, 350, 1389], "fix": [11, 65, 74, 177, 491, 787, 802, 1108], "flag": [61, 152, 164, 176, 291, 308, 350, 675, 689, 697, 698, 701, 712, 713, 843, 875, 893, 913, 959, 965, 1260, 1275, 1283, 1284, 1287, 1298, 1299, 1339, 1358, 1381], "flat": [144, 285, 350, 554, 647, 843, 1175, 1239, 1358], "flatten": 843, "flavour": [41, 150, 350], "flight": 150, "flight_sql": 150, "flightsql": 150, "float": [11, 12, 38, 41, 48, 76, 77, 148, 149, 163, 169, 172, 173, 174, 175, 176, 179, 183, 207, 218, 222, 226, 229, 255, 276, 286, 307, 308, 342, 350, 382, 428, 440, 445, 446, 476, 493, 494, 495, 496, 498, 499, 504, 509, 510, 515, 517, 525, 529, 532, 534, 535, 536, 537, 541, 549, 569, 584, 588, 591, 605, 609, 623, 624, 625, 626, 636, 638, 639, 653, 654, 656, 658, 660, 662, 663, 665, 667, 669, 671, 673, 679, 750, 816, 818, 843, 869, 872, 877, 888, 903, 915, 948, 959, 965, 991, 1029, 1039, 1054, 1055, 1057, 1058, 1059, 1093, 1111, 1115, 1116, 1118, 1119, 1124, 1129, 1140, 1160, 1170, 1190, 1205, 1219, 1220, 1229, 1230, 1231, 1232, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1256, 1259, 1266, 1269, 1273, 1329, 1339, 1348, 1358, 1386, 1389], "float16": [312, 350], "float32": [1, 11, 38, 48, 59, 211, 233, 306, 307, 308, 312, 350, 497, 843, 861, 959, 965, 1117, 1147, 1208, 1337, 1339, 1342, 1358], "float4": [297, 350, 822, 918, 959, 1384], "float64": [11, 38, 41, 48, 95, 133, 148, 157, 176, 179, 214, 224, 226, 233, 287, 312, 324, 350, 367, 368, 369, 370, 371, 372, 408, 421, 430, 431, 432, 441, 476, 497, 500, 534, 535, 640, 680, 681, 745, 746, 789, 805, 815, 818, 834, 839, 843, 866, 874, 909, 929, 959, 964, 965, 1093, 1117, 1340, 1346, 1358], "float_list": 83, "float_precis": [9, 11, 28, 38, 41, 48, 350, 959], "float_scientif": [38, 48, 350, 959], "floatfmt": 12, "floor": [58, 510, 843, 1358, 1379], "floor_a": 1380, "floordiv": [750, 843], "fmt": [12, 255, 350, 524, 792, 843, 885, 888, 959], "fmt_number": [350, 354], "fmt_str_length": [13, 782, 783, 785, 786], "fmt_table_cell_list_len": 14, "fmt_titl": [41, 350], "fn": [777, 778, 791, 817], "foggi": [712, 713, 1298, 1299], "fold": [350, 602, 769, 777, 778, 817, 833], "folder": 169, "follow": [41, 47, 61, 143, 148, 149, 150, 152, 153, 159, 163, 164, 165, 240, 255, 259, 273, 282, 308, 320, 350, 470, 475, 488, 497, 589, 635, 636, 641, 651, 655, 657, 659, 661, 663, 664, 666, 668, 670, 679, 739, 750, 765, 782, 783, 785, 786, 805, 830, 831, 833, 835, 836, 838, 843, 844, 845, 848, 850, 851, 852, 883, 888, 901, 908, 959, 965, 1087, 1092, 1105, 1117, 1229, 1233, 1257, 1259, 1266, 1339, 1350, 1352, 1354, 1358, 1359, 1364, 1365, 1366, 1384, 1389], "font": [41, 350], "font_color": [41, 350], "font_siz": [41, 350], "foo": [36, 38, 40, 43, 44, 45, 46, 47, 144, 157, 158, 211, 214, 215, 216, 220, 221, 222, 223, 224, 225, 228, 231, 233, 235, 236, 237, 241, 242, 243, 244, 245, 246, 248, 254, 258, 259, 260, 261, 262, 263, 264, 267, 268, 271, 274, 276, 278, 279, 280, 283, 286, 287, 288, 290, 292, 295, 298, 299, 300, 301, 302, 304, 305, 306, 308, 309, 310, 314, 315, 316, 321, 322, 323, 328, 350, 423, 440, 442, 470, 514, 520, 524, 543, 594, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 638, 647, 688, 691, 693, 696, 698, 699, 704, 715, 717, 719, 721, 722, 723, 724, 725, 732, 735, 744, 762, 773, 774, 775, 790, 794, 795, 796, 799, 800, 806, 808, 810, 811, 813, 814, 816, 821, 824, 828, 832, 833, 839, 843, 861, 866, 867, 871, 872, 873, 874, 879, 885, 886, 887, 900, 905, 906, 909, 910, 923, 924, 928, 931, 959, 964, 965, 1031, 1054, 1087, 1181, 1229, 1231, 1239, 1277, 1279, 1282, 1284, 1285, 1301, 1305, 1310, 1311, 1318, 1321, 1358, 1372, 1374, 1375, 1376, 1378, 1381, 1384], "foo1": 1381, "foo11": [233, 350], "foo_": [599, 717, 792], "foo_1": [305, 350], "foo_2": [305, 350], "foo_3_4": 1381, "foo_a": [274, 350], "foo_a_bar_1": 792, "foo_at_1": 1376, "foo_b": [274, 350], "foo_b_bar_2": 792, "foo_bar": [594, 600, 717, 803, 1372], "foo_bar2": [594, 600], "foo_bar_baz": 717, "foo_c_bar_3": 792, "foo_low": [732, 1381], "foo_mean": 1376, "foo_q25": 1375, "foo_q50": 1375, "foo_q75": 1375, "foo_std": 1375, "foo_strip": 721, "foo_strip_end": 722, "foo_strip_start": 723, "foo_sum": [1375, 1376], "foo_uniqu": 1376, "foo_upp": [735, 1381], "foo_var": 1375, "foobar": [724, 725, 1310, 1311, 1381], "foobarbar": [725, 1311], "foofoobar": [724, 1310], "foral": [496, 498, 499, 843, 1116, 1118, 1119, 1358], "forc": [148, 154, 158, 160, 255, 259, 308, 336, 350, 581, 887, 888, 942, 959, 1210, 1339, 1358], "force_parallel": [255, 350, 887, 888, 959], "foreign": 200, "form": [38, 48, 130, 132, 133, 134, 136, 157, 158, 167, 252, 284, 318, 350, 480, 632, 709, 734, 843, 959, 1097, 1226, 1295, 1320, 1358, 1381], "format": [7, 12, 16, 17, 21, 37, 38, 41, 43, 44, 47, 48, 100, 131, 146, 148, 149, 150, 153, 154, 156, 159, 163, 169, 206, 219, 227, 238, 252, 265, 274, 284, 285, 290, 304, 317, 348, 350, 354, 442, 475, 477, 480, 604, 605, 606, 726, 728, 729, 733, 787, 843, 870, 875, 876, 897, 912, 925, 959, 963, 968, 1094, 1097, 1312, 1314, 1315, 1319, 1357, 1381, 1382], "formul": [222, 350, 872, 873, 959], "formula": [41, 350, 493, 843, 1111, 1358], "fortran": [307, 308, 350], "forward": [230, 255, 293, 320, 350, 394, 435, 438, 447, 467, 505, 511, 574, 676, 843, 878, 888, 914, 959, 1003, 1060, 1084, 1125, 1130, 1195, 1262, 1358], "forward_fil": [402, 505, 843, 1011, 1125, 1358], "found": [21, 38, 41, 48, 101, 122, 125, 133, 137, 153, 160, 168, 224, 297, 350, 523, 674, 701, 706, 724, 725, 726, 729, 843, 918, 959, 1142, 1258, 1287, 1292, 1310, 1311, 1312, 1315, 1358, 1370, 1381, 1386], "four": [311, 350, 1386], "fourth": [539, 843, 1160, 1358], "frac": [496, 497, 498, 499, 682, 843, 1116, 1117, 1118, 1119, 1269, 1358], "fraction": [38, 48, 172, 173, 174, 175, 286, 350, 476, 569, 632, 673, 726, 729, 843, 959, 1093, 1190, 1226, 1256, 1312, 1315, 1358], "fragment": 1386, "frame": [38, 39, 41, 48, 56, 63, 64, 133, 149, 153, 159, 172, 173, 211, 212, 218, 252, 253, 257, 259, 266, 270, 273, 283, 284, 285, 297, 312, 318, 319, 350, 480, 822, 861, 862, 869, 898, 901, 918, 926, 959, 965, 1041, 1097, 1358, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1385, 1389], "frame_data": [1369, 1372], "frameinittyp": [350, 959], "frametyp": [56, 1386], "framework": [274, 317, 350, 925, 959], "freedom": [298, 321, 350, 577, 583, 665, 666, 669, 670, 687, 755, 775, 819, 820, 824, 832, 843, 919, 927, 959, 1251, 1253, 1273, 1348, 1358], "freeli": [822, 918, 959, 965], "freez": [41, 350], "freeze_pan": [41, 350], "frequenc": [320, 350, 754, 843, 1347, 1358], "frequent": [1257, 1259, 1358], "fri": [350, 353], "fridai": [240, 350, 447, 459, 477, 768, 883, 959, 1060, 1072, 1094, 1097], "friendship": 13, "from": [2, 3, 4, 5, 6, 11, 17, 29, 33, 37, 38, 40, 41, 43, 47, 48, 49, 50, 51, 56, 64, 74, 87, 95, 100, 104, 120, 124, 130, 131, 132, 133, 134, 135, 136, 137, 139, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 188, 193, 208, 211, 218, 219, 220, 226, 228, 231, 232, 238, 240, 252, 253, 254, 255, 256, 257, 265, 274, 278, 279, 282, 283, 285, 286, 288, 289, 297, 305, 312, 314, 315, 317, 318, 319, 320, 326, 350, 353, 354, 399, 408, 440, 441, 442, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 497, 500, 510, 512, 525, 539, 557, 569, 581, 590, 598, 623, 624, 626, 631, 632, 635, 638, 640, 651, 653, 655, 657, 659, 661, 663, 666, 668, 670, 673, 685, 697, 698, 703, 705, 706, 716, 721, 722, 723, 724, 725, 726, 727, 728, 729, 733, 752, 764, 765, 768, 769, 781, 782, 783, 784, 785, 786, 787, 801, 803, 818, 822, 829, 830, 831, 833, 839, 842, 843, 861, 869, 870, 871, 879, 883, 887, 888, 889, 897, 905, 906, 908, 910, 911, 918, 923, 925, 926, 931, 932, 959, 963, 964, 965, 1008, 1017, 1054, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1113, 1115, 1117, 1122, 1160, 1178, 1190, 1202, 1219, 1220, 1222, 1223, 1226, 1231, 1244, 1256, 1283, 1284, 1289, 1291, 1302, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1319, 1334, 1349, 1358, 1367, 1368, 1369, 1370, 1375, 1376, 1377, 1378, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389], "from_arrai": 822, "from_arrow": 131, "from_json": 843, "from_panda": 131, "from_repr": [306, 350, 1336, 1358], "fromkei": [57, 59], "front": [240, 350, 883, 959], "fruit": [303, 350, 422, 426, 648, 694, 720, 727, 843, 1030, 1035, 1280, 1306, 1313], "fruits_revers": [648, 843], "fsspec": [148, 149, 154, 156, 164, 165, 171], "fsspecfileio": 165, "full": [12, 27, 47, 51, 56, 71, 100, 133, 136, 148, 149, 150, 152, 154, 157, 158, 160, 163, 164, 165, 167, 168, 169, 254, 319, 350, 703, 705, 712, 713, 726, 727, 728, 729, 733, 782, 783, 887, 893, 926, 959, 963, 965, 1289, 1291, 1298, 1299, 1312, 1313, 1314, 1315, 1319, 1358, 1374, 1389], "full_path": [140, 142], "full_sent": 772, "fulli": [181, 273, 286, 308, 350, 521, 843, 1140, 1358], "funcnam": [41, 350], "function": [0, 32, 33, 34, 35, 38, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 72, 78, 95, 96, 97, 127, 131, 135, 137, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 186, 188, 189, 190, 191, 192, 193, 199, 203, 205, 207, 210, 216, 219, 226, 233, 256, 259, 265, 273, 274, 279, 297, 307, 308, 309, 312, 313, 314, 317, 319, 336, 350, 353, 354, 362, 399, 419, 420, 439, 440, 442, 447, 459, 496, 498, 499, 521, 581, 589, 590, 615, 616, 631, 635, 638, 650, 652, 653, 655, 657, 659, 661, 663, 664, 666, 668, 670, 679, 682, 702, 747, 748, 749, 758, 762, 768, 770, 774, 776, 777, 778, 790, 791, 793, 795, 796, 799, 801, 802, 804, 805, 808, 810, 813, 815, 817, 824, 828, 832, 834, 839, 843, 855, 859, 865, 870, 889, 893, 897, 901, 906, 918, 922, 925, 926, 933, 942, 959, 963, 967, 1008, 1028, 1037, 1053, 1054, 1060, 1072, 1115, 1116, 1118, 1119, 1140, 1202, 1210, 1231, 1242, 1243, 1244, 1247, 1249, 1250, 1257, 1259, 1264, 1266, 1269, 1288, 1337, 1340, 1342, 1343, 1358, 1363, 1374, 1375, 1376, 1377, 1378, 1380, 1381, 1382, 1384, 1385, 1386, 1387, 1388, 1389], "function_nam": 145, "further": 839, "futur": [43, 44, 63, 207, 218, 254, 291, 302, 350, 865, 869, 887, 913, 959, 1333, 1358], "g": [34, 38, 48, 144, 148, 152, 154, 156, 164, 169, 181, 207, 219, 251, 308, 318, 350, 359, 442, 497, 500, 590, 677, 789, 833, 843, 870, 906, 959, 963, 1117, 1358, 1389], "g1": [506, 756, 843], "g2": [506, 756, 843], "g_1": [682, 843, 1269, 1358], "gag": 27, "gamma": [496, 498, 499, 843, 1116, 1118, 1119, 1358], "gantt": [902, 959], "gather": [149, 234, 350, 375, 514, 557, 766, 843, 881, 959, 984, 1132, 1178, 1358], "gather_everi": [350, 843, 959, 1358], "gb": [226, 350, 408, 1115, 1358], "gbp": 1389, "gc": [40, 152, 164, 165, 350], "gca": 27, "gcaacgcatata": 27, "gcp": [35, 38, 43, 47, 48, 49, 50, 51, 158, 160, 163, 165, 166, 167, 168, 193, 350, 959], "gdp": [255, 350, 888, 959], "gdp2": [255, 350, 888, 959], "gdp_date": [255, 350, 888, 959], "ge": [843, 1358], "gener": [1, 52, 53, 95, 143, 144, 150, 151, 170, 176, 177, 178, 179, 180, 181, 183, 207, 214, 216, 274, 286, 305, 308, 314, 350, 569, 673, 678, 763, 782, 785, 797, 798, 800, 801, 802, 818, 830, 831, 843, 959, 1029, 1190, 1256, 1265, 1334, 1358, 1389], "geq": [496, 498, 499, 843, 1116, 1118, 1119, 1358], "germani": [255, 350, 888, 959], "get": [56, 63, 74, 145, 155, 161, 162, 169, 199, 208, 210, 214, 215, 224, 232, 235, 237, 240, 242, 243, 247, 249, 250, 258, 261, 268, 269, 274, 282, 283, 287, 292, 295, 301, 309, 313, 323, 333, 344, 350, 360, 373, 374, 375, 377, 385, 388, 400, 408, 420, 423, 435, 436, 437, 438, 447, 457, 459, 507, 513, 520, 523, 538, 540, 543, 555, 561, 582, 591, 592, 593, 601, 603, 609, 623, 624, 633, 634, 639, 650, 651, 683, 687, 696, 743, 744, 748, 749, 751, 755, 766, 768, 790, 795, 799, 805, 806, 807, 808, 810, 811, 812, 814, 824, 828, 832, 843, 859, 864, 865, 867, 874, 879, 880, 883, 884, 890, 892, 908, 909, 916, 921, 922, 928, 939, 950, 959, 964, 969, 982, 983, 984, 985, 986, 994, 997, 1009, 1017, 1031, 1040, 1049, 1050, 1051, 1052, 1060, 1070, 1072, 1110, 1127, 1128, 1134, 1139, 1142, 1145, 1146, 1158, 1161, 1164, 1176, 1182, 1203, 1211, 1213, 1214, 1216, 1218, 1219, 1220, 1227, 1228, 1232, 1242, 1270, 1273, 1282, 1330, 1334, 1340, 1344, 1348, 1358], "get_chunk": 1358, "get_column": [207, 310, 350], "get_column_index": 350, "get_polars_schema": 201, "get_table_info": 201, "get_token": 34, "get_worksheet_by_nam": [41, 350], "gevent": [63, 171, 865, 959], "gh": 713, "gh45": 713, "gh45ij67kl": 713, "ghi": [359, 698, 843, 965, 1284], "gil": [590, 843, 963], "git": 61, "github": [151, 350], "give": [158, 166, 167, 255, 265, 315, 317, 350, 457, 510, 539, 644, 750, 754, 833, 843, 855, 888, 897, 904, 923, 925, 959, 1070, 1160, 1347, 1358, 1385], "given": [41, 52, 53, 54, 56, 95, 106, 111, 128, 130, 132, 133, 134, 136, 143, 144, 148, 149, 150, 151, 153, 154, 156, 157, 158, 159, 160, 163, 166, 167, 168, 174, 175, 176, 177, 179, 181, 182, 183, 184, 205, 226, 227, 229, 231, 240, 245, 250, 259, 266, 272, 273, 278, 283, 284, 285, 293, 296, 312, 319, 350, 382, 394, 399, 408, 420, 429, 448, 452, 477, 479, 480, 493, 497, 521, 527, 549, 574, 581, 584, 590, 631, 635, 641, 644, 645, 647, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 674, 676, 698, 699, 710, 711, 726, 729, 736, 739, 749, 767, 769, 773, 775, 789, 790, 799, 804, 805, 818, 819, 820, 833, 843, 876, 883, 893, 898, 901, 904, 905, 914, 917, 926, 942, 959, 964, 965, 967, 991, 1003, 1008, 1017, 1042, 1061, 1065, 1094, 1096, 1097, 1111, 1115, 1117, 1140, 1145, 1159, 1170, 1195, 1202, 1205, 1208, 1210, 1223, 1229, 1233, 1239, 1243, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1258, 1262, 1284, 1285, 1296, 1297, 1312, 1315, 1322, 1346, 1349, 1358, 1367, 1369, 1374, 1376, 1377, 1380, 1381, 1386, 1388, 1389], "glimps": [218, 242, 350], "glob": [148, 149, 153, 154, 158, 160, 163, 166, 167, 168], "global": [55, 96, 97, 153, 170, 179, 187, 297, 350, 645, 646, 822, 843, 918, 959, 1032, 1036, 1237, 1238, 1358, 1368, 1370, 1385], "gmt": [452, 456, 474, 1065, 1069, 1091], "go": [13, 148, 149, 163, 422, 694, 1030, 1280], "godfath": 1367, "goe": 13, "gonfruit": 1313, "good": [47, 49, 51, 252, 350, 959, 1380], "goodby": 1, "googl": [35, 152, 164, 165], "gpu": [10, 49, 62, 63, 307, 350, 864, 865, 875, 902, 915, 934, 956, 959, 1337, 1358], "gpu_devic": [307, 350], "gpudevic": [307, 350], "gpuengin": [10, 864, 875, 902, 915, 959], "grade": [1160, 1358], "grain": [864, 875, 902, 915, 956, 959], "granular": 1386, "grape": 1381, "graph": [62, 150, 257, 350, 605, 864, 885, 931, 959], "graphviz": [257, 350, 605, 915, 959], "great": [350, 354], "great_tabl": [350, 354], "greater": [212, 255, 350, 515, 517, 527, 682, 710, 711, 719, 736, 833, 843, 888, 959, 1145, 1269, 1296, 1297, 1305, 1322, 1358], "greatest": [1375, 1379], "greatli": [154, 166], "green": [55, 96, 97, 336, 754, 843, 942, 1347, 1358], "greenlet": [63, 865, 959], "greet": 1, "grid": [525, 843], "grid_point": [525, 843], "gridlin": [41, 350], "gross": 1367, "group": [9, 28, 47, 51, 54, 145, 149, 168, 211, 239, 240, 253, 255, 270, 272, 274, 282, 285, 318, 320, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 350, 353, 360, 420, 439, 502, 508, 513, 516, 553, 589, 590, 601, 603, 631, 641, 650, 651, 684, 685, 689, 697, 698, 699, 701, 712, 713, 749, 754, 805, 843, 861, 882, 883, 888, 908, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 959, 965, 1053, 1174, 1242, 1275, 1283, 1284, 1285, 1287, 1298, 1299, 1347, 1358, 1367, 1375, 1385, 1386], "group_bi": [240, 270, 274, 282, 320, 349, 350, 360, 410, 415, 418, 420, 506, 508, 513, 516, 589, 590, 631, 684, 685, 749, 756, 782, 785, 805, 843, 864, 865, 875, 883, 902, 904, 908, 915, 957, 959, 965], "group_by_dynam": [282, 350, 908, 959], "group_by_partit": [902, 959], "group_col": [506, 756, 843], "group_df": [336, 942], "group_dtyp": [631, 843], "group_index": [697, 1283], "group_to_row": [631, 843], "groupbi": [239, 350, 590, 805, 843], "grouper": [410, 415, 418, 843], "grow": [322, 350], "grown": [244, 350], "gt": [350, 354, 843, 1358], "gte": [506, 756, 843], "guarante": [10, 47, 51, 148, 149, 210, 218, 241, 266, 313, 315, 350, 419, 420, 519, 747, 748, 749, 843, 859, 869, 898, 922, 923, 959, 1028, 1138, 1341, 1343, 1358], "guid": [143, 145, 843, 963, 1389], "gzip": [47, 51, 350, 959], "h": [318, 350, 359, 477, 480, 677, 712, 713, 726, 729, 733, 843, 1298, 1299, 1312, 1315, 1319, 1381, 1382], "ha": [40, 41, 56, 63, 135, 150, 163, 186, 207, 320, 326, 331, 350, 419, 420, 439, 512, 589, 602, 608, 703, 727, 737, 748, 749, 773, 790, 799, 839, 843, 865, 915, 932, 937, 942, 959, 1028, 1041, 1053, 1055, 1289, 1313, 1343, 1358], "half": [312, 350, 475, 496, 497, 498, 499, 843, 1092, 1116, 1117, 1118, 1119, 1358], "half_lif": [496, 497, 498, 499, 843, 1116, 1117, 1118, 1119, 1358], "half_to_even": [671, 843, 1254, 1358], "ham": [36, 38, 40, 43, 44, 47, 211, 214, 215, 216, 220, 221, 222, 223, 224, 225, 231, 236, 241, 242, 244, 254, 258, 260, 262, 264, 267, 271, 276, 278, 279, 280, 283, 286, 287, 288, 295, 298, 299, 301, 305, 306, 308, 309, 310, 315, 321, 322, 350, 423, 605, 606, 839, 861, 866, 867, 871, 872, 873, 874, 879, 887, 900, 905, 906, 909, 910, 923, 931, 959, 1031, 1374, 1375], "ham_a": [305, 350], "ham_b": [305, 350], "ham_right": [254, 350, 887, 959], "hamburg": 839, "hand": [41, 148, 149, 163, 350, 570, 571, 572, 573, 1191, 1192, 1193, 1194], "handi": [447, 459, 768, 1060, 1072], "handl": [40, 42, 103, 137, 145, 148, 149, 163, 169, 231, 235, 278, 350, 443, 551, 696, 736, 843, 864, 879, 905, 959, 1056, 1172, 1282, 1322, 1358], "handler": [146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 219, 350, 442, 843, 870, 959], "happen": [150, 452, 638, 843, 1065, 1231, 1358], "hard": [95, 143, 163, 893, 959], "harder": [240, 350, 883, 959], "hardwar": 1389, "has_head": [148, 149, 153, 159, 163], "has_nul": [843, 1137, 1358], "has_prefix": [426, 720], "has_suffix": [422, 694], "has_two": 1376, "has_valid": 1358, "hash": [241, 350, 843, 1358], "hash_row": 350, "hat": [712, 713, 1298, 1299], "have": [5, 15, 31, 34, 41, 53, 55, 56, 64, 71, 97, 145, 146, 148, 149, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 208, 219, 228, 252, 254, 255, 274, 277, 282, 284, 285, 304, 312, 327, 350, 439, 442, 496, 498, 499, 590, 602, 641, 645, 646, 651, 699, 714, 770, 843, 870, 887, 888, 897, 908, 932, 933, 959, 965, 1053, 1055, 1116, 1118, 1119, 1122, 1233, 1237, 1238, 1298, 1300, 1358, 1385, 1387, 1389], "haystack": [698, 1284], "he": 722, "head": [74, 163, 238, 258, 301, 350, 365, 543, 843, 892, 959, 1164, 1330, 1358], "header": [38, 41, 47, 48, 51, 137, 148, 149, 153, 159, 163, 224, 314, 350, 959], "header_format": [41, 350], "header_nam": [314, 350], "headerless": 163, "heap": [145, 226, 350, 843, 1115, 1358], "heatmap": [41, 350], "heavili": 168, "height": [41, 144, 179, 223, 350, 353, 1358, 1363], "hell": [721, 1307], "hello": [1, 21, 721, 722, 723, 965, 1181, 1307, 1308, 1309, 1369, 1372, 1381], "hello_": 792, "hello_data": 1372, "hello_world": 1372, "help": [41, 172, 173, 174, 175, 350, 959], "helper": [350, 354, 839], "henc": [712, 1299], "here": [38, 40, 41, 43, 47, 48, 49, 50, 51, 130, 132, 133, 134, 136, 150, 151, 152, 157, 158, 160, 163, 164, 165, 166, 167, 168, 177, 179, 183, 193, 208, 274, 350, 447, 459, 589, 590, 605, 699, 706, 768, 833, 843, 915, 959, 965, 1060, 1072, 1292], "hex": [404, 405, 692, 693, 731, 1013, 1014, 1278, 1279, 1317], "hexadecim": [1013, 1014], "hf": [38, 43, 47, 48, 49, 50, 51, 158, 160, 163, 166, 167, 168, 193, 350, 959], "hf_token": [38, 43, 47, 48, 49, 50, 51, 158, 160, 163, 166, 167, 168, 193, 350, 959], "hi": [1, 1381], "hidden": [41, 350], "hidden_column": [41, 350], "hide": [22, 23, 24, 25], "hide_gridlin": [41, 350], "hide_password": 150, "high": [285, 350, 354, 638, 843, 855, 1231, 1358], "higher": [47, 51, 218, 276, 342, 350, 639, 662, 663, 816, 843, 869, 903, 948, 959, 1055, 1232, 1249, 1358], "highest": [350, 354, 641, 753, 773, 843, 959, 1233, 1358], "highli": [145, 843], "hint": 143, "hippopotamu": [710, 711, 1296, 1297], "hist": [843, 1358, 1363], "histogram": [1358, 1363], "hit": [860, 959], "hive": [52, 160, 166, 168], "hive_custom": 196, "hive_dir": [52, 54], "hive_partit": [160, 166, 168], "hive_schema": [160, 166, 168], "hive_serd": 196, "hmm": [965, 1381], "hold": [294, 308, 350, 1339, 1358], "holidai": [447, 459, 768, 1060, 1072], "home": [734, 1320], "horizont": [21, 64, 105, 233, 244, 261, 263, 268, 300, 318, 350, 759, 761, 770, 771, 772, 777, 778, 780, 788, 791, 807, 809, 812, 817, 827, 931, 959], "host": [61, 148, 154, 156, 168], "hour": [158, 163, 166, 167, 240, 255, 282, 320, 350, 462, 464, 465, 469, 470, 473, 475, 476, 480, 482, 488, 497, 651, 655, 657, 659, 661, 663, 666, 668, 670, 782, 783, 784, 785, 786, 787, 801, 829, 830, 831, 843, 883, 888, 908, 959, 965, 1087, 1090, 1092, 1099, 1105, 1117, 1358, 1382], "hours_diff": 482, "hous": [312, 350], "how": [12, 38, 40, 41, 42, 43, 47, 48, 49, 50, 51, 56, 64, 105, 145, 151, 158, 160, 163, 166, 167, 168, 193, 223, 231, 254, 255, 274, 318, 319, 350, 383, 443, 473, 474, 525, 550, 551, 631, 644, 664, 726, 729, 768, 784, 843, 879, 887, 888, 926, 931, 959, 992, 1056, 1090, 1091, 1171, 1172, 1250, 1312, 1315, 1358], "howev": [1, 10, 52, 133, 150, 160, 168, 203, 226, 259, 308, 350, 631, 843, 864, 875, 902, 915, 959, 1115, 1358], "hstack": [105, 350], "html": [33, 41, 43, 44, 131, 150, 154, 156, 205, 206, 207, 216, 350, 967, 968], "http": [21, 33, 41, 43, 44, 74, 131, 150, 151, 154, 156, 188, 205, 206, 207, 216, 350, 605, 697, 699, 709, 915, 959, 967, 968, 1283, 1285, 1295], "httpmethod": 74, "hug": [38, 43, 47, 48, 49, 50, 51, 158, 160, 163, 166, 167, 168, 193, 350, 959], "huge": [226, 350, 1115, 1358], "hut": [712, 713, 1298, 1299], "hvplot": [350, 353, 1358, 1363], "hyperbol": [368, 370, 372, 431, 681, 746, 843, 977, 979, 981, 1045, 1268, 1332, 1358], "hyperloglog": [209, 350, 366, 762, 843, 858, 959, 975, 1358], "hyphen": [688, 1274], "hypothesi": [177, 179, 182, 183, 1389], "i": [1, 10, 13, 15, 18, 32, 33, 34, 35, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 62, 63, 64, 65, 70, 71, 72, 73, 78, 88, 95, 97, 101, 103, 104, 105, 106, 107, 108, 110, 111, 116, 122, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 197, 199, 203, 208, 209, 210, 211, 213, 214, 218, 219, 222, 223, 225, 226, 228, 231, 235, 239, 240, 241, 242, 245, 246, 250, 252, 253, 254, 255, 256, 257, 258, 259, 265, 266, 270, 272, 273, 274, 278, 279, 280, 282, 283, 284, 285, 286, 289, 290, 291, 293, 295, 296, 297, 298, 301, 302, 307, 308, 309, 312, 313, 314, 315, 317, 319, 320, 321, 325, 327, 328, 336, 350, 353, 354, 359, 362, 364, 365, 366, 376, 379, 386, 387, 394, 399, 402, 407, 419, 420, 421, 424, 425, 439, 440, 442, 445, 446, 447, 448, 451, 459, 460, 467, 468, 470, 475, 477, 480, 488, 496, 497, 498, 499, 502, 506, 510, 511, 519, 521, 524, 527, 539, 545, 552, 553, 556, 558, 560, 569, 574, 575, 577, 581, 583, 586, 589, 590, 594, 596, 597, 598, 600, 601, 602, 604, 613, 631, 636, 638, 641, 643, 644, 645, 646, 647, 650, 651, 652, 653, 655, 657, 659, 661, 663, 664, 665, 666, 668, 669, 670, 673, 674, 675, 676, 678, 679, 682, 683, 684, 685, 687, 688, 689, 690, 691, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 716, 719, 721, 722, 723, 726, 727, 728, 729, 731, 733, 734, 736, 741, 748, 749, 754, 755, 758, 759, 760, 761, 762, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 782, 783, 785, 786, 791, 795, 796, 797, 798, 800, 801, 802, 803, 805, 808, 810, 813, 815, 818, 819, 820, 821, 822, 824, 828, 830, 831, 832, 833, 834, 839, 843, 858, 859, 860, 863, 864, 865, 867, 869, 870, 872, 873, 874, 875, 879, 882, 883, 886, 887, 888, 889, 891, 893, 897, 898, 902, 905, 906, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 922, 923, 925, 926, 927, 928, 930, 933, 934, 942, 952, 959, 963, 965, 972, 973, 974, 975, 988, 995, 996, 1003, 1008, 1011, 1016, 1028, 1032, 1033, 1034, 1037, 1042, 1043, 1053, 1054, 1055, 1058, 1059, 1060, 1061, 1064, 1072, 1073, 1087, 1092, 1094, 1097, 1105, 1114, 1115, 1116, 1117, 1118, 1119, 1121, 1122, 1126, 1127, 1130, 1138, 1139, 1140, 1142, 1145, 1147, 1150, 1157, 1159, 1160, 1161, 1164, 1166, 1173, 1174, 1177, 1179, 1181, 1190, 1195, 1196, 1202, 1210, 1229, 1231, 1233, 1235, 1237, 1238, 1239, 1242, 1243, 1244, 1247, 1249, 1250, 1251, 1253, 1256, 1257, 1258, 1259, 1260, 1262, 1265, 1266, 1269, 1270, 1273, 1274, 1275, 1276, 1277, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1296, 1297, 1298, 1299, 1300, 1302, 1305, 1307, 1308, 1309, 1312, 1313, 1314, 1315, 1317, 1319, 1320, 1322, 1330, 1333, 1337, 1339, 1340, 1342, 1343, 1347, 1348, 1358, 1363, 1367, 1368, 1373, 1377, 1378, 1381, 1384, 1386, 1387, 1389], "i0e0": 1389, "i16": [1, 59, 455, 471, 490, 677, 843, 965, 1088, 1336, 1358, 1389], "i32": [1, 59, 130, 133, 137, 176, 178, 179, 288, 297, 350, 385, 386, 388, 407, 421, 450, 458, 461, 462, 463, 464, 465, 469, 492, 677, 768, 833, 843, 910, 959, 964, 994, 995, 997, 1016, 1063, 1074, 1078, 1079, 1080, 1086, 1109, 1208, 1358, 1378, 1382, 1389], "i64": [1, 10, 11, 14, 17, 18, 22, 28, 57, 58, 59, 60, 64, 65, 83, 104, 130, 131, 132, 133, 134, 135, 136, 137, 144, 148, 150, 157, 158, 163, 208, 210, 211, 212, 213, 215, 219, 220, 223, 224, 227, 228, 230, 231, 234, 235, 237, 238, 239, 240, 242, 244, 245, 247, 249, 251, 254, 255, 256, 258, 259, 260, 266, 267, 272, 273, 274, 275, 278, 279, 280, 281, 282, 286, 288, 290, 293, 295, 296, 297, 299, 301, 303, 310, 313, 314, 315, 316, 317, 318, 319, 320, 322, 324, 326, 327, 328, 329, 330, 332, 333, 334, 336, 337, 340, 343, 344, 350, 359, 361, 365, 375, 380, 381, 383, 384, 389, 391, 392, 393, 394, 395, 397, 400, 410, 415, 418, 419, 420, 429, 435, 436, 437, 438, 439, 440, 443, 444, 457, 473, 479, 481, 482, 483, 484, 485, 486, 487, 497, 500, 502, 503, 505, 506, 507, 508, 510, 513, 514, 516, 520, 522, 524, 525, 526, 527, 530, 531, 533, 534, 535, 536, 537, 540, 543, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 587, 589, 590, 610, 611, 612, 614, 615, 617, 619, 621, 622, 627, 631, 632, 635, 636, 637, 638, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 673, 675, 676, 677, 678, 683, 684, 685, 703, 712, 713, 727, 731, 736, 737, 739, 740, 741, 742, 743, 744, 748, 749, 750, 751, 753, 756, 763, 766, 769, 770, 771, 772, 777, 778, 779, 780, 781, 784, 787, 788, 789, 790, 791, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 814, 817, 821, 822, 823, 826, 827, 828, 829, 833, 839, 843, 859, 861, 862, 864, 865, 870, 871, 873, 876, 878, 879, 880, 881, 882, 883, 884, 887, 888, 889, 890, 892, 893, 894, 898, 899, 901, 902, 904, 905, 906, 907, 908, 910, 912, 914, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 929, 932, 933, 935, 936, 938, 939, 940, 942, 943, 946, 949, 950, 959, 965, 969, 970, 971, 974, 993, 998, 1000, 1002, 1003, 1004, 1006, 1009, 1028, 1042, 1043, 1049, 1050, 1051, 1052, 1053, 1054, 1070, 1096, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1121, 1122, 1123, 1125, 1126, 1131, 1132, 1134, 1139, 1141, 1150, 1164, 1172, 1173, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1184, 1187, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1202, 1203, 1210, 1215, 1223, 1229, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1245, 1248, 1252, 1256, 1257, 1259, 1262, 1263, 1265, 1270, 1271, 1317, 1323, 1328, 1330, 1335, 1343, 1344, 1349, 1358, 1367, 1368, 1370, 1374, 1375, 1376, 1377, 1378, 1380, 1383, 1384, 1386, 1387, 1389], "i8": [398, 399, 455, 458, 462, 464, 465, 466, 469, 471, 472, 476, 489, 490, 580, 677, 815, 818, 834, 843, 1007, 1008, 1056, 1068, 1071, 1082, 1083, 1089, 1093, 1106, 1107, 1201, 1240, 1263, 1346, 1358, 1382], "i_bitand_j": 1377, "i_bitand_op_j": 1377, "i_bitcount": 1377, "i_bitor_j": 1377, "i_bitor_op_j": 1377, "i_bitxor_j": 1377, "i_bitxor_op_j": 1377, "iceberg": [42, 165, 350, 855], "icon": [41, 350], "id": [27, 34, 41, 64, 144, 148, 153, 165, 256, 307, 314, 327, 336, 350, 650, 712, 713, 752, 843, 889, 933, 942, 959, 965, 1242, 1345, 1358, 1386, 1387, 1389], "id_char": 1389, "id_var": [265, 317, 350, 897, 925, 959], "ideal": [139, 143], "ident": [34, 137, 212, 213, 350, 477, 649, 650, 843, 862, 863, 959, 1041, 1043, 1094, 1241, 1242, 1358], "identif": [153, 159], "identifi": [137, 150, 265, 272, 315, 317, 328, 350, 897, 923, 925, 959], "idiograph": 965, "idiom": 833, "idiomat": [839, 867, 874, 909, 928, 942, 959], "idx": [163, 240, 253, 327, 350, 386, 399, 581, 883, 933, 959, 1008, 1202, 1287], "idx_lit": 1287, "idx_rx": 1287, "ieee": [750, 843], "if_set": [5, 31], "if_table_exist": [39, 350], "ifnul": 1379, "ignor": [40, 150, 178, 179, 183, 263, 300, 319, 350, 362, 364, 387, 407, 443, 474, 496, 498, 499, 551, 560, 623, 624, 688, 704, 758, 760, 772, 809, 827, 843, 926, 959, 965, 972, 973, 996, 1016, 1056, 1091, 1116, 1118, 1119, 1172, 1181, 1219, 1220, 1274, 1290, 1358], "ignore_error": [148, 149, 158, 163, 167], "ignore_nul": [263, 300, 350, 362, 364, 387, 496, 498, 499, 560, 688, 704, 758, 760, 772, 809, 827, 843, 972, 973, 996, 1116, 1118, 1119, 1181, 1274, 1290, 1358], "ignore_spac": 965, "ij": 713, "ij67": 713, "ijkl": 1381, "ilmsuxu": [689, 697, 698, 701, 712, 713, 1275, 1283, 1284, 1287, 1298, 1299], "imbal": [496, 498, 499, 843, 1116, 1118, 1119, 1358], "imdb_scor": 1367, "immedi": [203, 641, 763, 767, 769, 773, 775, 782, 783, 785, 786, 797, 798, 801, 802, 815, 818, 821, 825, 830, 831, 834, 843, 1233, 1358, 1368], "immut": [308, 350, 1339, 1358], "impact": [240, 350, 883, 959, 1367, 1386], "impl": 165, "implement": [47, 95, 143, 150, 207, 241, 259, 336, 350, 353, 354, 519, 590, 614, 615, 617, 619, 621, 622, 737, 747, 805, 843, 942, 1138, 1210, 1257, 1259, 1341, 1358, 1363], "implic": [442, 843, 870, 959], "implicit": [319, 350, 833, 926, 959], "implicitli": [231, 278, 350, 506, 833, 843, 879, 905, 959, 1386], "implod": [843, 1358, 1376], "import": [11, 17, 29, 36, 38, 40, 41, 43, 44, 47, 56, 71, 74, 95, 130, 131, 134, 135, 144, 148, 150, 151, 157, 158, 163, 169, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 211, 218, 219, 220, 223, 238, 240, 253, 255, 272, 274, 290, 297, 305, 307, 312, 317, 318, 320, 350, 353, 354, 408, 441, 442, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 497, 597, 598, 604, 631, 653, 655, 657, 659, 661, 663, 666, 668, 670, 768, 781, 782, 783, 784, 785, 786, 787, 801, 822, 830, 831, 839, 843, 855, 861, 865, 869, 870, 871, 873, 883, 888, 893, 912, 925, 959, 963, 1017, 1044, 1046, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1117, 1148, 1151, 1153, 1154, 1244, 1267, 1331, 1358, 1363, 1368, 1383, 1386, 1389], "improv": [39, 51, 154, 165, 166, 254, 350, 589, 843, 887, 959], "in_part_idx": [52, 54, 142], "in_plac": [244, 294, 322, 350, 1234, 1264, 1271, 1358], "in_progress": [904, 959], "includ": [7, 21, 31, 38, 40, 41, 48, 52, 54, 61, 135, 150, 152, 153, 158, 159, 160, 163, 164, 165, 166, 167, 168, 179, 180, 203, 214, 218, 226, 256, 272, 274, 278, 285, 296, 312, 314, 318, 319, 350, 440, 476, 506, 510, 521, 527, 597, 638, 652, 654, 656, 658, 660, 662, 664, 665, 667, 669, 712, 713, 717, 718, 721, 722, 768, 777, 819, 820, 843, 869, 879, 889, 905, 917, 926, 959, 965, 1054, 1055, 1093, 1115, 1126, 1140, 1145, 1231, 1243, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1298, 1299, 1303, 1304, 1307, 1358, 1386], "include_bom": [38, 48, 350, 959], "include_boundari": [240, 350, 883, 959], "include_break": [440, 638, 843, 1054, 1231, 1358], "include_breakpoint": [521, 843, 1140, 1358], "include_categor": 965, "include_categori": [521, 843, 1140, 1358], "include_col": 179, "include_file_path": [153, 158, 159, 160, 163, 166, 167, 168], "include_head": [38, 41, 48, 149, 314, 350, 959], "include_index": 135, "include_init": 777, "include_kei": [52, 54, 272, 285, 350], "include_nul": [319, 350, 926, 959], "inclus": [208, 240, 282, 350, 480, 527, 651, 655, 657, 659, 661, 663, 666, 668, 670, 717, 718, 763, 782, 783, 785, 786, 797, 798, 801, 802, 830, 831, 843, 883, 908, 959, 1097, 1145, 1303, 1304, 1358], "incom": 150, "incompat": 123, "incomplet": [646, 843, 1238, 1358], "incorpor": 1386, "incorrect": [291, 350, 491, 589, 590, 675, 843, 913, 942, 959, 1108, 1260, 1358], "incorrectli": [148, 581], "increas": [41, 56, 148, 153, 159, 160, 168, 350, 439, 650, 843, 1053, 1242, 1358], "independ": [62, 63, 129, 176, 179, 183, 312, 350, 678, 843, 864, 865, 875, 902, 915, 959], "index": [41, 111, 131, 135, 138, 148, 149, 154, 156, 158, 160, 163, 166, 167, 168, 171, 207, 234, 236, 240, 245, 250, 252, 274, 280, 282, 283, 284, 293, 295, 307, 308, 310, 317, 319, 320, 326, 327, 350, 360, 373, 374, 375, 377, 380, 381, 386, 394, 399, 497, 513, 514, 516, 523, 546, 547, 556, 557, 558, 574, 575, 581, 651, 655, 657, 659, 661, 663, 666, 668, 670, 674, 676, 683, 689, 697, 701, 703, 716, 727, 737, 766, 797, 800, 843, 881, 883, 908, 914, 916, 925, 926, 932, 933, 959, 965, 982, 983, 984, 985, 986, 989, 990, 995, 1003, 1008, 1117, 1131, 1132, 1142, 1159, 1167, 1168, 1177, 1178, 1179, 1195, 1196, 1202, 1223, 1257, 1258, 1262, 1270, 1283, 1287, 1289, 1302, 1313, 1358, 1363, 1376, 1381], "index_column": [240, 282, 350, 651, 843, 883, 908, 959], "index_of": [843, 1358], "indexord": [307, 308, 350], "indic": [38, 41, 43, 47, 48, 49, 50, 51, 70, 71, 73, 88, 104, 114, 145, 146, 148, 149, 150, 153, 154, 156, 158, 159, 160, 163, 166, 167, 168, 176, 177, 183, 193, 240, 282, 285, 293, 305, 350, 376, 394, 513, 521, 528, 529, 530, 532, 533, 534, 535, 536, 537, 556, 574, 594, 595, 596, 597, 598, 599, 600, 631, 651, 655, 657, 659, 661, 663, 666, 668, 670, 674, 676, 766, 767, 814, 843, 883, 908, 914, 959, 965, 1003, 1037, 1131, 1140, 1148, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1177, 1195, 1257, 1258, 1262, 1334, 1358, 1381, 1389], "indistinguish": [38, 48, 350, 959], "individu": [41, 51, 203, 282, 307, 308, 312, 350, 590, 698, 740, 843, 864, 908, 959, 965, 1040, 1284, 1358], "inequ": [625, 843], "inexact": [172, 173, 174, 175], "inf": [176, 179, 183, 372, 440, 529, 532, 638, 750, 843, 981, 1046, 1054, 1148, 1151, 1208, 1226, 1231, 1346, 1358, 1383], "infer": [38, 43, 47, 48, 49, 50, 51, 72, 87, 104, 130, 132, 133, 134, 135, 136, 148, 149, 150, 153, 157, 158, 159, 160, 163, 166, 167, 168, 193, 259, 350, 589, 590, 647, 705, 726, 728, 729, 730, 733, 787, 791, 803, 818, 843, 959, 1210, 1239, 1291, 1312, 1314, 1315, 1316, 1319, 1358], "infer_schema": [148, 163], "infer_schema_length": [133, 136, 144, 148, 149, 150, 153, 157, 158, 159, 163, 167, 350, 705, 959, 1291], "inference_length": [730, 1316], "inference_s": [259, 350], "infin": [734, 750, 843, 1320], "infinit": [532, 750, 843, 1151, 1358], "influenc": [153, 893, 959], "influxdb": 150, "info": [152, 164, 165, 171], "inform": [20, 24, 38, 39, 43, 47, 48, 49, 50, 51, 52, 53, 54, 61, 143, 145, 152, 158, 160, 163, 164, 165, 166, 167, 168, 172, 174, 193, 194, 195, 197, 198, 205, 216, 218, 350, 354, 539, 590, 682, 689, 697, 698, 701, 712, 713, 843, 864, 869, 875, 902, 915, 959, 963, 967, 1036, 1160, 1269, 1275, 1283, 1284, 1287, 1298, 1299, 1358], "inherit": [283, 350, 442, 843, 870, 959], "init": [203, 1367], "initcap": 1379, "initi": [33, 34, 35, 41, 87, 143, 188, 203, 350, 777, 791, 833, 1386], "initialis": [74, 150, 203, 959], "inject": [41, 56, 350], "inlin": [25, 285, 350, 689, 697, 698, 701, 712, 713, 1275, 1283, 1284, 1287, 1298, 1299, 1376], "inner": [65, 83, 178, 254, 256, 319, 350, 387, 398, 444, 560, 580, 590, 644, 747, 822, 843, 887, 889, 926, 959, 996, 1007, 1057, 1181, 1201, 1210, 1341, 1358, 1374, 1386], "inner_dtyp": [178, 181], "innermost": [178, 181], "innter": 995, "inprocessqueri": [864, 959], "input": [0, 54, 56, 62, 104, 133, 135, 145, 148, 149, 210, 220, 239, 256, 259, 263, 272, 274, 279, 288, 289, 293, 296, 300, 313, 319, 324, 325, 329, 350, 359, 420, 422, 426, 429, 497, 500, 512, 527, 585, 589, 590, 602, 631, 645, 646, 679, 685, 703, 714, 716, 722, 723, 724, 725, 727, 729, 741, 749, 757, 759, 761, 763, 766, 769, 770, 771, 772, 780, 787, 789, 797, 798, 803, 804, 805, 807, 809, 812, 821, 825, 827, 833, 839, 843, 855, 859, 871, 882, 889, 906, 910, 911, 914, 917, 922, 926, 929, 930, 935, 959, 1042, 1117, 1145, 1206, 1207, 1210, 1229, 1237, 1238, 1262, 1266, 1289, 1302, 1313, 1315, 1358, 1380, 1381, 1383], "input_wildcard_expans": [145, 843], "insensit": [690, 698, 700, 702, 712, 713, 714, 965, 1275, 1276, 1284, 1286, 1287, 1288, 1298, 1299, 1300], "insensitive_match": [689, 701], "insert": [39, 148, 149, 154, 156, 158, 160, 163, 166, 167, 168, 245, 314, 316, 350, 674, 688, 704, 736, 843, 924, 959, 1258, 1274, 1290, 1322, 1358], "insert_aft": [41, 350], "insert_befor": [41, 350], "insert_chart": [41, 350], "insert_column": 350, "insid": [63, 589, 833, 843, 865, 959], "inspect": [843, 959], "instal": [33, 34, 35, 108, 135, 148, 149, 151, 154, 156, 216, 309, 350, 447, 459, 605, 768, 915, 959, 1060, 1072, 1340, 1358], "instanc": [38, 43, 47, 48, 49, 50, 51, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 179, 183, 193, 228, 233, 350, 602, 777, 791, 839, 855, 861, 893, 904, 932, 933, 959, 1122, 1358], "instanti": [34, 39, 41, 150, 181, 288, 306, 307, 324, 350, 910, 929, 959, 964, 1336, 1337, 1358], "instantli": [63, 865, 959], "instead": [38, 40, 45, 46, 56, 63, 65, 131, 132, 133, 136, 148, 149, 150, 153, 159, 160, 163, 168, 169, 176, 177, 178, 179, 183, 209, 210, 238, 251, 252, 255, 259, 265, 270, 272, 283, 284, 285, 288, 289, 290, 293, 307, 308, 309, 313, 325, 326, 350, 353, 354, 375, 394, 420, 421, 424, 425, 440, 454, 480, 497, 500, 510, 574, 604, 638, 645, 676, 688, 696, 707, 708, 721, 722, 723, 724, 725, 736, 749, 756, 763, 765, 767, 769, 773, 774, 775, 782, 783, 785, 786, 787, 797, 798, 801, 802, 815, 818, 821, 822, 825, 830, 831, 834, 843, 858, 859, 865, 875, 888, 897, 910, 911, 912, 914, 922, 930, 931, 932, 934, 959, 965, 984, 1003, 1013, 1029, 1033, 1034, 1054, 1067, 1076, 1077, 1097, 1117, 1137, 1195, 1231, 1237, 1257, 1259, 1262, 1271, 1274, 1282, 1293, 1294, 1307, 1308, 1309, 1322, 1339, 1340, 1358, 1363, 1367, 1368, 1372, 1386, 1387], "int": [11, 13, 14, 15, 18, 26, 27, 38, 39, 41, 43, 47, 48, 49, 50, 51, 53, 58, 65, 72, 133, 136, 139, 140, 142, 143, 144, 146, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 163, 164, 165, 166, 167, 168, 169, 170, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 193, 195, 210, 212, 218, 226, 229, 230, 234, 236, 238, 241, 242, 243, 245, 250, 252, 253, 255, 258, 259, 269, 270, 280, 282, 283, 286, 292, 293, 295, 298, 301, 306, 310, 313, 318, 321, 323, 326, 327, 333, 344, 350, 359, 382, 386, 394, 396, 399, 401, 402, 419, 420, 439, 443, 447, 473, 496, 498, 499, 503, 504, 505, 511, 513, 514, 516, 519, 520, 521, 543, 549, 551, 556, 557, 558, 559, 569, 574, 575, 577, 579, 580, 581, 583, 630, 632, 635, 636, 638, 641, 644, 647, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 678, 683, 687, 697, 703, 705, 710, 711, 712, 716, 718, 719, 727, 730, 731, 736, 744, 748, 749, 755, 757, 763, 773, 775, 781, 784, 787, 793, 795, 797, 798, 801, 802, 814, 815, 818, 819, 820, 824, 825, 828, 829, 832, 834, 843, 859, 862, 869, 877, 878, 881, 884, 888, 892, 902, 914, 916, 919, 921, 922, 927, 928, 932, 933, 934, 939, 950, 959, 964, 965, 982, 983, 991, 995, 1003, 1005, 1008, 1010, 1011, 1028, 1029, 1040, 1041, 1047, 1053, 1056, 1057, 1060, 1090, 1115, 1116, 1118, 1119, 1123, 1124, 1125, 1130, 1131, 1132, 1138, 1139, 1140, 1142, 1159, 1163, 1164, 1170, 1172, 1177, 1178, 1179, 1180, 1190, 1195, 1196, 1198, 1200, 1201, 1202, 1204, 1216, 1217, 1219, 1220, 1223, 1225, 1226, 1229, 1230, 1231, 1233, 1239, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1261, 1262, 1265, 1270, 1273, 1283, 1289, 1291, 1296, 1297, 1298, 1302, 1304, 1305, 1313, 1316, 1317, 1322, 1329, 1330, 1336, 1343, 1348, 1358, 1370, 1373, 1386, 1389], "int16": [1, 59, 312, 350, 437, 438, 471, 743, 843, 965, 1051, 1052, 1088, 1329, 1336, 1358], "int32": [1, 41, 59, 64, 130, 133, 176, 178, 179, 240, 253, 282, 307, 350, 385, 386, 388, 407, 421, 450, 461, 462, 463, 464, 469, 492, 497, 651, 655, 657, 659, 661, 663, 666, 668, 670, 747, 818, 843, 883, 908, 959, 964, 965, 991, 994, 995, 997, 1016, 1063, 1074, 1078, 1079, 1080, 1086, 1109, 1117, 1208, 1341, 1342, 1358], "int64": [1, 40, 41, 58, 59, 64, 65, 87, 106, 148, 157, 214, 224, 233, 240, 273, 282, 287, 288, 302, 309, 350, 380, 381, 383, 384, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 437, 438, 481, 482, 483, 484, 485, 486, 487, 491, 497, 500, 589, 590, 616, 618, 620, 635, 643, 651, 655, 657, 659, 661, 663, 666, 668, 670, 705, 731, 743, 747, 763, 770, 789, 797, 798, 803, 818, 825, 839, 843, 866, 874, 883, 901, 908, 909, 910, 959, 965, 989, 990, 992, 993, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1051, 1052, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1108, 1110, 1117, 1210, 1235, 1317, 1329, 1339, 1340, 1341, 1342, 1358], "int64arrai": [1333, 1358], "int8": [1, 59, 87, 233, 350, 398, 399, 437, 438, 455, 458, 465, 466, 472, 476, 489, 490, 580, 743, 815, 818, 834, 843, 964, 1007, 1008, 1051, 1052, 1056, 1068, 1071, 1082, 1083, 1089, 1093, 1106, 1107, 1201, 1240, 1329, 1339, 1346, 1358], "int_rang": [240, 318, 327, 336, 350, 763, 800, 821, 883, 893, 933, 942, 959], "integ": [38, 41, 48, 70, 71, 73, 78, 79, 80, 81, 82, 88, 89, 90, 91, 92, 170, 177, 179, 182, 184, 223, 240, 282, 305, 308, 350, 363, 428, 476, 509, 510, 630, 636, 638, 643, 650, 651, 652, 664, 703, 727, 731, 757, 763, 793, 797, 798, 818, 843, 873, 883, 908, 959, 965, 1039, 1093, 1129, 1229, 1231, 1235, 1242, 1243, 1250, 1257, 1289, 1313, 1317, 1339, 1358, 1380, 1386, 1389], "integer_list": 83, "integr": [41, 312, 350, 655, 657, 659, 661, 663, 666, 668, 670, 843, 1389], "intend": [1, 172, 173, 174, 175, 736, 1322], "intens": [259, 336, 350, 631, 843, 1210, 1358], "interact": [179, 183, 218, 350, 353, 869, 959, 1358, 1363], "interchang": [131, 207], "interest": [149, 477, 480, 1094, 1097], "interfac": [0, 119, 120, 130, 131, 201, 202, 206, 855, 968, 1386], "interfer": 963, "interleav": 1381, "intermedi": [246, 350, 525, 843, 886, 959, 1143, 1144, 1358, 1389], "intern": [43, 44, 49, 150, 170, 252, 302, 350, 510, 843, 959, 1333, 1358, 1368], "interoper": [205, 967], "interpol": [218, 276, 342, 350, 505, 526, 593, 639, 662, 663, 816, 843, 869, 903, 948, 959, 1055, 1144, 1232, 1249, 1358, 1375], "interpolate_bi": [843, 1358], "interpolationmethod": [525, 843, 1143, 1358], "interpret": [134, 136, 148, 149, 163, 350, 407, 959, 1016], "intersect": [41, 350, 571, 965, 1192, 1385], "interv": [240, 282, 320, 350, 440, 475, 521, 527, 638, 651, 655, 657, 659, 661, 663, 666, 668, 670, 782, 783, 785, 786, 801, 802, 830, 831, 843, 883, 908, 959, 1054, 1068, 1070, 1071, 1078, 1080, 1082, 1083, 1086, 1088, 1089, 1092, 1096, 1106, 1140, 1145, 1231, 1358, 1375], "intoexpr": [145, 210, 239, 240, 282, 288, 289, 293, 296, 313, 324, 325, 329, 350, 365, 383, 403, 406, 409, 420, 443, 447, 473, 497, 503, 513, 521, 523, 526, 527, 550, 570, 571, 572, 573, 631, 645, 646, 655, 657, 659, 661, 663, 666, 668, 670, 674, 676, 685, 690, 700, 702, 714, 717, 718, 719, 721, 722, 723, 724, 725, 741, 749, 759, 761, 766, 769, 770, 771, 772, 773, 775, 777, 780, 784, 791, 801, 807, 809, 812, 818, 821, 825, 827, 843, 859, 882, 883, 908, 910, 911, 914, 917, 922, 929, 930, 935, 959, 992, 1012, 1015, 1018, 1060, 1117, 1123, 1142, 1144, 1145, 1171, 1237, 1238, 1258, 1262, 1288, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1358], "intoexprcolumn": [231, 245, 278, 350, 382, 386, 387, 394, 419, 420, 429, 475, 503, 506, 549, 557, 560, 569, 574, 632, 636, 673, 676, 697, 703, 706, 716, 727, 731, 736, 748, 749, 763, 768, 782, 783, 785, 786, 797, 798, 802, 830, 831, 833, 843, 879, 905, 914, 959, 991, 995, 996, 1003, 1042, 1087, 1092, 1105, 1123, 1170, 1178, 1181, 1190, 1195, 1226, 1283, 1289, 1292, 1302, 1313, 1317, 1322, 1358], "introduc": [55, 97, 726, 728, 729, 1312, 1314, 1315], "introduct": 1385, "intuit": [510, 843, 965], "invalid": [38, 48, 120, 148, 149, 163, 211, 350, 421, 705, 706, 731, 750, 843, 959, 1013, 1029, 1291, 1292, 1317, 1358], "invalid_valu": 1013, "invalidoperationerror": [646, 843, 1238, 1358, 1384], "invari": [893, 959], "invers": [367, 368, 369, 370, 371, 372, 843, 976, 977, 978, 979, 980, 981, 1339, 1358, 1383], "invert": 965, "invok": [203, 589, 843], "involv": [231, 278, 350, 879, 905, 959], "io": [36, 38, 41, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 146, 148, 154, 155, 156, 157, 158, 161, 162, 163, 165, 166, 167, 219, 290, 350, 442, 512, 604, 843, 870, 912, 959], "io_sourc": 143, "iobas": [45, 46, 157, 158, 219, 290, 350, 442, 604, 608, 843, 870, 912, 959], "ipc": [43, 44, 49, 154, 155, 156, 166, 169, 350, 855, 959], "ipccompress": [43, 44, 49, 350, 959], "ir": [915, 959], "is_between": [843, 1358], "is_dupl": [350, 843, 1358], "is_elementwis": [145, 589, 843], "is_empti": [350, 1358], "is_finit": [843, 1358], "is_first_distinct": [843, 1358], "is_in": [106, 231, 350, 843, 1358], "is_infinit": [843, 1358], "is_last_distinct": [843, 1358], "is_nan": [222, 350, 843, 872, 959, 1358], "is_not_nan": [843, 1358], "is_not_nul": [278, 350, 843, 905, 959, 1358], "is_nul": [223, 350, 843, 873, 959, 1358], "is_numer": 1389, "is_odd": [288, 350, 910, 959, 965], "is_selector": 965, "is_sort": 1358, "is_uniqu": [350, 843, 1358], "isn": [95, 143, 833], "iso": [461, 480, 489, 490, 1074, 1097, 1106, 1107, 1381], "iso8601": [148, 149, 163, 480, 1097], "iso_lang": 1381, "iso_year": 492, "isodow": 1382, "isoweek": 1382, "isoyear": 1382, "issu": [99, 100, 103, 104, 107, 114, 116, 127, 148, 149, 150, 163, 350, 437, 438, 743, 843, 1051, 1052, 1329, 1358, 1386], "ital": [41, 350], "item": [14, 64, 149, 238, 283, 286, 350, 382, 386, 387, 443, 502, 549, 551, 558, 560, 569, 673, 719, 843, 991, 995, 996, 1056, 1121, 1170, 1172, 1179, 1181, 1190, 1256, 1305, 1358], "iter": [56, 62, 63, 64, 74, 129, 130, 133, 143, 145, 150, 182, 184, 210, 220, 231, 239, 240, 251, 252, 253, 256, 278, 282, 283, 284, 285, 288, 289, 296, 313, 314, 324, 325, 328, 329, 350, 420, 439, 447, 459, 506, 631, 685, 741, 749, 759, 761, 766, 768, 769, 770, 771, 772, 780, 807, 809, 812, 821, 825, 827, 833, 839, 843, 859, 871, 879, 882, 883, 889, 905, 908, 910, 911, 917, 922, 929, 930, 935, 959, 964, 965, 1053, 1060, 1072, 1126, 1257, 1358, 1389], "iter_batch": 150, "iter_column": 350, "iter_row": [253, 283, 284, 285, 350], "iter_slic": 350, "its": [75, 137, 171, 226, 308, 350, 451, 475, 488, 497, 589, 649, 685, 740, 833, 843, 867, 874, 928, 959, 963, 1036, 1064, 1092, 1105, 1115, 1117, 1241, 1339, 1358, 1388], "itself": [177, 350, 353, 354, 590, 652, 654, 656, 658, 660, 662, 664, 665, 667, 669, 767, 819, 820, 843, 891, 959, 1243, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1358, 1363, 1367, 1368, 1386], "ix": [274, 350], "j": [314, 350, 1377], "jax": [307, 350, 1337, 1358], "jax_enable_x64": [307, 350], "jaxexporttyp": [307, 350], "jjk": 965, "jkl": [698, 1284], "jklmn": 1381, "job": [860, 959], "join": [48, 49, 50, 51, 55, 56, 62, 63, 64, 97, 129, 231, 255, 256, 278, 319, 350, 506, 525, 631, 688, 822, 843, 864, 865, 875, 879, 888, 889, 902, 905, 915, 926, 931, 959, 1274, 1368, 1370, 1376, 1385, 1386], "join_asof": [254, 350, 887, 959], "join_nul": [254, 350, 887, 959], "join_wher": [350, 959], "joinstrategi": [56, 254, 350, 887, 959], "joinvalid": [254, 350, 887, 959], "jpy": 1389, "json": [2, 3, 5, 6, 45, 46, 144, 145, 157, 158, 165, 167, 196, 219, 290, 350, 442, 512, 604, 608, 705, 706, 738, 843, 855, 870, 912, 959, 1291, 1292, 1325], "json_path": [706, 1292], "json_path_match": [705, 1291], "json_stat": 5, "json_str": [157, 158], "json_val": [706, 1292], "jsonencod": 144, "jsonpath": [705, 706, 1291, 1292], "jst": [137, 965], "jul": [726, 1312, 1381], "juli": [1097, 1381, 1382], "just": [41, 135, 150, 163, 265, 317, 350, 897, 925, 959, 965], "k": [210, 285, 313, 314, 350, 419, 420, 434, 539, 748, 749, 843, 859, 922, 959, 1028, 1048, 1160, 1343, 1358], "k_2": [682, 843, 1269, 1358], "k_3": [682, 843, 1269, 1358], "kadokawa": [709, 1295], "kanji": 965, "karen": [274, 350], "kathmandu": [1066, 1067, 1095], "kb": [226, 350, 408, 1017, 1115, 1358], "kde": [1358, 1363], "keep": [56, 148, 149, 158, 163, 166, 167, 231, 315, 319, 320, 350, 512, 589, 607, 615, 645, 769, 833, 843, 923, 926, 959, 1237, 1358], "kei": [38, 40, 41, 43, 47, 48, 49, 50, 51, 52, 54, 56, 61, 64, 141, 142, 152, 158, 160, 163, 164, 165, 166, 167, 168, 193, 208, 240, 252, 254, 255, 266, 272, 279, 281, 284, 285, 319, 350, 506, 590, 645, 646, 714, 782, 785, 825, 843, 883, 887, 888, 898, 904, 906, 907, 926, 959, 965, 969, 1237, 1238, 1300, 1358, 1374], "kept": [315, 350, 923, 959], "keyedpartit": 142, "keyedpartitioncontext": [52, 54, 141], "keyerror": 17, "keystrok": 839, "keyword": [40, 152, 160, 164, 179, 183, 193, 216, 239, 273, 283, 288, 289, 309, 324, 325, 329, 350, 447, 506, 635, 730, 741, 768, 821, 825, 833, 843, 882, 901, 910, 911, 929, 930, 935, 959, 1060, 1316, 1340, 1358, 1371], "kl": 713, "kleen": [362, 364, 758, 759, 760, 761, 843, 972, 973, 1358], "klmnoopqrstuvwxyz": [253, 350], "knight": 1367, "know": [56, 150, 274, 317, 350, 581, 589, 843, 925, 959], "known": [154, 197, 399, 581, 942, 1008, 1202], "kurtosi": [652, 843, 1243, 1358], "kuzu_db_conn": 150, "kwarg": [32, 33, 37, 55, 66, 67, 69, 70, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 93, 145, 147, 150, 151, 179, 181, 183, 196, 200, 216, 231, 273, 278, 309, 350, 353, 635, 843, 879, 901, 905, 934, 959, 1340, 1358, 1363, 1371, 1386], "k\u00f9zudb": 150, "l": [801, 802], "l1": 64, "l2": 64, "label": [240, 307, 312, 350, 353, 354, 440, 638, 652, 653, 654, 656, 658, 660, 662, 664, 665, 667, 669, 843, 883, 902, 959, 1054, 1231, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1358, 1363], "label_column": [312, 350], "labelangl": [350, 353, 1358, 1363], "lag": [293, 350, 394, 574, 676, 771, 843, 914, 959, 1003, 1195, 1262, 1358], "lake": [40, 152, 164, 350, 855], "lambda": [52, 95, 163, 233, 259, 273, 274, 279, 336, 350, 399, 498, 499, 581, 589, 590, 615, 616, 777, 778, 791, 804, 805, 817, 843, 893, 901, 906, 942, 959, 1008, 1118, 1119, 1202, 1210, 1358], "land": [447, 459, 1060, 1072], "languag": [163, 240, 255, 282, 320, 350, 470, 475, 488, 497, 651, 655, 657, 659, 661, 663, 666, 668, 670, 782, 783, 785, 786, 830, 831, 843, 883, 888, 908, 959, 1087, 1092, 1105, 1117, 1358], "larg": [11, 12, 15, 56, 150, 153, 159, 168], "large_str": [253, 302, 309, 350], "larger": [11, 48, 49, 50, 51, 510, 773, 843, 959], "largest": [210, 313, 350, 420, 748, 749, 843, 859, 922, 959, 1343, 1358], "last": [40, 158, 163, 166, 167, 172, 173, 174, 175, 242, 255, 258, 274, 285, 296, 301, 308, 315, 344, 350, 375, 386, 395, 439, 455, 467, 471, 489, 511, 533, 558, 576, 579, 581, 614, 615, 617, 619, 621, 622, 631, 646, 684, 685, 703, 719, 727, 744, 766, 828, 839, 843, 888, 917, 921, 923, 950, 959, 965, 984, 995, 1004, 1053, 1068, 1084, 1088, 1106, 1130, 1139, 1152, 1164, 1179, 1197, 1200, 1238, 1271, 1289, 1305, 1313, 1330, 1339, 1358, 1379, 1381], "last_column": [41, 350], "later": [255, 290, 350, 604, 888, 912, 959], "latest": [33, 131, 152, 164, 207, 473, 474, 602, 726, 729, 784, 1090, 1091, 1312, 1315], "latt": 965, "latter": [41, 131, 228, 350, 1122, 1358], "lazi": [1, 48, 49, 50, 51, 52, 64, 148, 154, 158, 160, 163, 179, 255, 273, 274, 297, 350, 590, 793, 815, 818, 834, 843, 869, 887, 888, 931, 935, 936, 938, 940, 942, 943, 944, 945, 946, 947, 948, 949, 959, 965, 1367, 1368, 1369, 1370, 1371, 1373, 1386, 1389], "lazili": [148, 149, 154, 158, 160, 163, 164, 165, 166, 167, 168, 865, 959], "lazy_fram": [62, 63, 129], "lazyfram": [0, 1, 10, 56, 57, 58, 59, 60, 62, 63, 64, 95, 129, 143, 148, 154, 158, 160, 163, 164, 165, 166, 167, 168, 169, 172, 173, 179, 193, 214, 219, 257, 273, 274, 290, 297, 350, 442, 506, 581, 604, 821, 822, 833, 843, 855, 956, 957, 958, 964, 965, 1367, 1368, 1371, 1373, 1386, 1387, 1389], "lazyframeext": [904, 959], "lazygroupbi": [882, 883, 908, 959], "lbl": [307, 312, 350], "ldf": [1, 935, 936, 938, 940, 943, 944, 945, 946, 947, 948, 949], "ldot": [497, 843, 1117, 1358], "le": [694, 843, 1358], "lead": [15, 47, 95, 137, 143, 169, 263, 291, 293, 300, 350, 394, 513, 516, 574, 581, 589, 590, 675, 676, 721, 723, 773, 809, 827, 843, 893, 913, 914, 942, 959, 1003, 1195, 1210, 1260, 1262, 1307, 1309, 1358], "leap": [460, 470, 1073, 1087], "leap_year": 460, "learn": [312, 350], "least": [64, 110, 274, 350, 416, 417, 632, 697, 699, 769, 773, 775, 843, 1025, 1026, 1226, 1283, 1285, 1358, 1379], "leav": [6, 265, 317, 350, 581, 897, 925, 959], "left": [16, 17, 41, 56, 172, 173, 174, 175, 240, 254, 255, 282, 319, 350, 440, 496, 497, 498, 499, 525, 527, 638, 651, 655, 657, 659, 661, 663, 666, 668, 670, 674, 747, 769, 777, 778, 782, 783, 785, 786, 791, 801, 802, 817, 830, 831, 833, 843, 883, 887, 888, 908, 926, 959, 1054, 1116, 1117, 1118, 1119, 1145, 1231, 1258, 1341, 1358, 1370, 1374, 1379], "left_clos": [440, 638, 843, 1054, 1231, 1358], "left_on": [254, 255, 319, 350, 887, 888, 926, 959], "left_right": [254, 319, 350, 887, 926, 959], "leftmost": [674, 843, 1258, 1358, 1381], "len": [13, 179, 183, 214, 253, 274, 327, 331, 336, 350, 433, 590, 601, 603, 641, 649, 774, 797, 801, 843, 866, 928, 933, 937, 942, 959, 964, 1047, 1241, 1358], "len_byt": [13, 425, 708, 709, 1034, 1294], "len_char": [424, 707, 1033, 1293], "length": [64, 65, 83, 145, 153, 159, 163, 177, 181, 238, 240, 282, 295, 350, 353, 424, 439, 475, 575, 581, 602, 641, 645, 646, 649, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 683, 703, 707, 708, 710, 711, 714, 716, 727, 736, 770, 801, 802, 815, 818, 819, 820, 834, 843, 883, 902, 908, 916, 959, 1033, 1040, 1053, 1064, 1092, 1196, 1202, 1223, 1237, 1238, 1241, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1270, 1289, 1293, 1294, 1296, 1297, 1300, 1302, 1313, 1322, 1358, 1375, 1376, 1379], "leq": [496, 498, 499, 843, 1116, 1118, 1119, 1358], "less": [54, 163, 255, 350, 510, 541, 588, 589, 719, 833, 843, 888, 959, 1305, 1389], "letter": [227, 333, 344, 350, 500, 690, 698, 700, 702, 714, 734, 789, 843, 876, 939, 950, 959, 965, 1276, 1284, 1286, 1288, 1300, 1320, 1381], "level": [11, 41, 43, 44, 47, 49, 51, 144, 161, 163, 166, 167, 168, 233, 259, 270, 297, 302, 350, 354, 506, 843, 855, 918, 959, 1333, 1358, 1386], "lexic": [68, 965, 1037], "lf": [10, 48, 49, 50, 51, 59, 95, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 912, 914, 915, 916, 917, 919, 920, 921, 922, 923, 925, 926, 927, 928, 929, 931, 932, 933, 937, 941, 959, 1375, 1386, 1389], "lf1": [822, 918, 959, 1371, 1373, 1387], "lf2": [822, 918, 959, 1371, 1373, 1387], "lf3": [959, 1371], "lf4": [959, 1371], "lf5": 959, "lf6": 959, "lf_other": [931, 959], "lib": [843, 1333, 1358], "librari": [1, 112, 145, 150, 153, 589, 843, 963, 1389], "life": [496, 498, 499, 843, 1116, 1118, 1119, 1358], "lifetim": [203, 854, 1373], "light": [41, 350], "like": [36, 38, 40, 43, 44, 45, 46, 47, 63, 131, 145, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 219, 240, 247, 249, 254, 285, 290, 307, 308, 350, 353, 442, 448, 512, 553, 589, 607, 641, 697, 722, 723, 754, 839, 843, 860, 865, 870, 883, 959, 1061, 1174, 1233, 1283, 1347, 1358, 1363], "limit": [11, 12, 51, 52, 150, 151, 185, 230, 350, 402, 505, 511, 843, 878, 959, 1011, 1125, 1130, 1358, 1376, 1385], "line": [11, 21, 41, 148, 149, 153, 163, 238, 247, 249, 350, 353, 697, 1283, 1358, 1363], "line_termin": [38, 48, 350, 959], "linear": [218, 246, 276, 342, 350, 525, 526, 548, 593, 639, 662, 663, 771, 772, 816, 843, 869, 886, 903, 948, 959, 1055, 1143, 1144, 1169, 1232, 1249, 1358], "linearli": 802, "lineitem": [139, 149, 151], "link": 963, "list": [1, 14, 34, 40, 41, 56, 57, 59, 62, 63, 65, 71, 87, 104, 129, 130, 132, 133, 134, 136, 137, 139, 142, 143, 146, 148, 149, 151, 152, 153, 154, 156, 157, 158, 159, 160, 163, 164, 165, 166, 167, 168, 177, 178, 179, 183, 190, 191, 192, 198, 215, 220, 224, 226, 227, 231, 237, 239, 240, 244, 252, 269, 272, 278, 282, 283, 284, 285, 288, 296, 303, 304, 312, 314, 315, 316, 318, 324, 329, 330, 350, 360, 387, 398, 399, 400, 440, 447, 459, 502, 508, 513, 522, 531, 589, 590, 602, 603, 631, 638, 644, 647, 653, 654, 656, 658, 660, 662, 665, 667, 669, 684, 685, 696, 698, 700, 702, 717, 737, 739, 740, 747, 766, 768, 771, 782, 783, 785, 786, 788, 796, 798, 802, 803, 805, 823, 825, 831, 839, 843, 867, 874, 876, 879, 882, 883, 905, 910, 917, 923, 924, 929, 931, 935, 936, 959, 964, 965, 996, 1007, 1008, 1009, 1040, 1054, 1060, 1072, 1115, 1121, 1131, 1134, 1140, 1141, 1150, 1210, 1231, 1239, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1276, 1282, 1284, 1286, 1288, 1300, 1303, 1338, 1341, 1358, 1367, 1372, 1376, 1378, 1381, 1388, 1389], "list_catalog": 201, "list_namespac": 201, "list_of_seri": 805, "list_tabl": 201, "listtostructwidthstrategi": [581, 1202], "lit": [1, 361, 403, 527, 598, 614, 701, 770, 771, 777, 791, 815, 818, 833, 834, 843, 1125, 1358], "liter": [10, 16, 17, 21, 38, 40, 42, 43, 47, 48, 49, 50, 51, 150, 152, 158, 160, 163, 164, 165, 166, 167, 168, 182, 183, 184, 193, 196, 200, 269, 288, 289, 293, 319, 324, 325, 350, 361, 403, 422, 426, 429, 451, 473, 494, 495, 503, 510, 515, 517, 527, 541, 588, 598, 610, 612, 625, 626, 636, 645, 646, 689, 690, 691, 700, 701, 702, 712, 713, 714, 741, 742, 750, 759, 761, 763, 769, 770, 771, 772, 780, 781, 784, 797, 801, 803, 807, 809, 812, 821, 825, 827, 829, 833, 843, 878, 910, 911, 914, 926, 929, 930, 959, 965, 1012, 1042, 1064, 1090, 1113, 1123, 1145, 1222, 1237, 1238, 1257, 1259, 1262, 1275, 1276, 1277, 1286, 1287, 1288, 1298, 1299, 1300, 1349, 1358, 1381], "littl": [284, 350, 407, 1016], "lmn": 965, "ln": [496, 497, 498, 499, 843, 1116, 1117, 1118, 1119, 1358, 1379], "ln_a": 1380, "load": [3, 5, 6, 133, 135, 145, 150, 152, 153, 159, 164, 165, 182, 184, 350, 843, 855, 959, 1389], "load_from_fil": [2, 5, 6], "load_sheet_by_nam": 153, "load_tabl": 153, "load_workbook": 153, "loader": [312, 350], "lobster": [701, 1287], "loc": [350, 354], "local": [4, 40, 150, 152, 164, 165, 168, 350, 488, 633, 634, 843, 1032, 1036, 1066, 1067, 1092, 1095, 1105, 1227, 1228, 1358, 1368], "localhost": 150, "localis": [475, 488, 1105], "locat": [41, 160, 163, 166, 168, 228, 280, 310, 316, 350, 674, 843, 924, 959, 1122, 1131, 1257, 1258, 1358], "lock": 185, "log": [30, 58, 420, 493, 586, 612, 636, 749, 843, 1111, 1358, 1379], "log10": [843, 1358, 1379], "log10_a": 1380, "log16_a": 1380, "log1p": [843, 1358, 1379], "log1p_a": 1380, "log2": 1379, "logarithm": [584, 585, 586, 843, 1205, 1206, 1207, 1358, 1380], "logic": [64, 259, 336, 350, 353, 354, 362, 364, 442, 590, 747, 758, 759, 760, 761, 805, 833, 843, 870, 875, 887, 904, 912, 942, 959, 972, 973, 1210, 1339, 1341, 1358, 1363], "london": [452, 456, 474, 1065, 1069, 1091], "london_timezon": [474, 1091], "london_to_amsterdam": [474, 1091], "long": [227, 265, 274, 317, 318, 350, 407, 876, 897, 925, 959, 1016], "longer": [148, 149, 163], "longest": 581, "look": [11, 240, 350, 403, 581, 883, 959, 1012], "lookup": 839, "loop": [150, 590, 843], "lose": [449, 1062], "lossi": [148, 149, 163], "lot": 54, "love": [690, 714, 1276, 1300], "low": [18, 150, 429, 638, 843, 1231, 1358], "low_memori": [148, 149, 158, 160, 163, 167, 168], "lower": [163, 218, 240, 276, 342, 350, 429, 527, 587, 615, 639, 643, 662, 663, 763, 782, 783, 785, 786, 801, 802, 816, 830, 831, 843, 869, 883, 903, 948, 959, 1042, 1055, 1145, 1208, 1232, 1235, 1249, 1346, 1358, 1376, 1379], "lower_bound": [240, 350, 429, 527, 843, 883, 959, 1042, 1145, 1346, 1358], "lowercas": [621, 732, 734, 1318, 1320, 1381], "lowest": [587, 843], "lru_cach": [259, 350, 590, 843, 1210, 1358], "lst": 178, "lt": [171, 506, 756, 843, 1358], "ltrim": 1379, "lyric": [690, 714, 1276, 1300], "lz4": [43, 44, 47, 49, 51, 350, 959], "lzo": [47, 51, 350, 959], "m": [71, 73, 254, 350, 448, 449, 451, 456, 457, 477, 479, 480, 491, 697, 726, 728, 729, 733, 784, 785, 786, 787, 793, 801, 887, 959, 965, 1061, 1062, 1064, 1069, 1070, 1094, 1096, 1097, 1108, 1283, 1312, 1314, 1315, 1319, 1371, 1381, 1382], "m_2": [682, 843, 1269, 1358], "m_3": [682, 843, 1269, 1358], "m_i": [682, 843, 1269, 1358], "machin": 1389, "maco": 171, "made": [41, 150, 350, 480, 1097], "mai": [1, 32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 63, 64, 72, 78, 130, 131, 132, 133, 134, 136, 140, 141, 142, 143, 144, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 174, 176, 177, 179, 180, 181, 182, 183, 184, 188, 189, 190, 191, 192, 193, 199, 203, 218, 219, 226, 228, 240, 254, 255, 256, 259, 282, 290, 297, 307, 309, 312, 319, 320, 350, 353, 354, 424, 439, 440, 442, 447, 448, 449, 459, 461, 470, 475, 477, 488, 500, 521, 556, 581, 589, 590, 601, 604, 638, 651, 652, 653, 655, 657, 659, 661, 663, 664, 666, 668, 670, 700, 702, 705, 707, 713, 768, 770, 777, 778, 782, 783, 785, 786, 791, 801, 802, 817, 830, 831, 843, 864, 865, 869, 870, 883, 887, 888, 889, 893, 908, 912, 918, 926, 932, 933, 942, 959, 1033, 1036, 1037, 1053, 1054, 1055, 1060, 1061, 1062, 1072, 1074, 1087, 1092, 1094, 1105, 1115, 1122, 1140, 1177, 1210, 1231, 1243, 1244, 1247, 1249, 1250, 1286, 1288, 1291, 1293, 1337, 1340, 1342, 1358, 1363, 1389], "main": [171, 865, 959], "maintain": [48, 49, 50, 51, 296, 350, 400, 582, 674, 685, 751, 766, 843, 869, 917, 959, 1009, 1203, 1258, 1344, 1358], "maintain_ord": [48, 49, 50, 51, 239, 254, 272, 274, 296, 315, 319, 320, 330, 332, 334, 337, 338, 339, 340, 341, 342, 343, 350, 360, 400, 410, 415, 418, 420, 513, 516, 582, 590, 685, 749, 751, 766, 843, 865, 875, 882, 887, 902, 915, 917, 923, 926, 936, 938, 940, 943, 944, 945, 946, 947, 948, 949, 959, 1009, 1203, 1344, 1358], "maintainorderjoin": [254, 319, 350, 887, 926, 959], "major": [153, 307, 350], "make": [41, 64, 87, 130, 131, 135, 145, 148, 149, 152, 153, 154, 156, 160, 164, 266, 270, 277, 308, 320, 350, 353, 498, 499, 621, 622, 631, 644, 718, 843, 898, 959, 1118, 1119, 1304, 1339, 1358], "man": [715, 1301], "manag": [55, 96, 97, 200, 854, 855, 1373, 1386], "managed_shallow_clon": 200, "mandatori": [41, 350], "mango": [422, 426, 694, 720, 1030, 1035, 1280, 1306], "mani": [150, 151, 168, 228, 254, 350, 700, 702, 714, 887, 959, 1122, 1286, 1300, 1358, 1362], "manner": 150, "map": [52, 54, 87, 132, 133, 148, 149, 150, 151, 154, 155, 160, 162, 163, 166, 179, 211, 214, 232, 252, 259, 279, 283, 284, 285, 287, 303, 350, 361, 475, 488, 589, 590, 614, 616, 617, 619, 621, 622, 645, 646, 714, 754, 804, 843, 861, 906, 909, 959, 964, 965, 1055, 1092, 1105, 1210, 1237, 1238, 1300, 1347, 1358, 1368, 1370, 1371, 1386], "map_": 116, "map_batch": [843, 959], "map_el": [107, 259, 350, 589, 757, 843, 1358], "map_field": [618, 620], "map_row": 350, "mapelementsstrategi": [590, 843], "mapping_strategi": [631, 843], "march": [477, 1094], "mariadb": 151, "mark": [41, 144, 350, 421, 843, 1029, 1358], "mark_area": [1358, 1363], "mark_attr": [350, 353, 1358, 1363], "mark_bar": [350, 353, 1358, 1363], "mark_lin": [350, 353], "mark_point": [350, 353], "markdown": [7, 21, 203], "marker": [41, 350], "mask": [168, 179, 183, 247, 249, 350, 404, 528, 530, 533, 538, 633, 634, 689, 692, 701, 843, 1013, 1126, 1145, 1146, 1149, 1152, 1158, 1227, 1228, 1259, 1275, 1278, 1287, 1349, 1358], "mass": [496, 498, 499, 843, 1116, 1118, 1119, 1358], "massag": [265, 317, 350, 897, 925, 959], "match": [40, 41, 64, 71, 95, 118, 130, 132, 133, 134, 136, 143, 148, 150, 157, 158, 160, 163, 167, 168, 172, 173, 174, 175, 211, 230, 231, 254, 255, 278, 283, 319, 350, 422, 426, 597, 598, 599, 645, 646, 664, 689, 690, 691, 694, 697, 698, 700, 701, 702, 705, 706, 712, 713, 714, 720, 726, 728, 729, 833, 839, 843, 861, 878, 887, 888, 905, 926, 959, 965, 1030, 1035, 1114, 1237, 1238, 1250, 1275, 1276, 1277, 1280, 1283, 1284, 1286, 1287, 1288, 1291, 1292, 1298, 1299, 1300, 1306, 1312, 1314, 1315, 1358, 1381], "matches_overlap": [700, 702, 1288], "matches_supertyp": [230, 350, 878, 959], "materi": [143, 148, 154, 158, 160, 259, 285, 336, 350, 864, 902, 942, 952, 959, 965, 1210, 1358], "materialis": [252, 253, 283, 284, 350], "materialized_view": 200, "math": [1, 11, 60, 274, 350, 441, 843, 1044, 1046, 1267, 1331, 1358, 1379, 1383, 1385], "mathemat": [750, 788, 843, 1379], "mathshortcut": [1, 60], "matplotlib": [171, 605, 902, 915, 959], "matter": [240, 252, 282, 284, 285, 304, 350, 651, 722, 723, 843, 883, 908, 959], "max": [10, 26, 41, 47, 51, 144, 218, 230, 239, 261, 274, 282, 350, 354, 435, 505, 581, 589, 631, 641, 645, 646, 651, 654, 655, 675, 719, 770, 782, 785, 807, 823, 843, 869, 878, 882, 908, 959, 1049, 1055, 1125, 1202, 1233, 1245, 1260, 1305, 1358, 1367, 1376, 1379], "max_a": [282, 350, 651, 843, 908, 959], "max_binary_s": 150, "max_col": [177, 179], "max_colname_length": [238, 350], "max_color": [41, 350], "max_data_s": 183, "max_elem": 1376, "max_horizont": [350, 806], "max_items_per_column": [238, 350], "max_level": 144, "max_siz": [53, 178, 179, 181, 183, 1389], "max_text_s": 150, "max_valu": 1389, "max_width": [581, 1202], "maxim": [337, 373, 843, 943, 982, 1358], "maximum": [11, 27, 38, 47, 48, 51, 53, 72, 133, 136, 148, 149, 150, 153, 157, 158, 159, 163, 167, 169, 177, 178, 179, 181, 183, 238, 240, 260, 261, 350, 380, 425, 546, 591, 623, 633, 641, 703, 705, 708, 716, 727, 806, 807, 843, 883, 894, 959, 989, 1034, 1075, 1167, 1211, 1219, 1227, 1233, 1289, 1291, 1294, 1302, 1313, 1358, 1375], "mb": [226, 350, 408, 1115, 1358], "me": [690, 714, 734, 1276, 1300, 1320], "mean": [47, 51, 62, 129, 148, 149, 154, 160, 163, 166, 203, 218, 230, 239, 240, 255, 263, 274, 282, 320, 329, 350, 470, 475, 488, 502, 505, 510, 651, 655, 656, 657, 659, 661, 663, 666, 668, 670, 682, 688, 697, 704, 782, 783, 785, 786, 787, 809, 830, 831, 833, 843, 869, 878, 882, 883, 888, 893, 908, 935, 959, 1055, 1087, 1092, 1105, 1121, 1125, 1246, 1269, 1274, 1283, 1290, 1358, 1375, 1376], "mean_horizont": [350, 808], "measur": [265, 317, 350, 354, 897, 925, 959], "measure_a": [350, 354], "measure_b": [350, 354], "median": [218, 274, 350, 505, 658, 659, 843, 869, 931, 959, 1055, 1247, 1358, 1379], "mediat": 1386, "medium": [41, 350], "megan": [266, 350, 898, 959], "melt": [317, 350, 925, 959], "member": [240, 350, 883, 959, 1150, 1358], "membership": [382, 549, 991, 1170], "memori": [10, 15, 47, 51, 62, 63, 64, 130, 131, 134, 135, 136, 148, 149, 150, 152, 153, 154, 158, 160, 163, 164, 166, 167, 168, 207, 228, 259, 284, 285, 294, 308, 336, 350, 631, 642, 677, 843, 864, 865, 875, 902, 915, 934, 959, 1122, 1210, 1234, 1263, 1264, 1339, 1358], "memory_map": [154, 160, 166], "memory_resourc": 934, "merg": [40, 254, 255, 266, 350, 887, 888, 898, 959], "merge_sort": [350, 959], "messi": [697, 699, 1283, 1285], "met": 833, "meta": [98, 442, 695, 843, 1281], "metadata": [0, 47, 48, 49, 50, 51, 161, 165, 189, 193, 350, 855, 959], "metastor": 194, "method": [4, 32, 33, 34, 35, 36, 39, 40, 41, 43, 44, 52, 53, 54, 55, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 128, 131, 140, 141, 142, 146, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 169, 176, 179, 183, 188, 194, 195, 197, 198, 203, 205, 209, 214, 218, 219, 222, 223, 228, 235, 239, 246, 252, 259, 265, 270, 276, 283, 284, 285, 293, 315, 324, 326, 331, 336, 342, 350, 359, 362, 363, 394, 429, 442, 454, 477, 480, 494, 495, 503, 510, 512, 515, 517, 525, 541, 574, 588, 590, 608, 610, 612, 614, 615, 617, 619, 621, 622, 625, 626, 627, 630, 636, 639, 641, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 676, 690, 696, 700, 702, 714, 722, 723, 724, 725, 730, 736, 742, 750, 752, 756, 757, 773, 805, 816, 835, 836, 838, 839, 843, 844, 845, 848, 849, 850, 851, 852, 855, 865, 869, 870, 872, 873, 886, 897, 903, 914, 923, 929, 932, 934, 937, 942, 948, 959, 964, 967, 974, 1003, 1042, 1055, 1076, 1077, 1094, 1097, 1112, 1113, 1122, 1123, 1133, 1135, 1137, 1143, 1162, 1195, 1209, 1210, 1221, 1222, 1232, 1233, 1249, 1262, 1276, 1282, 1286, 1288, 1300, 1316, 1322, 1341, 1350, 1352, 1354, 1358, 1359, 1362, 1364, 1365, 1366, 1368, 1372], "metric": 150, "micro": [476, 1093], "microsecond": [71, 73, 240, 252, 255, 282, 284, 285, 304, 320, 350, 470, 473, 475, 480, 483, 488, 497, 651, 655, 657, 659, 661, 663, 666, 668, 670, 784, 785, 786, 787, 829, 830, 831, 843, 883, 888, 902, 908, 959, 965, 1087, 1090, 1092, 1100, 1105, 1117, 1358, 1382], "microsoft": [34, 41, 350], "mid_color": [41, 350], "midnight": 88, "midpoint": [218, 276, 342, 350, 639, 662, 663, 816, 843, 869, 903, 948, 959, 1055, 1232, 1249, 1358], "might": [148, 149, 163, 185, 254, 274, 308, 317, 350, 590, 752, 843, 887, 917, 925, 959], "millennia": 1382, "millennium": 1382, "milli": [476, 1093], "millisecond": [240, 255, 282, 320, 350, 458, 465, 470, 475, 484, 488, 497, 651, 655, 657, 659, 661, 663, 666, 668, 670, 785, 786, 787, 801, 830, 831, 843, 883, 888, 908, 959, 965, 1087, 1092, 1101, 1105, 1117, 1358, 1382], "milliseconds_diff": [483, 484, 486], "mimic": 771, "min": [41, 47, 51, 145, 218, 230, 268, 274, 282, 350, 436, 505, 590, 631, 641, 651, 660, 661, 782, 785, 812, 821, 843, 869, 878, 908, 959, 1050, 1055, 1125, 1233, 1248, 1358, 1376, 1379, 1382, 1389], "min_a": [282, 350, 651, 843, 908, 959], "min_col": [177, 179], "min_color": [41, 350], "min_elem": 1376, "min_horizont": [350, 811, 821], "min_period": [439, 496, 498, 499, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 819, 820, 843, 1053, 1116, 1118, 1119, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1358], "min_sampl": [439, 496, 498, 499, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 819, 820, 843, 1053, 1116, 1118, 1119, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1358], "min_siz": [178, 179, 181, 183, 1389], "min_valu": 1389, "mincol": 177, "minim": [340, 374, 381, 547, 677, 685, 843, 946, 983, 990, 1168, 1214, 1263, 1358], "minimum": [47, 51, 177, 178, 179, 181, 183, 233, 267, 268, 350, 496, 498, 499, 609, 624, 634, 641, 811, 812, 843, 899, 959, 1081, 1116, 1118, 1119, 1220, 1228, 1233, 1358, 1375, 1389], "minu": [470, 627, 843, 1087], "minut": [240, 255, 282, 320, 350, 458, 462, 464, 469, 470, 473, 475, 476, 485, 488, 497, 651, 655, 657, 659, 661, 663, 666, 668, 670, 784, 785, 786, 787, 829, 830, 831, 843, 883, 888, 908, 959, 965, 1087, 1090, 1092, 1102, 1105, 1117, 1358, 1382], "minutes_diff": 485, "misc": 1373, "miscellan": 855, "mismatch": [64, 121, 158, 167, 172, 174], "miss": [64, 148, 149, 163, 229, 235, 350, 402, 496, 498, 499, 504, 511, 534, 535, 581, 843, 877, 959, 1011, 1116, 1118, 1119, 1124, 1130, 1358], "missing_utf8_is_empty_str": [148, 149, 163], "mix": [12, 255, 308, 350, 770, 822, 888, 918, 959, 965, 1055, 1358], "mixin": 1, "mkdir": [48, 49, 50, 51, 52, 54, 959], "mlnm": 463, "mm": [41, 350], "mn": 1381, "mno": [17, 21], "mnop": 1381, "mo": 787, "mocha": 965, "mod": [843, 1379], "mode": [39, 40, 41, 42, 48, 49, 50, 51, 172, 174, 274, 297, 350, 671, 698, 815, 818, 834, 843, 864, 875, 902, 915, 959, 1254, 1284, 1358, 1367, 1368, 1386], "model": [312, 350], "modifi": [52, 53, 54, 148, 149, 163, 185, 203, 228, 244, 251, 252, 322, 350, 376, 474, 491, 689, 697, 698, 701, 712, 713, 732, 734, 735, 843, 974, 1091, 1108, 1122, 1275, 1283, 1284, 1287, 1298, 1299, 1318, 1320, 1321, 1358], "modul": [100, 108, 153, 842, 963, 965, 1389], "modulu": [610, 843], "moment": [47, 48, 49, 50, 51, 62, 63, 216, 350, 539, 682, 843, 864, 865, 875, 902, 915, 959, 1160, 1269, 1358], "mon": [350, 353, 1382], "mondai": [240, 350, 447, 459, 488, 490, 768, 883, 959, 1060, 1072, 1105, 1107], "monkei": [710, 711, 1296, 1297], "month": [240, 255, 282, 320, 350, 455, 467, 468, 470, 473, 475, 477, 480, 488, 497, 651, 655, 657, 659, 661, 663, 666, 668, 670, 781, 782, 783, 784, 785, 786, 787, 830, 831, 843, 883, 888, 908, 959, 1068, 1084, 1085, 1087, 1090, 1092, 1094, 1097, 1105, 1117, 1358, 1382], "month_nam": [477, 480], "monthbegin": [468, 1085], "monthend": [467, 1084], "moos": 965, "more": [21, 41, 47, 51, 56, 64, 96, 97, 126, 130, 131, 132, 133, 134, 135, 136, 143, 145, 150, 151, 152, 153, 157, 158, 159, 160, 164, 165, 167, 172, 174, 179, 203, 205, 216, 218, 222, 231, 251, 252, 259, 265, 270, 278, 283, 284, 286, 297, 307, 308, 312, 315, 317, 336, 350, 354, 363, 400, 424, 506, 510, 518, 539, 569, 582, 586, 589, 590, 630, 631, 673, 682, 698, 707, 726, 728, 729, 751, 762, 774, 790, 796, 799, 808, 810, 813, 814, 823, 833, 839, 843, 869, 872, 873, 879, 897, 904, 905, 918, 923, 925, 934, 959, 963, 965, 967, 1009, 1033, 1036, 1055, 1136, 1137, 1160, 1190, 1203, 1210, 1256, 1269, 1284, 1293, 1312, 1314, 1315, 1337, 1339, 1344, 1358, 1373, 1374, 1384, 1387, 1388, 1389], "more_bi": [272, 296, 350, 685, 843, 917, 959], "more_column": [227, 316, 350, 500, 789, 843, 876, 924, 959, 965], "more_expr": [631, 766, 769, 770, 771, 772, 843], "more_nam": [737, 839], "most": [41, 130, 148, 149, 151, 163, 172, 173, 174, 175, 308, 350, 413, 414, 602, 611, 632, 646, 719, 843, 1022, 1023, 1215, 1226, 1238, 1305, 1339, 1358, 1370, 1386], "mostli": [302, 350, 506, 843], "move": [274, 285, 350, 447, 496, 497, 498, 499, 654, 656, 660, 667, 833, 843, 1060, 1116, 1117, 1118, 1119, 1245, 1246, 1248, 1252, 1358], "mr": 934, "mssql": [39, 350], "much": [259, 318, 336, 350, 424, 425, 439, 556, 590, 707, 708, 805, 843, 942, 1033, 1034, 1053, 1177, 1210, 1293, 1294, 1358], "mul": 843, "multi": [8, 41, 148, 149, 312, 350, 500, 697, 843, 1283], "multi_fram": [41, 350], "multicolselector": 208, "multiindexselector": [208, 969], "multipl": [41, 54, 62, 63, 64, 113, 129, 148, 149, 153, 154, 158, 159, 160, 163, 166, 167, 168, 177, 179, 183, 220, 226, 228, 231, 239, 240, 244, 253, 256, 272, 274, 278, 285, 288, 296, 319, 324, 329, 350, 420, 556, 589, 595, 602, 611, 612, 631, 645, 647, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 685, 737, 749, 766, 774, 791, 804, 806, 811, 817, 823, 826, 833, 839, 843, 855, 864, 865, 871, 875, 879, 882, 883, 889, 902, 905, 910, 915, 917, 926, 929, 935, 942, 959, 974, 1004, 1115, 1122, 1177, 1197, 1215, 1237, 1239, 1271, 1358, 1371, 1376], "multipli": [589, 653, 654, 656, 658, 660, 662, 665, 667, 669, 741, 843, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1358], "multithread": [296, 350, 685, 766, 843, 917, 959, 1004, 1197, 1271, 1358], "must": [34, 41, 74, 95, 132, 143, 145, 148, 152, 160, 163, 164, 165, 168, 169, 218, 227, 240, 255, 256, 266, 274, 282, 283, 350, 440, 581, 590, 605, 638, 645, 646, 651, 714, 770, 782, 783, 791, 802, 833, 843, 869, 876, 883, 888, 889, 893, 898, 908, 915, 934, 959, 1054, 1055, 1231, 1237, 1238, 1300, 1358], "mutual": [283, 350], "my": [165, 169, 350, 353, 1358, 1363], "my_bucket": [904, 959], "my_column": 942, "my_column_": [314, 350], "my_column_0": [314, 350], "my_column_1": [314, 350], "my_column_2": [314, 350], "my_custom_aggreg": 805, "my_fil": 154, "my_holidai": [447, 459, 768, 1060, 1072], "my_larger_than_ram_fil": [48, 49, 50, 51, 959], "my_long_fil": 163, "my_struct": 825, "mydf": 163, "myrol": 151, "mysql": 151, "n": [1, 13, 14, 18, 26, 27, 38, 46, 48, 57, 58, 59, 60, 71, 73, 139, 143, 148, 149, 153, 158, 163, 179, 212, 228, 234, 240, 242, 252, 253, 258, 259, 284, 285, 286, 293, 298, 301, 304, 306, 321, 333, 335, 344, 350, 366, 394, 399, 408, 410, 415, 418, 419, 420, 424, 425, 439, 443, 447, 449, 451, 457, 479, 491, 497, 503, 506, 514, 520, 543, 551, 557, 559, 569, 570, 574, 577, 579, 581, 583, 632, 635, 644, 665, 666, 669, 670, 673, 676, 682, 687, 703, 707, 708, 712, 713, 718, 719, 721, 722, 727, 729, 744, 748, 749, 750, 754, 755, 757, 775, 784, 785, 786, 787, 793, 795, 815, 818, 819, 820, 821, 824, 828, 832, 834, 843, 862, 881, 883, 884, 892, 914, 919, 921, 927, 939, 941, 950, 959, 965, 1003, 1008, 1017, 1028, 1033, 1034, 1041, 1053, 1056, 1060, 1062, 1064, 1070, 1096, 1108, 1117, 1122, 1123, 1132, 1139, 1164, 1172, 1178, 1180, 1190, 1191, 1195, 1200, 1202, 1226, 1251, 1253, 1256, 1262, 1269, 1273, 1289, 1293, 1294, 1298, 1299, 1304, 1305, 1313, 1315, 1330, 1336, 1343, 1347, 1348, 1358, 1370, 1371, 1378, 1381, 1382, 1384, 1386, 1389], "n0": [399, 581], "n00": [1008, 1202], "n01": [1008, 1202], "n02": [1008, 1202], "n1": [399, 581], "n2": [1, 399], "n3": 1, "n_1": [506, 843], "n_2": [506, 843], "n_3": [506, 843], "n_bar": 1375, "n_bit": 1381, "n_byte": [408, 424, 425, 707, 708, 1381], "n_char": [424, 425, 707, 708, 1381], "n_chunk": [350, 974, 1122, 1234, 1358], "n_elem": 1376, "n_even": 965, "n_field_strategi": [581, 1202], "n_film": 1367, "n_foo_uniqu": 1375, "n_kilobyt": 408, "n_row": [143, 146, 148, 149, 154, 156, 158, 160, 163, 166, 167, 168, 253, 350, 959], "n_thread": [148, 149], "n_uniqu": [350, 366, 843, 1358], "na": [309, 350, 720, 1340, 1358], "naiv": [451, 452, 729, 1064, 1065, 1315], "name": [1, 19, 23, 25, 33, 36, 38, 39, 41, 42, 48, 57, 58, 59, 60, 75, 87, 105, 130, 132, 133, 134, 135, 136, 141, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 174, 175, 176, 177, 179, 182, 183, 184, 189, 191, 192, 193, 194, 195, 197, 198, 210, 211, 214, 215, 220, 221, 222, 223, 227, 231, 232, 235, 236, 238, 239, 250, 251, 252, 254, 255, 256, 259, 261, 263, 265, 266, 268, 272, 274, 278, 279, 283, 284, 285, 287, 288, 289, 296, 297, 300, 303, 305, 307, 308, 311, 312, 313, 314, 315, 316, 317, 318, 319, 324, 325, 326, 327, 328, 329, 335, 350, 354, 361, 399, 403, 404, 406, 409, 420, 429, 440, 477, 480, 500, 506, 527, 534, 535, 536, 537, 581, 590, 595, 599, 601, 603, 607, 631, 638, 648, 685, 698, 699, 712, 713, 714, 737, 739, 741, 749, 754, 758, 759, 760, 761, 762, 764, 765, 766, 769, 770, 771, 772, 773, 774, 775, 776, 779, 780, 789, 790, 795, 796, 799, 806, 807, 808, 809, 810, 811, 812, 813, 816, 819, 820, 821, 822, 824, 825, 826, 827, 828, 832, 833, 839, 843, 859, 861, 866, 867, 871, 872, 873, 876, 879, 882, 887, 888, 889, 897, 898, 905, 906, 909, 910, 911, 917, 918, 922, 923, 924, 925, 926, 929, 930, 931, 932, 933, 935, 941, 959, 964, 965, 971, 1008, 1041, 1054, 1094, 1097, 1114, 1202, 1231, 1236, 1283, 1284, 1285, 1298, 1299, 1323, 1326, 1334, 1335, 1340, 1347, 1358, 1363, 1368, 1369, 1370, 1371, 1372, 1373, 1385, 1386, 1389], "name_gener": [314, 350], "named_agg": [329, 935], "named_bi": [239, 350, 882, 959], "named_expr": [288, 289, 324, 325, 350, 741, 821, 825, 910, 911, 929, 930, 959], "named_fram": [1371, 1386], "nameless": 135, "namespac": [1, 150, 189, 191, 192, 193, 197, 349, 350, 353, 737, 822, 842, 855, 957, 958, 963, 1358, 1363, 1389], "namespaceinfo": [191, 201], "nan": [135, 179, 207, 222, 229, 308, 309, 350, 445, 446, 494, 495, 504, 515, 517, 525, 534, 535, 536, 537, 541, 588, 591, 609, 623, 624, 625, 626, 653, 679, 750, 773, 843, 872, 877, 959, 977, 981, 1058, 1059, 1124, 1153, 1154, 1219, 1220, 1244, 1266, 1339, 1340, 1358, 1389], "nan_as_nul": 207, "nan_max": [843, 1358], "nan_min": [843, 1358], "nan_to_nul": [135, 350, 959, 1358], "nana": 1381, "nanmax": [623, 624, 843, 1219, 1220, 1358], "nanosecond": [88, 240, 255, 282, 320, 350, 470, 475, 476, 486, 488, 497, 651, 655, 657, 659, 661, 663, 666, 668, 670, 785, 786, 787, 830, 831, 843, 883, 888, 908, 959, 1087, 1092, 1093, 1103, 1105, 1117, 1358, 1382], "nansum": [653, 843, 1244, 1358], "nativ": [11, 39, 148, 150, 153, 154, 156, 160, 165, 199, 252, 259, 284, 285, 304, 308, 336, 350, 590, 805, 822, 843, 849, 918, 942, 959, 963, 1210, 1339, 1358, 1362, 1386, 1389], "natur": [586, 843, 1207, 1358, 1374, 1380], "ndarrai": [134, 205, 231, 278, 308, 350, 513, 674, 843, 879, 905, 959, 967, 1131, 1257, 1258, 1339, 1358], "ndjson": [50, 158, 959], "ne": [626, 843, 1222, 1358], "ne_miss": [231, 278, 350, 843, 879, 905, 959, 1113, 1358], "nearest": [58, 218, 255, 276, 342, 350, 428, 509, 525, 639, 662, 663, 816, 843, 869, 888, 903, 948, 959, 1039, 1055, 1129, 1143, 1232, 1249, 1358, 1380], "nearest_pow2": 58, "necessari": [38, 39, 48, 55, 97, 153, 165, 308, 350, 959, 1339, 1358], "need": [64, 99, 108, 137, 148, 149, 151, 160, 163, 166, 168, 203, 240, 282, 285, 294, 350, 353, 581, 651, 677, 712, 713, 714, 730, 787, 815, 818, 834, 843, 883, 908, 959, 1263, 1298, 1299, 1300, 1316, 1358, 1363, 1389], "neg": [14, 70, 71, 72, 73, 148, 149, 154, 156, 160, 170, 242, 258, 282, 293, 295, 301, 327, 350, 394, 574, 575, 635, 636, 651, 676, 683, 703, 716, 727, 843, 908, 914, 916, 932, 933, 959, 965, 1003, 1139, 1164, 1195, 1196, 1229, 1262, 1270, 1289, 1302, 1313, 1330, 1358], "negat": [628, 843, 1224, 1358], "neither": [137, 153, 159, 286, 350, 399, 581, 1008, 1202], "nest": [55, 137, 144, 180, 181, 226, 350, 855, 1115, 1358, 1386, 1389], "nesting_level": 180, "net": [698, 1284], "netherland": [255, 350, 888, 959], "netsuite_format": 196, "never": [38, 48, 150, 254, 255, 283, 350, 887, 888, 959], "new": [39, 40, 41, 42, 53, 54, 163, 203, 208, 234, 244, 245, 259, 270, 271, 274, 279, 314, 316, 318, 319, 324, 325, 350, 361, 451, 502, 512, 514, 525, 615, 616, 631, 645, 646, 650, 709, 712, 713, 718, 719, 737, 739, 839, 843, 855, 881, 906, 924, 926, 929, 930, 942, 959, 969, 971, 1064, 1121, 1132, 1223, 1236, 1237, 1238, 1242, 1298, 1299, 1304, 1305, 1323, 1326, 1335, 1358, 1386, 1388], "new_column": [148, 149, 153, 163], "new_dai": 473, "new_dat": 470, "new_df": [319, 350, 926, 959], "new_fil": [36, 38, 43, 44, 47, 350], "new_from_index": 1358, "new_id": [314, 350], "new_lf": [926, 959], "new_tabl": 1388, "new_valu": [777, 778, 791, 817], "new_york": 785, "newli": 56, "newlin": [46, 148, 158, 163, 167, 350], "next": [19, 58, 240, 255, 282, 320, 350, 402, 447, 470, 475, 488, 641, 651, 655, 657, 659, 661, 663, 666, 668, 670, 782, 783, 785, 786, 830, 831, 843, 883, 888, 908, 959, 1011, 1060, 1087, 1092, 1105, 1233, 1358], "next_batch": 149, "next_pow2": 58, "nfc": [709, 1295, 1381], "nfd": [709, 1295, 1381], "nfkc": [709, 1295, 1381], "nfkd": [709, 1295, 1381], "nfruit": 727, "nl": [447, 459, 768, 1060, 1072], "nnel_id": 137, "no1": 965, "no_default": [235, 350, 645, 646, 714, 843, 1237, 1238, 1300, 1358], "no_optim": [48, 49, 50, 51, 62, 63, 129, 864, 865, 893, 902, 959], "nodataerror": [148, 149, 153, 159, 163], "nodd": [697, 1283], "node": [860, 864, 885, 893, 897, 902, 906, 959], "nodefault": [235, 350, 645, 646, 714, 843, 1237, 1238, 1300, 1358], "non": [4, 5, 38, 40, 41, 48, 56, 71, 72, 135, 145, 170, 210, 217, 253, 265, 282, 288, 289, 293, 313, 314, 317, 319, 324, 325, 350, 402, 419, 420, 424, 429, 433, 434, 447, 474, 511, 527, 581, 589, 590, 596, 631, 632, 641, 645, 646, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 691, 698, 707, 712, 713, 714, 734, 736, 741, 748, 749, 759, 761, 769, 770, 771, 772, 774, 776, 780, 787, 807, 809, 812, 819, 820, 821, 825, 827, 843, 859, 868, 897, 908, 910, 911, 914, 922, 925, 926, 929, 930, 959, 965, 1011, 1028, 1033, 1042, 1047, 1048, 1055, 1060, 1091, 1130, 1145, 1202, 1210, 1226, 1237, 1238, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1262, 1277, 1284, 1293, 1298, 1299, 1320, 1322, 1339, 1343, 1358, 1378, 1386], "non_exist": [474, 1091], "non_numer": [38, 48, 350, 959], "none": [1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 63, 65, 68, 71, 72, 73, 74, 75, 83, 87, 97, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 193, 194, 195, 197, 198, 199, 203, 205, 206, 212, 217, 218, 222, 223, 229, 230, 231, 233, 235, 238, 240, 241, 246, 250, 254, 255, 257, 259, 262, 265, 270, 271, 274, 278, 282, 283, 286, 290, 293, 295, 296, 302, 303, 305, 307, 308, 309, 312, 314, 315, 316, 317, 318, 319, 320, 331, 335, 350, 362, 364, 365, 377, 378, 379, 386, 387, 399, 402, 422, 424, 425, 426, 429, 433, 434, 435, 438, 440, 445, 446, 454, 470, 473, 474, 480, 495, 496, 497, 498, 499, 500, 503, 504, 505, 511, 518, 519, 521, 523, 525, 526, 527, 534, 535, 536, 537, 542, 544, 545, 552, 558, 560, 562, 569, 570, 571, 572, 573, 575, 581, 589, 590, 601, 604, 605, 606, 608, 613, 626, 627, 628, 629, 631, 632, 638, 641, 642, 645, 646, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 676, 677, 678, 679, 683, 684, 688, 689, 691, 693, 694, 695, 698, 701, 703, 704, 705, 706, 707, 708, 710, 711, 716, 718, 719, 720, 721, 722, 723, 726, 727, 728, 729, 731, 733, 736, 737, 738, 739, 740, 747, 754, 759, 760, 761, 763, 769, 770, 771, 772, 773, 774, 776, 780, 782, 783, 784, 785, 786, 787, 789, 790, 791, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 809, 812, 818, 819, 820, 825, 827, 829, 830, 831, 833, 843, 862, 863, 865, 868, 869, 872, 873, 875, 877, 878, 879, 883, 886, 887, 888, 891, 893, 897, 900, 904, 905, 908, 912, 914, 915, 916, 917, 923, 924, 925, 926, 931, 934, 937, 941, 942, 951, 952, 959, 964, 965, 967, 968, 972, 973, 975, 982, 983, 987, 988, 995, 996, 1008, 1011, 1019, 1024, 1027, 1030, 1033, 1034, 1035, 1041, 1042, 1047, 1048, 1054, 1055, 1057, 1058, 1059, 1067, 1075, 1076, 1077, 1081, 1090, 1091, 1097, 1111, 1113, 1116, 1117, 1118, 1119, 1123, 1124, 1125, 1127, 1130, 1136, 1138, 1140, 1142, 1143, 1144, 1145, 1150, 1155, 1156, 1159, 1160, 1161, 1163, 1165, 1166, 1169, 1173, 1179, 1181, 1183, 1190, 1191, 1192, 1193, 1194, 1196, 1202, 1210, 1211, 1212, 1213, 1214, 1222, 1225, 1231, 1232, 1233, 1237, 1238, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1256, 1257, 1258, 1259, 1262, 1265, 1266, 1269, 1270, 1273, 1274, 1275, 1277, 1279, 1280, 1281, 1284, 1287, 1289, 1290, 1291, 1292, 1293, 1294, 1296, 1297, 1302, 1304, 1305, 1306, 1307, 1308, 1309, 1312, 1313, 1314, 1315, 1317, 1319, 1322, 1325, 1333, 1335, 1336, 1337, 1339, 1340, 1341, 1347, 1348, 1358, 1367, 1369, 1370, 1371, 1373, 1376, 1378, 1381, 1382, 1386], "nonexist": [474, 1091], "nor": [153, 159, 286, 350], "normal": [40, 144, 240, 350, 493, 539, 652, 682, 754, 843, 883, 959, 1111, 1160, 1243, 1269, 1347, 1358, 1379], "normalised_scor": 150, "norowsreturnederror": [283, 350], "north": 74, "not_": [324, 350, 833, 843, 929, 959, 965, 1358], "not_c": [324, 350, 929, 959], "notabl": 150, "notat": [12, 41, 350], "note": [4, 11, 21, 40, 41, 47, 55, 56, 63, 64, 70, 71, 73, 88, 96, 97, 130, 131, 132, 134, 136, 137, 144, 148, 150, 151, 152, 153, 157, 158, 159, 163, 164, 165, 167, 169, 172, 174, 177, 179, 183, 185, 203, 207, 214, 216, 218, 219, 222, 226, 229, 231, 240, 241, 250, 251, 252, 254, 255, 259, 266, 270, 273, 274, 278, 279, 282, 283, 284, 285, 290, 293, 297, 304, 307, 309, 312, 314, 315, 317, 319, 320, 324, 326, 327, 350, 394, 407, 422, 424, 425, 426, 429, 437, 438, 442, 445, 446, 452, 467, 468, 470, 475, 480, 488, 497, 504, 510, 512, 519, 527, 534, 535, 553, 556, 574, 581, 590, 604, 605, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 645, 646, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 676, 678, 682, 688, 689, 690, 696, 697, 698, 699, 700, 701, 702, 703, 707, 708, 712, 713, 714, 716, 721, 722, 723, 726, 727, 734, 736, 737, 743, 750, 759, 761, 768, 777, 782, 783, 785, 786, 787, 791, 801, 803, 815, 817, 818, 822, 830, 831, 833, 834, 839, 843, 854, 865, 869, 870, 872, 877, 879, 883, 888, 898, 905, 906, 908, 912, 914, 915, 917, 918, 923, 925, 926, 929, 932, 933, 959, 963, 965, 1003, 1016, 1033, 1034, 1042, 1051, 1052, 1055, 1058, 1059, 1065, 1084, 1085, 1087, 1092, 1097, 1105, 1115, 1117, 1124, 1138, 1145, 1174, 1177, 1195, 1210, 1237, 1238, 1242, 1250, 1257, 1259, 1262, 1264, 1269, 1274, 1275, 1276, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1293, 1294, 1298, 1299, 1300, 1302, 1307, 1308, 1309, 1312, 1313, 1320, 1322, 1329, 1340, 1342, 1358, 1367, 1368, 1372, 1373, 1381, 1384, 1386], "noth": [21, 697, 706, 1283, 1292], "notic": [150, 231, 350, 879, 959, 1358], "notimplementederror": [10, 207], "now": [56, 148, 153, 282, 308, 350, 447, 598, 730, 768, 908, 959, 1060, 1316, 1339, 1358], "np": [95, 134, 205, 231, 278, 308, 350, 513, 589, 674, 843, 879, 905, 959, 967, 1131, 1148, 1151, 1153, 1154, 1257, 1258, 1358], "npt": [205, 967], "nr": [333, 344, 939, 950], "nth": [234, 350, 514, 719, 839, 843, 881, 959, 1132, 1305, 1358], "nthe": [697, 1283], "nthose": [697, 1283], "nu": 694, "null": [17, 38, 40, 47, 48, 51, 56, 64, 71, 132, 133, 136, 144, 148, 149, 158, 160, 163, 167, 168, 169, 176, 179, 183, 207, 210, 211, 212, 217, 218, 222, 223, 225, 230, 231, 233, 246, 254, 262, 263, 264, 271, 274, 276, 278, 293, 296, 298, 299, 300, 303, 308, 309, 313, 316, 319, 321, 324, 331, 350, 362, 364, 365, 375, 378, 379, 386, 387, 394, 395, 402, 404, 407, 419, 420, 421, 422, 424, 425, 426, 429, 433, 434, 435, 438, 443, 445, 446, 470, 473, 474, 481, 482, 483, 484, 485, 486, 487, 495, 496, 497, 498, 499, 500, 503, 504, 505, 506, 511, 518, 523, 525, 526, 531, 534, 535, 536, 537, 542, 544, 545, 551, 552, 555, 556, 558, 560, 561, 562, 570, 571, 572, 573, 574, 576, 581, 589, 590, 613, 626, 627, 628, 629, 631, 632, 641, 642, 646, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 676, 677, 679, 684, 685, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 703, 704, 705, 706, 707, 708, 710, 711, 716, 718, 719, 720, 726, 727, 729, 731, 736, 737, 738, 739, 740, 747, 748, 749, 758, 759, 760, 761, 766, 769, 770, 771, 772, 774, 776, 780, 784, 789, 800, 803, 807, 809, 812, 819, 820, 825, 827, 833, 843, 859, 862, 868, 869, 872, 873, 878, 879, 886, 887, 900, 905, 914, 917, 922, 924, 926, 929, 931, 937, 959, 965, 972, 973, 984, 987, 988, 995, 996, 1003, 1004, 1011, 1013, 1016, 1028, 1029, 1030, 1033, 1034, 1035, 1041, 1042, 1047, 1048, 1056, 1058, 1059, 1090, 1091, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1113, 1114, 1116, 1117, 1118, 1119, 1123, 1125, 1126, 1130, 1136, 1137, 1142, 1143, 1144, 1150, 1155, 1156, 1157, 1163, 1165, 1166, 1169, 1172, 1173, 1176, 1177, 1179, 1181, 1182, 1183, 1192, 1194, 1195, 1197, 1202, 1210, 1222, 1225, 1226, 1238, 1241, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1262, 1266, 1271, 1274, 1275, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1287, 1289, 1290, 1291, 1292, 1293, 1294, 1296, 1297, 1302, 1304, 1305, 1306, 1312, 1313, 1315, 1317, 1322, 1325, 1336, 1339, 1340, 1341, 1343, 1358, 1370, 1374, 1376, 1378, 1381, 1382, 1384, 1386, 1387, 1389], "null_behavior": [443, 551, 843, 1056, 1172, 1358], "null_count": [47, 51, 218, 223, 350, 439, 843, 869, 959, 1053, 1055, 1358], "null_equ": [225, 350, 1114, 1358], "null_on_oob": [386, 556, 558, 995, 1177, 1179], "null_prob": [176, 179, 183], "null_valu": [38, 48, 148, 149, 163, 350, 959], "nullabl": [40, 350], "nullbehavior": [443, 551, 843, 1056, 1172, 1358], "nullif": 1379, "nulls_equ": [254, 350, 531, 843, 887, 959, 1150, 1358], "nulls_last": [296, 350, 375, 395, 576, 631, 684, 685, 766, 843, 917, 959, 984, 1004, 1157, 1197, 1271, 1358], "num": [14, 41, 311, 350, 527, 843, 1145, 1358], "num_row": 207, "num_sampl": [801, 802], "number": [11, 12, 13, 14, 15, 18, 26, 38, 39, 41, 43, 47, 48, 49, 50, 51, 55, 56, 70, 71, 72, 88, 97, 118, 130, 132, 133, 134, 136, 139, 144, 148, 149, 150, 151, 153, 157, 158, 159, 160, 163, 166, 167, 168, 170, 177, 179, 182, 184, 185, 186, 193, 210, 212, 217, 226, 227, 229, 230, 238, 242, 243, 252, 253, 258, 269, 270, 282, 286, 293, 298, 301, 313, 318, 321, 323, 331, 333, 335, 344, 350, 376, 392, 394, 399, 402, 411, 412, 413, 414, 416, 417, 419, 420, 425, 433, 439, 440, 443, 447, 450, 458, 461, 463, 465, 466, 476, 489, 490, 492, 496, 497, 498, 499, 503, 504, 505, 511, 520, 534, 535, 542, 543, 551, 559, 562, 567, 569, 574, 577, 579, 581, 583, 631, 635, 638, 641, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 678, 687, 703, 705, 707, 708, 712, 716, 718, 719, 727, 730, 744, 748, 749, 755, 768, 773, 774, 775, 787, 795, 800, 801, 802, 819, 820, 824, 828, 832, 843, 859, 862, 868, 876, 877, 878, 884, 892, 902, 914, 919, 921, 922, 927, 928, 937, 939, 941, 950, 959, 964, 1001, 1003, 1008, 1011, 1020, 1021, 1022, 1023, 1025, 1026, 1028, 1034, 1041, 1047, 1053, 1054, 1056, 1060, 1063, 1071, 1074, 1079, 1082, 1083, 1093, 1106, 1107, 1109, 1115, 1116, 1117, 1118, 1119, 1123, 1124, 1125, 1130, 1139, 1163, 1164, 1172, 1180, 1183, 1188, 1190, 1195, 1200, 1202, 1216, 1217, 1231, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1262, 1265, 1273, 1289, 1291, 1293, 1294, 1298, 1302, 1304, 1305, 1313, 1316, 1330, 1343, 1348, 1358, 1374, 1377, 1380, 1389], "number_of_two": [383, 550], "numbers_decim": 730, "numer": [11, 17, 38, 41, 48, 152, 164, 211, 220, 255, 308, 309, 317, 318, 350, 359, 407, 421, 429, 510, 527, 586, 610, 612, 636, 644, 677, 679, 699, 736, 742, 750, 801, 843, 855, 861, 871, 888, 925, 959, 965, 1016, 1029, 1042, 1055, 1145, 1263, 1266, 1285, 1322, 1339, 1358, 1380, 1389], "numeric_dtyp": 1389, "numericliter": [429, 801, 802, 843, 1042, 1358], "numpi": [95, 103, 134, 171, 205, 216, 252, 284, 285, 304, 308, 309, 350, 589, 623, 624, 653, 843, 959, 967, 1148, 1151, 1153, 1154, 1219, 1220, 1244, 1339, 1340, 1358], "nworld": 721, "o": [154, 166, 408, 419, 420, 439, 696, 748, 749, 843, 1017, 1028, 1053, 1282, 1307, 1343, 1358, 1371], "oauth": 165, "obj": 965, "object": [10, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 64, 87, 106, 130, 131, 132, 137, 144, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 177, 179, 180, 206, 207, 214, 219, 226, 239, 240, 255, 257, 272, 282, 285, 290, 297, 307, 308, 309, 350, 442, 604, 782, 783, 785, 786, 803, 822, 830, 831, 843, 855, 864, 870, 875, 883, 888, 891, 902, 908, 915, 918, 956, 959, 965, 968, 1115, 1333, 1358, 1368, 1370, 1373, 1386, 1388], "observ": [254, 350, 440, 496, 497, 498, 499, 638, 843, 887, 959, 1054, 1116, 1117, 1118, 1119, 1231, 1358], "obtain": 581, "obvious": 739, "occur": [41, 62, 63, 104, 113, 119, 129, 256, 350, 383, 550, 611, 641, 843, 864, 865, 875, 889, 902, 915, 959, 992, 1171, 1215, 1233, 1339, 1358], "occurr": [521, 523, 530, 533, 754, 843, 1140, 1142, 1149, 1152, 1347, 1358], "oct": 1381, "octet_length": 1379, "octob": [480, 1097, 1381], "od": [159, 855], "odbc": [39, 150, 350], "odd": 697, "odi": [700, 702, 1288], "off": [48, 49, 50, 51, 62, 63, 129, 148, 149, 163, 254, 255, 350, 447, 459, 768, 864, 865, 875, 887, 888, 893, 902, 915, 959, 1060, 1072], "offer": [273, 350, 635, 843, 901, 959, 1382, 1386], "offic": [41, 350], "offset": [73, 148, 149, 154, 156, 158, 160, 163, 166, 167, 168, 234, 240, 282, 295, 326, 327, 350, 447, 448, 456, 467, 468, 470, 475, 488, 514, 557, 575, 651, 683, 701, 702, 716, 729, 843, 881, 883, 908, 916, 932, 933, 959, 1060, 1061, 1069, 1084, 1085, 1087, 1092, 1105, 1132, 1178, 1196, 1270, 1287, 1288, 1302, 1315, 1358, 1385], "offset_bi": 787, "often": [151, 203, 240, 282, 350, 383, 550, 644, 651, 843, 883, 908, 959, 992, 1171, 1358, 1373, 1386], "ok": 581, "old": [40, 279, 350, 645, 646, 843, 906, 959, 1237, 1238, 1358], "old_tabl": 1388, "older": [47, 51, 350, 959], "oldw": 722, "omit": [28, 133, 137, 153, 159, 177, 203, 270, 285, 307, 312, 350, 782, 785, 797, 798, 830, 831, 965, 1387, 1388], "onc": [62, 129, 148, 149, 185, 259, 284, 286, 329, 350, 569, 589, 590, 673, 724, 725, 843, 860, 935, 959, 1190, 1210, 1256, 1310, 1311, 1358, 1371], "one": [21, 38, 39, 41, 48, 56, 64, 110, 130, 132, 133, 134, 135, 136, 148, 149, 153, 157, 158, 159, 163, 167, 182, 184, 203, 211, 219, 222, 230, 238, 239, 240, 252, 254, 256, 257, 265, 274, 282, 283, 284, 290, 293, 308, 311, 317, 330, 350, 360, 394, 440, 442, 505, 506, 510, 513, 516, 518, 574, 581, 586, 604, 614, 615, 617, 619, 621, 622, 631, 650, 651, 676, 684, 697, 698, 699, 714, 737, 769, 773, 775, 782, 785, 805, 823, 833, 839, 843, 861, 870, 872, 873, 878, 879, 882, 883, 887, 889, 897, 904, 908, 912, 914, 925, 931, 936, 959, 974, 1003, 1008, 1054, 1125, 1136, 1137, 1195, 1202, 1207, 1231, 1242, 1262, 1283, 1284, 1285, 1300, 1323, 1339, 1358, 1373, 1374, 1376, 1380, 1381, 1388], "oneormoredatatyp": [41, 177, 350], "ones": [655, 657, 659, 661, 663, 666, 668, 670, 843, 965], "onf": [716, 1302], "onli": [1, 5, 11, 14, 21, 31, 38, 39, 41, 48, 55, 56, 61, 62, 64, 97, 129, 131, 143, 145, 148, 149, 150, 153, 154, 156, 158, 160, 163, 166, 167, 168, 169, 172, 173, 174, 175, 179, 183, 193, 203, 222, 223, 226, 228, 231, 240, 241, 252, 255, 256, 259, 274, 282, 284, 285, 304, 306, 307, 308, 319, 320, 336, 350, 360, 362, 364, 376, 428, 429, 442, 447, 459, 470, 478, 480, 500, 509, 519, 589, 590, 597, 598, 614, 615, 616, 617, 618, 619, 620, 621, 622, 631, 643, 690, 700, 702, 714, 752, 768, 805, 843, 867, 870, 872, 873, 874, 883, 888, 889, 908, 909, 915, 926, 928, 942, 959, 965, 972, 973, 974, 1039, 1042, 1060, 1072, 1087, 1097, 1115, 1122, 1129, 1138, 1210, 1235, 1276, 1286, 1288, 1300, 1333, 1336, 1339, 1358, 1367, 1370, 1386, 1387, 1389], "onlin": [228, 350, 1122, 1358], "ont": [700, 702, 1286, 1288], "onto": 179, "oof": [715, 1301, 1376, 1381], "op": [21, 148, 149, 183, 279, 350, 597, 644, 843, 891, 906, 959, 1358], "opac": [350, 353, 1358, 1363], "opaqu": 942, "open": [41, 53, 146, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 219, 350, 442, 843, 870, 959], "openoffic": 159, "openpyxl": [153, 171], "oper": [4, 41, 55, 64, 97, 106, 109, 116, 123, 130, 132, 133, 134, 135, 136, 145, 150, 213, 228, 231, 233, 239, 245, 257, 259, 266, 270, 272, 273, 274, 277, 278, 280, 282, 285, 286, 291, 293, 302, 308, 309, 314, 317, 318, 328, 329, 350, 359, 360, 363, 394, 434, 435, 436, 437, 438, 439, 494, 495, 510, 512, 515, 517, 541, 569, 570, 571, 572, 573, 574, 581, 588, 607, 610, 612, 613, 614, 615, 617, 619, 621, 622, 625, 626, 627, 630, 631, 636, 643, 673, 676, 742, 750, 757, 758, 760, 771, 772, 776, 788, 822, 843, 855, 863, 867, 869, 874, 879, 882, 887, 897, 898, 905, 909, 913, 914, 918, 925, 928, 935, 959, 1003, 1043, 1048, 1049, 1050, 1051, 1052, 1053, 1112, 1113, 1122, 1133, 1135, 1162, 1190, 1191, 1192, 1193, 1194, 1195, 1209, 1221, 1222, 1235, 1256, 1262, 1298, 1333, 1338, 1339, 1340, 1358, 1377, 1385, 1386], "operand": [750, 843], "opp": 965, "oppos": 768, "opposit": [293, 350, 394, 574, 676, 843, 914, 959, 1003, 1195, 1262, 1358], "opt": [312, 350], "optim": [48, 49, 50, 51, 62, 63, 129, 148, 154, 158, 160, 163, 165, 166, 167, 168, 252, 257, 273, 277, 284, 315, 350, 860, 864, 865, 875, 893, 902, 915, 923, 932, 933, 942, 959, 1038, 1257, 1358], "optimis": [150, 259, 285, 336, 350, 959, 963, 1210, 1259, 1358, 1389], "optimist": 15, "option": [2, 3, 4, 5, 6, 7, 31, 34, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 54, 56, 62, 63, 72, 74, 148, 150, 151, 152, 153, 154, 156, 158, 160, 163, 164, 165, 166, 167, 168, 169, 171, 176, 177, 178, 179, 182, 183, 184, 193, 194, 219, 235, 240, 250, 255, 265, 290, 297, 303, 314, 317, 319, 350, 407, 442, 447, 539, 597, 598, 604, 631, 652, 653, 654, 656, 658, 660, 662, 665, 667, 669, 682, 690, 700, 702, 714, 716, 754, 825, 833, 843, 855, 864, 865, 870, 875, 883, 887, 888, 897, 902, 912, 915, 918, 925, 926, 934, 959, 965, 1016, 1060, 1160, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1269, 1276, 1286, 1288, 1300, 1302, 1335, 1347, 1358, 1376, 1381, 1388], "optional_memb": [531, 843, 1150, 1358], "or_": 843, "oracl": 151, "orang": [215, 331, 332, 334, 335, 337, 338, 340, 342, 343, 350, 420, 749, 843, 937, 938, 940, 941, 943, 944, 946, 948, 949, 1381], "orc": 196, "order": [11, 41, 48, 49, 50, 51, 54, 56, 62, 68, 133, 148, 150, 163, 170, 172, 173, 174, 175, 210, 214, 215, 222, 223, 224, 231, 239, 240, 254, 256, 266, 272, 273, 274, 278, 282, 284, 286, 287, 291, 296, 307, 308, 313, 315, 319, 320, 350, 375, 395, 400, 419, 420, 445, 446, 506, 552, 569, 576, 582, 631, 636, 641, 651, 673, 674, 675, 684, 685, 715, 722, 723, 724, 725, 739, 748, 749, 751, 752, 754, 766, 822, 833, 843, 854, 859, 867, 872, 873, 874, 879, 882, 883, 887, 889, 897, 898, 905, 908, 909, 913, 917, 918, 922, 923, 926, 959, 963, 964, 965, 984, 1004, 1009, 1028, 1037, 1058, 1059, 1126, 1157, 1173, 1190, 1197, 1203, 1229, 1233, 1240, 1256, 1258, 1260, 1271, 1301, 1326, 1343, 1344, 1345, 1347, 1358, 1367, 1370, 1376, 1385, 1386, 1389], "order_bi": [631, 843], "ordin": [471, 641, 843, 1088, 1233, 1358, 1387], "ordinal_dai": [455, 490], "org": [21, 43, 44, 131, 150, 151, 154, 156, 205, 206, 207, 216, 350, 605, 709, 915, 959, 967, 968, 1295], "orient": [57, 59, 104, 134, 136, 270, 350, 959, 1367], "origin": [56, 148, 149, 163, 222, 223, 231, 278, 315, 350, 445, 446, 474, 475, 488, 506, 552, 590, 614, 631, 643, 644, 645, 646, 647, 649, 691, 697, 706, 764, 765, 843, 872, 873, 879, 905, 923, 959, 1058, 1059, 1091, 1092, 1105, 1126, 1173, 1237, 1238, 1239, 1241, 1277, 1283, 1292, 1358], "orjson": 144, "orld": 1308, "orson": 144, "other": [1, 21, 37, 41, 47, 63, 64, 130, 147, 148, 149, 150, 153, 163, 168, 172, 173, 174, 175, 223, 225, 228, 231, 254, 255, 256, 265, 266, 274, 278, 283, 285, 288, 289, 312, 317, 319, 322, 324, 325, 348, 350, 353, 359, 363, 365, 375, 376, 429, 444, 480, 488, 494, 495, 506, 510, 515, 517, 527, 531, 541, 548, 570, 571, 572, 573, 588, 594, 600, 610, 612, 625, 626, 630, 645, 646, 678, 685, 714, 741, 742, 747, 750, 757, 759, 761, 766, 769, 770, 771, 772, 780, 787, 807, 809, 812, 821, 825, 827, 843, 855, 865, 879, 887, 888, 889, 897, 898, 904, 905, 910, 911, 915, 925, 926, 929, 930, 931, 959, 965, 974, 1042, 1057, 1097, 1105, 1112, 1113, 1114, 1122, 1133, 1135, 1150, 1162, 1169, 1191, 1192, 1193, 1194, 1209, 1221, 1222, 1237, 1238, 1341, 1349, 1357, 1358, 1363, 1373, 1386], "other_df": [254, 350], "other_lf": [887, 959], "otherwis": [39, 150, 153, 160, 166, 178, 181, 185, 235, 259, 266, 285, 288, 307, 312, 336, 350, 399, 404, 425, 429, 440, 496, 497, 498, 499, 581, 590, 601, 631, 635, 636, 638, 643, 679, 689, 692, 696, 701, 703, 708, 712, 713, 716, 727, 754, 758, 787, 790, 799, 805, 833, 843, 898, 910, 942, 959, 964, 1008, 1013, 1034, 1042, 1054, 1116, 1117, 1118, 1119, 1202, 1210, 1229, 1231, 1235, 1257, 1259, 1266, 1275, 1278, 1282, 1287, 1289, 1294, 1298, 1299, 1302, 1313, 1347, 1358, 1378], "our": 208, "out": [8, 15, 39, 48, 49, 50, 51, 52, 53, 54, 111, 137, 168, 171, 179, 183, 231, 282, 285, 350, 386, 404, 556, 558, 689, 692, 701, 833, 879, 908, 959, 995, 1013, 1177, 1179, 1275, 1278, 1287, 1384], "outcom": [631, 843], "outer": [56, 319, 350, 926, 959], "outermost": 55, "outlin": 7, "output": [0, 8, 31, 38, 41, 43, 44, 45, 46, 47, 48, 52, 53, 54, 210, 218, 252, 259, 263, 266, 272, 274, 284, 288, 290, 300, 313, 320, 324, 350, 362, 364, 387, 419, 420, 425, 440, 480, 560, 581, 589, 590, 601, 604, 615, 638, 645, 688, 704, 708, 748, 749, 754, 758, 759, 760, 761, 771, 772, 773, 791, 801, 802, 804, 805, 809, 827, 833, 843, 855, 859, 869, 875, 893, 897, 898, 910, 912, 922, 929, 942, 959, 972, 973, 996, 1028, 1034, 1054, 1097, 1181, 1210, 1231, 1274, 1290, 1294, 1343, 1347, 1358], "output_path": [605, 915, 959], "outsid": [165, 429, 843, 1042, 1358], "over": [53, 64, 139, 148, 149, 150, 153, 159, 163, 168, 179, 180, 210, 228, 251, 252, 253, 259, 266, 283, 284, 285, 297, 313, 314, 328, 336, 350, 354, 419, 420, 439, 442, 497, 505, 589, 590, 601, 603, 604, 605, 606, 607, 615, 616, 641, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 748, 749, 777, 778, 791, 804, 805, 817, 822, 843, 859, 864, 875, 898, 902, 915, 918, 922, 934, 942, 956, 959, 965, 1028, 1053, 1117, 1122, 1210, 1245, 1246, 1248, 1252, 1343, 1358, 1386], "overflow": [421, 437, 438, 731, 743, 843, 861, 959, 1029, 1051, 1052, 1317, 1329, 1358], "overhead": [54, 55, 97, 163, 166, 167, 168], "overlap": [691, 698, 700, 702, 1277, 1284, 1286, 1288], "overrid": [1, 41, 130, 132, 133, 134, 135, 136, 148, 150, 151, 153, 157, 158, 159, 165, 167, 176, 177, 183, 185, 350, 959], "overridden": [41, 130, 132, 134, 136, 157, 158, 167, 185, 350, 959], "overview": [350, 843, 855, 959, 1358, 1385, 1389], "overwrit": [15, 39, 40, 42, 54, 130, 132, 133, 134, 136, 144, 148, 149, 157, 158, 163, 167, 207, 319, 350, 361, 741, 843, 926, 959], "overwrite_schema": [40, 350], "ow": 721, "own": [833, 1339, 1358, 1389], "p": [58, 273, 350, 635, 825, 843, 901, 959, 965, 1287, 1289, 1371], "p13dt14h0": 480, "p1dt42": 480, "pa": [40, 130, 169, 350, 822], "pa_tabl": 822, "pacif": [448, 1061], "pack": [270, 350], "packag": [33, 34, 35, 145, 150, 350, 354, 447, 459, 768, 1060, 1072], "pad": [710, 711, 736, 1296, 1297, 1322], "pad_end": [711, 1297], "pad_start": [710, 736, 1296, 1322], "page": [47, 51, 154, 160, 166, 168, 350, 843, 855, 959, 1358, 1385], "pair": [130, 132, 133, 134, 136, 141, 157, 158, 167, 279, 350, 906, 959, 1389], "pairwis": [216, 350], "panda": [39, 131, 135, 144, 171, 231, 240, 278, 309, 315, 317, 350, 467, 468, 747, 822, 843, 879, 883, 905, 923, 925, 959, 1084, 1085, 1340, 1341, 1358, 1368, 1370, 1386], "pandas_df": 1386, "pane": [41, 350], "panic": 112, "pap": 1289, "papa": 703, "papai": [703, 1289], "papaya": [703, 716, 727, 1289, 1302, 1313], "parallel": [62, 64, 139, 151, 160, 168, 240, 255, 257, 273, 289, 325, 350, 439, 553, 754, 833, 843, 883, 887, 888, 911, 930, 942, 959, 1053, 1174, 1347, 1358], "parallelis": [259, 336, 350, 1210, 1358], "parallelstrategi": [160, 168], "param": [41, 130, 132, 133, 134, 136, 148, 149, 157, 158, 163, 167, 178, 179, 183, 283, 350, 959], "paramet": [2, 3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 68, 71, 72, 73, 74, 75, 83, 87, 95, 98, 104, 113, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 191, 192, 193, 207, 208, 210, 211, 212, 216, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 238, 239, 240, 241, 242, 244, 245, 250, 252, 253, 254, 255, 256, 258, 259, 263, 265, 266, 269, 270, 272, 273, 274, 276, 278, 279, 280, 282, 283, 284, 285, 286, 288, 289, 290, 291, 293, 295, 296, 297, 298, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 329, 333, 335, 336, 342, 344, 350, 359, 361, 362, 363, 364, 365, 375, 382, 383, 386, 387, 394, 395, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 419, 420, 421, 422, 426, 429, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 447, 449, 451, 452, 457, 459, 470, 473, 474, 475, 476, 477, 479, 480, 488, 491, 493, 494, 495, 496, 497, 498, 499, 500, 503, 504, 505, 506, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 523, 525, 526, 527, 531, 539, 541, 543, 548, 549, 550, 551, 553, 556, 557, 558, 559, 560, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 588, 589, 590, 597, 598, 604, 605, 606, 610, 612, 615, 616, 617, 618, 619, 620, 625, 626, 630, 631, 632, 635, 636, 638, 639, 641, 643, 644, 645, 646, 647, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 736, 737, 739, 741, 742, 744, 748, 749, 750, 751, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 839, 843, 859, 861, 862, 864, 865, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 881, 882, 883, 884, 887, 888, 889, 892, 893, 897, 898, 901, 902, 903, 904, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 939, 941, 942, 948, 950, 959, 964, 965, 969, 971, 972, 973, 974, 984, 991, 992, 995, 996, 1003, 1004, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1028, 1029, 1030, 1035, 1041, 1042, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1060, 1062, 1064, 1065, 1070, 1072, 1087, 1090, 1091, 1092, 1093, 1094, 1096, 1097, 1105, 1108, 1111, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1122, 1123, 1124, 1125, 1126, 1130, 1131, 1132, 1138, 1139, 1140, 1142, 1143, 1144, 1145, 1150, 1157, 1160, 1164, 1169, 1170, 1171, 1172, 1174, 1177, 1178, 1179, 1180, 1181, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1200, 1201, 1202, 1203, 1210, 1222, 1226, 1229, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1262, 1265, 1269, 1270, 1271, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1295, 1296, 1297, 1298, 1299, 1300, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1319, 1322, 1323, 1326, 1330, 1333, 1334, 1335, 1336, 1337, 1339, 1340, 1343, 1344, 1347, 1348, 1349, 1358, 1367, 1368, 1369, 1370, 1371, 1373, 1378, 1381, 1386], "parameteris": 150, "parametr": 855, "paramount": [893, 959], "parent": [41, 75, 233, 350], "parenthes": 19, "parquet": [47, 51, 52, 53, 54, 160, 161, 162, 168, 196, 350, 855, 959], "parquetcompress": [47, 350], "parquetmetadata": [47, 51, 350, 959], "pars": [38, 48, 147, 148, 149, 151, 153, 158, 159, 160, 163, 166, 167, 168, 210, 239, 288, 289, 293, 296, 313, 324, 325, 329, 350, 420, 429, 527, 631, 645, 646, 685, 705, 714, 730, 731, 741, 749, 759, 761, 766, 769, 770, 771, 772, 780, 793, 807, 809, 812, 821, 823, 825, 827, 833, 843, 859, 882, 910, 911, 914, 917, 922, 929, 930, 935, 959, 1042, 1145, 1237, 1238, 1262, 1291, 1316, 1317, 1358, 1367], "parseerror": [731, 1317], "parser": [148, 153], "part": [54, 130, 153, 203, 208, 307, 312, 350, 631, 698, 718, 719, 843, 931, 959, 969, 1284, 1304, 1305, 1381, 1382], "part_idx": 142, "parti": [589, 843], "partial": [133, 148, 163, 350, 959], "particip": [41, 350], "particular": [40, 148, 153, 154, 156, 210, 226, 313, 350, 419, 420, 748, 749, 843, 859, 922, 959, 1028, 1115, 1343, 1358], "partit": [47, 52, 53, 54, 151, 160, 164, 166, 168, 169, 253, 272, 350, 631, 843, 855], "partition_bi": [47, 149, 253, 350, 631, 843], "partition_chunk_size_byt": [47, 350], "partition_col": [47, 151, 350], "partition_df": 149, "partition_index": 195, "partition_num": 151, "partition_on": 151, "partition_rang": 151, "partitionbykei": [53, 54, 141, 142], "partitioned_object": [47, 350], "partitioningschem": [48, 49, 50, 51, 959], "partitionmax": 53, "partitionmaxs": [52, 54, 140], "partitionpart": [52, 53, 141, 142], "pass": [33, 34, 35, 37, 39, 40, 41, 47, 56, 104, 129, 132, 144, 145, 147, 150, 151, 153, 160, 163, 166, 169, 172, 174, 177, 179, 181, 183, 210, 216, 220, 239, 240, 242, 255, 258, 272, 273, 274, 279, 282, 288, 293, 296, 301, 309, 312, 313, 320, 324, 329, 350, 394, 420, 447, 457, 459, 470, 474, 480, 503, 524, 574, 589, 590, 605, 631, 635, 645, 646, 651, 676, 685, 714, 721, 722, 723, 730, 749, 758, 766, 768, 793, 825, 833, 839, 843, 859, 871, 882, 883, 885, 888, 893, 901, 906, 908, 910, 914, 915, 917, 922, 929, 934, 935, 942, 959, 964, 1003, 1060, 1070, 1072, 1091, 1097, 1123, 1139, 1164, 1195, 1210, 1237, 1238, 1262, 1300, 1307, 1308, 1309, 1316, 1330, 1340, 1358, 1371, 1386], "pass_nam": [590, 843], "pass_name_to_appli": [145, 843], "password": [148, 151, 154, 156], "past": [37, 350, 893, 959], "pat": [701, 1287], "patch": 74, "path": [3, 6, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 140, 142, 145, 146, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 219, 290, 350, 442, 604, 605, 608, 675, 843, 870, 912, 915, 959, 963, 1260, 1292, 1358, 1389], "pathlib": [36, 38, 43, 44, 47, 163, 350], "pattern": [100, 148, 149, 153, 154, 158, 160, 163, 166, 167, 168, 252, 350, 422, 426, 599, 689, 690, 691, 694, 697, 698, 699, 700, 701, 702, 712, 713, 714, 720, 942, 965, 1030, 1035, 1257, 1259, 1275, 1276, 1277, 1280, 1283, 1284, 1285, 1286, 1287, 1288, 1298, 1299, 1300, 1306, 1358, 1381], "paya": 727, "pc": [904, 959], "pct": [179, 641, 843], "pct_chang": [843, 1358], "pct_valid": [641, 843], "pd": [131, 135, 747, 822, 843, 1340, 1341, 1358, 1368, 1386], "pd_df": 135, "pd_frame": 822, "pd_seri": 135, "pdsh": [139, 149], "pea": 703, "peak": [284, 350, 633, 634, 843, 1227, 1228, 1358], "peak_max": [843, 1358], "peak_min": [843, 1358], "pear": [703, 716, 727, 1289, 1302, 1313], "pearson": [216, 350, 539, 652, 682, 773, 843, 1160, 1243, 1269, 1358], "penalti": [726, 728, 729, 1312, 1314, 1315], "per": [15, 38, 41, 48, 145, 153, 177, 179, 210, 238, 270, 271, 274, 289, 296, 313, 325, 339, 341, 342, 350, 386, 420, 553, 556, 558, 589, 590, 614, 615, 617, 619, 621, 622, 685, 749, 754, 766, 843, 859, 911, 917, 922, 930, 945, 947, 948, 959, 995, 1174, 1177, 1179, 1347, 1358], "percent": [632, 843, 1226, 1358], "percentag": [176, 179, 183, 632, 843, 1226, 1358], "percentil": [218, 350, 641, 843, 869, 959, 1055, 1358], "perform": [39, 47, 49, 51, 56, 102, 107, 109, 114, 116, 123, 131, 148, 149, 150, 154, 158, 160, 163, 165, 166, 167, 168, 207, 231, 239, 240, 254, 255, 256, 259, 277, 278, 282, 284, 285, 308, 336, 350, 410, 415, 418, 424, 425, 510, 581, 589, 590, 631, 651, 690, 700, 702, 707, 708, 714, 726, 728, 729, 843, 879, 883, 887, 888, 889, 905, 908, 917, 932, 933, 959, 1019, 1024, 1027, 1033, 1034, 1210, 1276, 1286, 1288, 1293, 1294, 1300, 1312, 1314, 1315, 1339, 1358], "perhap": [314, 350], "period": [148, 149, 163, 240, 282, 350, 475, 496, 498, 499, 632, 651, 782, 783, 785, 786, 830, 831, 843, 883, 908, 959, 1092, 1116, 1118, 1119, 1226, 1358], "persist": 1373, "phase": [39, 318, 350], "philadelphia": [712, 713], "phone": [734, 1320], "physic": [55, 68, 97, 148, 149, 255, 274, 350, 747, 843, 860, 887, 888, 915, 959, 1036, 1341, 1358], "pi": [11, 441, 843, 1044, 1046, 1267, 1331, 1358, 1379, 1383], "pick": [180, 833], "pickl": [442, 843, 870, 959], "pip": [447, 459, 768, 1060, 1072], "pipe": [350, 843, 959], "pipelin": [153, 312, 350], "pitfal": 114, "pivot": [318, 350, 965], "pivot_long": [317, 350, 925, 959], "pivot_wid": [274, 350], "pivotagg": [274, 350], "pixel": [41, 350], "pk": [493, 843, 1111, 1358], "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 64, 65, 74, 83, 87, 95, 96, 97, 101, 104, 105, 106, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 144, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 163, 164, 165, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 185, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 350, 353, 354, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 839, 843, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 959, 964, 965, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1129, 1131, 1132, 1134, 1136, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1325, 1326, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1358, 1363, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1380, 1381, 1382, 1383, 1384, 1386, 1387, 1389], "pl_frame": 822, "place": [11, 12, 38, 48, 203, 221, 228, 244, 245, 274, 280, 285, 296, 322, 350, 354, 375, 387, 395, 560, 576, 684, 685, 766, 843, 917, 959, 974, 984, 996, 1004, 1122, 1181, 1197, 1234, 1271, 1358], "placehold": 792, "plai": [13, 772], "plain": [875, 904, 959], "plan": [62, 129, 255, 257, 350, 442, 843, 860, 864, 870, 875, 887, 888, 904, 912, 915, 959, 1388], "plan_stag": [915, 959], "plan_typ": [904, 959], "plane": [764, 765], "planstag": [915, 959], "plantypeprefer": [904, 959], "platform": 171, "ple": 1381, "pleas": [135, 150, 151, 231, 240, 278, 350, 354, 497, 774, 787, 843, 879, 883, 905, 959, 1117, 1358], "plenti": 965, "plot": [350, 902, 915, 959, 1358], "plu": [440, 586, 843, 1054, 1207, 1231, 1358, 1380], "plugin": [0, 843, 855], "plugin_path": 145, "point": [11, 12, 32, 33, 34, 35, 38, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 63, 72, 76, 77, 78, 140, 141, 142, 143, 144, 152, 158, 160, 161, 163, 164, 166, 167, 168, 169, 176, 177, 179, 180, 181, 182, 183, 184, 188, 189, 190, 191, 192, 193, 199, 222, 229, 240, 256, 257, 297, 307, 312, 319, 350, 353, 354, 428, 439, 440, 445, 447, 459, 475, 476, 504, 509, 510, 521, 534, 535, 569, 590, 638, 652, 653, 655, 657, 659, 661, 663, 664, 666, 668, 670, 671, 673, 768, 770, 801, 802, 843, 864, 865, 872, 877, 883, 889, 893, 906, 918, 926, 959, 1037, 1039, 1053, 1054, 1058, 1060, 1072, 1092, 1093, 1124, 1129, 1140, 1190, 1231, 1243, 1244, 1247, 1249, 1250, 1254, 1256, 1337, 1342, 1358, 1363, 1386], "pointer": [226, 350, 1115, 1358], "poison": [623, 624, 843, 1219, 1220, 1358], "pola": 350, "polar": [1, 201, 350, 353, 354, 842, 843, 849, 855, 959, 963, 964, 965, 1358, 1362, 1363, 1385, 1386, 1388], "polars_df": 1386, "polars_engine_affin": [48, 49, 50, 51, 62, 63, 864, 865, 875, 902, 915, 959], "polars_file_cache_ttl": [158, 163, 166, 167], "polars_hypothesis_profil": [182, 184], "polars_max_thread": 185, "polars_seri": 1386, "polars_verbos": [864, 875, 902, 915, 959], "polarsdatafram": 207, "polarsdataset": [312, 350], "polarsdatatyp": [65, 75, 83, 148, 149, 163, 176, 177, 178, 179, 180, 183, 211, 259, 307, 312, 350, 407, 421, 500, 589, 590, 645, 646, 705, 789, 791, 803, 804, 805, 815, 818, 834, 839, 843, 861, 959, 965, 1016, 1029, 1210, 1237, 1238, 1291, 1358], "polarsintegertyp": [763, 797, 798], "polarstemporaltyp": [726, 1312], "polarstyp": 64, "pool": [15, 63, 185, 186, 865, 959], "poor": 150, "pop2": [255, 350, 888, 959], "popul": [255, 350, 888, 959], "port": [39, 148, 150, 151, 154, 156, 350], "pos_a": 1381, "posit": [41, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 195, 208, 220, 227, 239, 272, 288, 289, 293, 296, 316, 324, 325, 329, 350, 394, 496, 498, 499, 500, 574, 631, 636, 638, 676, 685, 699, 712, 713, 731, 741, 764, 765, 766, 769, 770, 771, 772, 789, 821, 825, 839, 843, 871, 876, 882, 910, 911, 914, 917, 924, 929, 930, 935, 959, 965, 1003, 1116, 1118, 1119, 1195, 1229, 1231, 1262, 1285, 1317, 1358, 1387], "position": 1358, "possibl": [41, 47, 51, 104, 106, 132, 133, 136, 148, 153, 176, 179, 183, 239, 252, 259, 284, 315, 336, 350, 587, 590, 601, 653, 719, 753, 843, 864, 875, 882, 902, 915, 917, 923, 959, 1210, 1244, 1305, 1358], "post": [56, 74, 904, 959], "postgresql": [39, 150, 151, 350, 631, 843, 1384], "potenti": [114, 116, 145, 163, 166, 167, 252, 283, 285, 350, 614, 712, 713, 867, 869, 874, 909, 928, 959, 1298, 1299], "pow": [843, 1358, 1379], "pow_n": 58, "power": [823, 1229, 1358, 1380], "powersofn": 58, "pre": [54, 581, 590, 638, 815, 818, 834, 843, 1231, 1358], "preced": [179, 965], "precis": [11, 12, 38, 41, 48, 72, 150, 252, 284, 285, 304, 307, 312, 350, 449, 730, 801, 959, 965, 1062, 1316], "pred1": 833, "pred2": 833, "predefin": [274, 350], "predic": [40, 48, 49, 50, 51, 62, 63, 129, 143, 163, 166, 167, 168, 169, 211, 231, 250, 255, 256, 278, 283, 350, 421, 506, 756, 791, 833, 843, 864, 865, 875, 879, 888, 889, 893, 902, 905, 906, 915, 932, 933, 959, 1126, 1257, 1259, 1358], "predicate_pushdown": [48, 49, 50, 51, 62, 63, 129, 864, 865, 875, 893, 902, 915, 959], "predict": [277, 320, 350], "prefer": [148, 149, 153, 154, 158, 160, 163, 184, 210, 228, 252, 259, 283, 284, 313, 336, 350, 419, 420, 500, 590, 748, 749, 833, 843, 859, 922, 959, 963, 1028, 1122, 1210, 1343, 1358, 1368, 1389], "prefilt": 168, "prefix": [40, 148, 149, 163, 203, 350, 361, 409, 426, 480, 599, 615, 618, 619, 621, 622, 720, 723, 724, 736, 843, 965, 1018, 1035, 1306, 1310, 1322], "prefix_": 618, "prefix_a": 618, "prefix_b": 618, "prefix_field": [616, 620], "presenc": [790, 799, 965], "present": [133, 179, 235, 350, 531, 605, 722, 723, 833, 843, 915, 959], "preserv": [222, 223, 231, 239, 254, 256, 259, 278, 308, 309, 319, 350, 445, 446, 447, 467, 468, 506, 552, 631, 645, 679, 696, 843, 872, 873, 879, 887, 889, 905, 926, 959, 1058, 1059, 1060, 1126, 1173, 1237, 1266, 1282, 1340, 1358], "pressur": [51, 148, 149, 158, 160, 163, 167, 168, 677, 843, 959, 1263, 1358], "presum": [589, 843], "prev_pow2": 58, "prevent": [308, 350, 361, 437, 438, 614, 743, 843, 959, 1051, 1052, 1329, 1358], "preview": [238, 350], "previou": [54, 58, 203, 350, 353, 447, 614, 615, 617, 619, 621, 622, 632, 739, 843, 1060, 1226, 1358, 1363], "previous": [2, 3], "price": [350, 353, 1389], "primari": [153, 963, 1386, 1389], "primarili": 1, "primit": [40, 350, 531, 843], "print": [9, 11, 12, 13, 14, 16, 17, 18, 20, 21, 26, 28, 29, 149, 171, 172, 174, 224, 238, 239, 253, 257, 306, 328, 350, 524, 606, 782, 785, 843, 864, 885, 959, 965, 1150, 1336, 1358, 1389], "prior": [135, 350, 353, 1358, 1363], "prioriti": 180, "probabl": [493, 638, 843, 1111, 1231, 1358], "process": [15, 38, 48, 49, 50, 51, 62, 63, 148, 149, 150, 163, 185, 284, 350, 864, 865, 875, 902, 915, 959], "process_index": [307, 350], "produc": [2, 3, 95, 143, 179, 183, 211, 254, 350, 383, 421, 550, 601, 801, 804, 843, 887, 893, 959, 992, 1171], "product": [56, 216, 254, 350, 437, 444, 843, 887, 959, 1051, 1057, 1358], "profil": [33, 182, 184, 864, 959], "profile_nam": 33, "programmat": [218, 350, 869, 959], "progress": [72, 78], "project": [48, 49, 50, 51, 62, 63, 129, 143, 163, 165, 166, 167, 168, 684, 685, 843, 864, 865, 875, 893, 902, 906, 915, 959], "projection_pushdown": [48, 49, 50, 51, 62, 63, 129, 864, 865, 875, 893, 902, 915, 959], "prompt": 137, "propag": [387, 495, 531, 560, 623, 624, 626, 688, 704, 771, 772, 843, 996, 1113, 1150, 1181, 1219, 1220, 1222, 1274, 1290, 1358], "propagate_nan": 773, "proper": [256, 350, 889, 959], "properti": [40, 41, 194, 197, 198, 207, 214, 215, 224, 232, 243, 287, 292, 323, 327, 350, 353, 354, 866, 867, 874, 909, 928, 933, 959, 964, 965, 1110, 1128, 1218, 1261, 1358, 1363, 1389], "proport": [754, 843, 1347, 1358], "protocol": [40, 131, 150, 151, 207, 350], "prototyp": 839, "provid": [32, 33, 34, 35, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 148, 149, 151, 152, 153, 158, 160, 163, 164, 165, 166, 167, 168, 179, 183, 193, 231, 235, 250, 255, 278, 297, 307, 350, 353, 404, 405, 480, 500, 521, 581, 589, 590, 692, 693, 697, 705, 706, 722, 723, 724, 725, 793, 825, 843, 855, 864, 875, 879, 888, 902, 905, 915, 918, 934, 956, 959, 1013, 1014, 1097, 1140, 1159, 1210, 1278, 1279, 1283, 1291, 1292, 1337, 1349, 1358, 1371, 1378, 1381, 1386, 1389], "provis": 856, "prune": [160, 166, 168, 893, 959], "pt0": 480, "public": [151, 350, 843, 855, 959, 1358, 1385], "pulp": 1367, "pure": [41, 350], "purpos": [613, 843, 959], "push": [148, 154, 158, 160, 163, 166, 167, 168, 169, 211, 350, 421, 843], "pushdown": [48, 49, 50, 51, 62, 63, 129, 143, 864, 865, 875, 893, 902, 906, 915, 932, 933, 959, 1257, 1259, 1358], "put": [38, 48, 74, 350, 354, 959], "pwd": 150, "py": 165, "pyarrow": [40, 47, 130, 135, 148, 151, 152, 154, 156, 160, 164, 169, 171, 302, 308, 309, 350, 822, 855, 1333, 1339, 1340, 1358, 1368, 1370, 1386], "pyarrow_opt": [47, 152, 160, 164, 350], "pyarrow_t": 1386, "pycapsul": [130, 131, 206, 968], "pycapsuleinterfac": [131, 206, 968], "pydant": 171, "pyiceberg": [42, 165, 171, 350], "pyodbc": [39, 350], "pyodbc_uri": [39, 350], "pyspark": 185, "pytest": [172, 174], "python": [0, 33, 34, 35, 43, 44, 74, 85, 100, 131, 148, 149, 154, 156, 171, 172, 174, 207, 252, 259, 284, 285, 304, 336, 350, 442, 447, 451, 459, 510, 589, 590, 699, 768, 782, 783, 785, 786, 830, 831, 843, 849, 870, 942, 959, 963, 964, 1060, 1064, 1072, 1075, 1076, 1077, 1081, 1210, 1285, 1338, 1358, 1362, 1385], "pythondatatyp": [65, 83, 211, 350, 839, 861, 959, 965], "pythonliter": [975, 1019, 1024, 1027, 1127, 1161, 1211, 1212, 1213, 1214, 1257, 1349, 1358], "pytorch": [312, 350, 1342, 1358], "q": [285, 350, 825, 1358, 1363, 1371], "q1": [41, 350], "q2": [41, 350], "q3": [41, 350], "q4": [41, 350], "qcut": [440, 843, 1054, 1358], "qhoo": 1389, "qmark": 150, "qqr": 965, "quad": [497, 843, 1117, 1358], "qualifi": [39, 350], "quantifi": [698, 1284], "quantil": [350, 638, 662, 663, 843, 959, 1231, 1249, 1358, 1375], "quantile_cont": 1379, "quantile_disc": 1379, "quantilemethod": [218, 276, 342, 350, 639, 662, 663, 816, 843, 869, 903, 948, 959, 1055, 1232, 1249, 1358], "quarter": [240, 255, 282, 320, 350, 470, 475, 488, 651, 655, 657, 659, 661, 663, 666, 668, 670, 782, 783, 785, 786, 830, 831, 843, 883, 888, 908, 959, 1087, 1092, 1105, 1382], "queri": [10, 48, 49, 50, 51, 62, 63, 95, 129, 150, 151, 154, 163, 166, 167, 168, 228, 257, 273, 297, 350, 581, 589, 590, 706, 822, 843, 855, 864, 865, 875, 902, 904, 915, 918, 932, 933, 934, 942, 951, 959, 1122, 1210, 1292, 1358, 1367, 1368, 1370, 1374, 1385, 1387, 1388], "quick": [839, 1055, 1358, 1389], "quit": [255, 350, 888, 959], "quot": [38, 39, 48, 148, 149, 151, 163, 350, 734, 959, 1320], "quota_project_id": 35, "quote_char": [38, 48, 148, 149, 163, 350, 959], "quote_plu": 151, "quote_styl": [38, 48, 350, 959], "quotes_titl": 734, "quotient": 1380, "r": [148, 149, 163, 350, 596, 635, 691, 696, 697, 698, 699, 712, 713, 843, 965, 1277, 1282, 1283, 1284, 1285, 1298, 1299, 1313, 1371, 1381], "r1": 64, "r2": 64, "r3": 64, "rab": [689, 715, 1275, 1301, 1376], "rad": 1383, "radian": [441, 764, 843, 1379], "radix": [731, 1317], "rai": [764, 765], "raini": [712, 713, 1298, 1299], "rais": [1, 10, 16, 17, 21, 40, 64, 101, 102, 105, 106, 108, 109, 110, 111, 112, 113, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 148, 149, 153, 159, 160, 163, 168, 172, 174, 207, 211, 235, 274, 283, 308, 350, 386, 404, 421, 447, 473, 474, 556, 558, 601, 636, 638, 646, 689, 692, 701, 726, 728, 729, 731, 733, 784, 803, 843, 934, 995, 1013, 1060, 1090, 1091, 1177, 1179, 1229, 1231, 1238, 1275, 1278, 1287, 1312, 1314, 1315, 1317, 1319, 1339, 1358], "raise_if_empti": [148, 149, 153, 159, 163], "raise_if_undetermin": 601, "raise_on_fail": 934, "raker": 144, "ram": [48, 49, 50, 51, 959], "ran": [145, 843], "randn": 95, "random": [41, 43, 95, 154, 170, 177, 241, 286, 350, 519, 569, 641, 673, 678, 754, 843, 855, 1138, 1190, 1233, 1256, 1265, 1347, 1358], "randomli": 178, "rang": [18, 41, 150, 151, 218, 226, 240, 253, 350, 366, 441, 447, 455, 459, 466, 471, 472, 473, 475, 488, 489, 525, 763, 768, 771, 781, 782, 783, 784, 785, 786, 797, 798, 801, 802, 829, 830, 831, 843, 869, 883, 959, 965, 1055, 1060, 1068, 1072, 1083, 1088, 1089, 1090, 1092, 1105, 1106, 1115, 1226, 1358, 1381], "rank": [375, 553, 766, 773, 788, 843, 984, 1174, 1358], "rankmethod": [641, 843, 1233, 1358], "rare": [448, 1061], "rather": [255, 350, 512, 589, 606, 638, 650, 736, 843, 888, 959, 1231, 1242, 1322, 1358], "raw": 151, "raw_output": [605, 915, 959], "raw_valu": 141, "re": [235, 240, 251, 315, 317, 350, 467, 468, 477, 480, 883, 923, 925, 959, 1084, 1085, 1094, 1097, 1386], "reach": [53, 710, 711, 736, 1296, 1297, 1322], "read": [37, 139, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 193, 219, 228, 350, 353, 442, 512, 843, 870, 904, 959, 1122, 1358, 1363], "read_arrow_batches_from_odbc": 150, "read_clipboard": [37, 350], "read_csv": [147, 153, 163], "read_csv_batch": 139, "read_csv_opt": 153, "read_databas": [95, 151], "read_database_uri": 150, "read_excel": 159, "read_ndjson": 157, "read_od": 153, "read_opt": 153, "read_parquet": 168, "read_tabl": 160, "readabl": 839, "reader": [47, 51, 139, 143, 148, 149, 154, 156, 158, 160, 165, 350, 959], "reader_overrid": 165, "readi": 952, "readthedoc": [41, 350], "real": [698, 1284], "realli": [439, 690, 714, 843, 1053, 1276, 1300, 1358], "realloc": [158, 163, 166, 167, 228, 350, 1122, 1358], "rearrang": [259, 350], "reason": [185, 218, 350, 581, 589, 843, 869, 959], "receiv": [56, 150, 163, 259, 273, 336, 350, 590, 635, 843, 901, 959, 1389], "recent": [172, 173, 174, 175, 308, 350, 632, 646, 843, 1226, 1238, 1339, 1358, 1370, 1386], "rechunk": [64, 130, 131, 135, 148, 149, 152, 154, 156, 158, 160, 163, 164, 166, 167, 168, 228, 350, 843, 1040, 1122, 1134, 1216, 1358], "recognis": [10, 16, 17, 21, 965], "recommend": [41, 185, 218, 252, 257, 273, 350, 581, 860, 869, 959, 965], "record": [38, 44, 48, 144, 156, 169, 350, 959], "record_batch": [253, 350], "recordbatch": [130, 253, 350, 822, 1368, 1370, 1386], "recurs": [48, 49, 50, 51, 496, 498, 499, 843, 959, 1116, 1118, 1119, 1358], "red": [55, 96, 97, 336, 754, 843, 942, 1347, 1358], "redempt": 1367, "redshift": 151, "redshift_format": 196, "reduc": [51, 148, 149, 158, 160, 163, 166, 167, 168, 284, 337, 338, 340, 343, 350, 677, 778, 791, 843, 943, 944, 946, 949, 959, 1212, 1230, 1263, 1329, 1358], "reduct": [233, 350, 590, 843], "ref": [697, 699, 1283, 1285], "refer": [0, 33, 41, 100, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 216, 219, 350, 354, 442, 477, 480, 641, 697, 712, 713, 726, 728, 729, 733, 843, 870, 959, 1094, 1097, 1233, 1298, 1299, 1312, 1314, 1315, 1319, 1358], "referenc": [41, 350, 589, 712, 713, 739, 843, 1298, 1299, 1368, 1386], "reg": 144, "regard": [148, 773], "regardless": [135, 210, 239, 255, 313, 350, 420, 452, 706, 749, 833, 843, 859, 888, 922, 959, 1065, 1292], "regex": [98, 500, 596, 597, 599, 689, 691, 697, 698, 699, 701, 712, 713, 737, 789, 843, 965, 1275, 1277, 1283, 1284, 1285, 1287, 1298, 1299], "regexp_lik": 1379, "region": [41, 165, 350], "region_nam": 33, "regist": [1, 52, 53, 54, 57, 58, 59, 60, 143, 145, 182, 184, 297, 350, 843, 918, 959, 963, 1367, 1368, 1370, 1371, 1372, 1373, 1386, 1388], "register_dataframe_namespac": [1, 58, 59, 60], "register_expr_namespac": [1, 57, 59, 60], "register_glob": [1369, 1371, 1373, 1386], "register_io_sourc": 963, "register_lazyframe_namespac": [1, 57, 58, 60], "register_mani": [1369, 1370, 1373], "register_plugin": 843, "register_plugin_funct": 843, "register_series_namespac": [1, 57, 58, 59], "registr": [297, 350, 822, 855, 918, 959, 1373, 1386], "regrid": [525, 843], "regular": [138, 252, 283, 284, 320, 327, 350, 500, 689, 690, 691, 695, 697, 698, 699, 700, 701, 702, 712, 713, 714, 768, 789, 833, 839, 843, 933, 959, 965, 1275, 1276, 1277, 1281, 1283, 1284, 1285, 1286, 1287, 1288, 1298, 1299, 1300, 1384], "reinterpret": [843, 1358], "rel": [41, 52, 53, 54, 145, 151, 152, 164, 165, 172, 173, 174, 175, 350, 470, 496, 498, 499, 754, 843, 1087, 1116, 1118, 1119, 1347, 1358], "relat": [150, 203, 712, 713, 965, 1298, 1299, 1374], "releas": [63, 254, 350, 590, 843, 865, 887, 959, 1389], "release_year": 1367, "relev": 64, "reli": [254, 350, 887, 959], "reliabl": [96, 97], "remain": [52, 148, 149, 163, 222, 223, 226, 231, 246, 274, 278, 350, 445, 446, 506, 525, 526, 552, 645, 718, 719, 843, 872, 873, 879, 886, 893, 905, 959, 1058, 1059, 1115, 1126, 1143, 1144, 1173, 1237, 1304, 1305, 1358, 1373], "remaind": [407, 719, 1016, 1305, 1380], "remap": 99, "remot": [95, 148, 149, 154, 156, 959], "remov": [4, 47, 51, 148, 149, 161, 163, 207, 220, 231, 305, 350, 500, 615, 721, 722, 723, 724, 725, 789, 843, 871, 879, 959, 1307, 1308, 1309, 1310, 1311, 1334, 1358, 1388], "removes_pronoun": 714, "removesuffix": 615, "renam": [1, 43, 44, 133, 137, 148, 149, 153, 154, 156, 160, 163, 166, 167, 168, 172, 173, 174, 175, 186, 210, 239, 240, 254, 274, 282, 288, 289, 302, 313, 320, 324, 325, 329, 331, 350, 361, 420, 439, 496, 498, 499, 512, 607, 608, 614, 615, 616, 617, 619, 621, 622, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 739, 741, 749, 819, 820, 821, 825, 843, 859, 882, 883, 887, 908, 910, 911, 922, 929, 930, 935, 937, 959, 971, 1053, 1114, 1116, 1118, 1119, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1287, 1326, 1333, 1335, 1358, 1386], "rename_field": [718, 719, 1304, 1305], "render": [605, 915, 959], "render_as_str": 150, "reoconstruct": [285, 350], "repeat": [54, 154, 166, 642, 644, 815, 834, 843, 1358], "repeat_bi": [843, 1358], "replac": [39, 40, 42, 148, 149, 163, 229, 230, 280, 314, 317, 324, 325, 350, 353, 451, 474, 504, 589, 590, 646, 713, 714, 729, 843, 877, 925, 929, 930, 959, 1064, 1091, 1124, 1238, 1257, 1259, 1299, 1300, 1315, 1358, 1363, 1379], "replace_al": [646, 712, 843, 1237, 1238, 1298, 1358], "replace_column": 350, "replace_strict": [645, 843, 1237, 1358], "replace_time_zon": [448, 454, 456, 1066, 1067, 1095], "replace_with": [714, 1300], "replic": [747, 843, 1341, 1358], "report": [150, 226, 350, 709, 1115, 1295, 1358], "repr": [137, 422, 426, 480, 1030, 1035, 1097], "repres": [38, 41, 42, 48, 70, 71, 73, 84, 88, 93, 130, 132, 134, 135, 136, 150, 274, 297, 298, 307, 308, 321, 328, 350, 425, 510, 534, 535, 577, 583, 589, 687, 703, 708, 712, 713, 716, 727, 755, 758, 775, 787, 789, 803, 804, 805, 814, 819, 820, 824, 832, 839, 843, 918, 919, 927, 959, 965, 1034, 1257, 1273, 1289, 1294, 1298, 1299, 1302, 1313, 1339, 1348, 1358, 1386], "represent": [11, 45, 46, 70, 71, 73, 88, 137, 290, 306, 350, 422, 424, 425, 426, 450, 455, 458, 461, 462, 463, 464, 465, 466, 469, 471, 472, 476, 489, 490, 492, 604, 747, 843, 875, 891, 912, 959, 1030, 1033, 1034, 1035, 1036, 1063, 1068, 1071, 1073, 1074, 1078, 1079, 1080, 1082, 1083, 1086, 1088, 1089, 1093, 1106, 1107, 1109, 1336, 1341, 1358, 1377], "request": 35, "requested_schema": [206, 968], "requir": [1, 33, 34, 35, 40, 41, 56, 64, 135, 150, 151, 172, 173, 174, 175, 188, 216, 222, 283, 307, 308, 309, 312, 350, 400, 422, 426, 496, 498, 499, 582, 590, 631, 655, 657, 659, 661, 663, 666, 668, 670, 677, 726, 728, 729, 751, 767, 769, 773, 775, 818, 843, 867, 872, 873, 874, 917, 928, 959, 1009, 1114, 1116, 1118, 1119, 1203, 1263, 1298, 1312, 1314, 1315, 1339, 1340, 1344, 1358], "require_al": 965, "require_http": 188, "rerais": [63, 865, 959], "rerun": [228, 350, 1122, 1358], "resampl": [240, 350, 883, 959], "reset": [4, 203], "reset_index": [135, 240, 350, 883, 959], "reshap": [274, 308, 350, 554, 770, 843, 1175, 1358], "resolv": [145, 231, 350, 451, 581, 866, 867, 874, 909, 928, 959], "resourc": [934, 963], "respect": [41, 148, 163, 350, 690, 700, 702, 714, 965, 1276, 1286, 1288, 1300, 1342, 1358], "respons": [151, 266, 350, 898, 959], "rest": [734, 1320, 1381], "restor": [203, 350, 353, 1358, 1363], "restore_default": 203, "restrict": [31, 719, 1305], "result": [14, 38, 45, 46, 47, 48, 49, 50, 51, 56, 64, 134, 135, 136, 150, 151, 153, 163, 166, 168, 169, 183, 228, 231, 240, 241, 254, 255, 256, 270, 274, 278, 282, 285, 290, 291, 293, 307, 308, 309, 320, 327, 329, 335, 350, 447, 475, 477, 480, 488, 496, 497, 498, 499, 503, 510, 519, 527, 539, 580, 581, 589, 590, 604, 631, 636, 638, 645, 646, 647, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 675, 676, 696, 713, 717, 718, 729, 750, 754, 777, 778, 782, 784, 785, 786, 787, 802, 803, 804, 815, 818, 819, 820, 822, 833, 834, 843, 860, 864, 869, 879, 883, 887, 888, 889, 893, 902, 905, 908, 912, 913, 914, 933, 935, 941, 952, 953, 959, 965, 974, 1092, 1094, 1097, 1105, 1116, 1118, 1119, 1122, 1123, 1138, 1145, 1160, 1201, 1210, 1229, 1231, 1237, 1238, 1239, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1260, 1262, 1282, 1303, 1304, 1315, 1339, 1340, 1347, 1358, 1368, 1374, 1381, 1386, 1387, 1389], "resultset": 150, "retain": [231, 278, 350, 879, 905, 959], "retri": [38, 43, 47, 48, 49, 50, 51, 158, 160, 163, 166, 167, 168, 193, 350, 959], "retriev": [188, 189, 193, 235, 307, 350, 380, 381, 546, 547, 737, 814, 989, 990, 1167, 1168, 1323, 1337, 1358, 1374], "return": [1, 5, 6, 31, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 95, 107, 110, 118, 126, 129, 130, 132, 133, 134, 135, 136, 138, 139, 143, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 185, 186, 193, 205, 208, 210, 212, 215, 216, 217, 221, 224, 226, 227, 228, 229, 230, 232, 233, 234, 235, 238, 239, 240, 242, 243, 244, 248, 250, 251, 252, 253, 254, 257, 258, 259, 261, 263, 268, 269, 270, 272, 273, 274, 279, 282, 283, 284, 285, 286, 290, 297, 300, 301, 307, 308, 309, 312, 313, 314, 315, 320, 323, 324, 325, 331, 333, 335, 336, 339, 344, 350, 362, 364, 367, 368, 369, 370, 371, 372, 375, 376, 380, 381, 382, 384, 386, 387, 398, 403, 404, 405, 406, 407, 408, 409, 419, 420, 424, 425, 430, 431, 432, 433, 434, 440, 441, 447, 448, 450, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 497, 502, 510, 513, 514, 516, 520, 521, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 546, 547, 549, 554, 556, 558, 559, 560, 562, 569, 579, 580, 587, 589, 590, 602, 604, 605, 606, 611, 635, 638, 640, 644, 645, 646, 647, 649, 650, 673, 674, 679, 680, 681, 688, 689, 691, 692, 693, 695, 696, 697, 698, 699, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 715, 716, 717, 718, 719, 727, 731, 736, 744, 745, 746, 748, 749, 750, 752, 753, 754, 757, 758, 763, 764, 765, 766, 767, 768, 769, 773, 774, 775, 776, 781, 782, 783, 784, 785, 786, 787, 790, 791, 793, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 815, 818, 821, 822, 825, 828, 829, 830, 831, 833, 834, 843, 859, 862, 864, 865, 867, 868, 869, 874, 875, 881, 883, 884, 887, 891, 892, 893, 901, 902, 906, 908, 912, 915, 921, 922, 923, 928, 929, 930, 937, 939, 941, 945, 950, 952, 959, 964, 965, 967, 969, 972, 973, 974, 982, 983, 985, 986, 987, 988, 989, 990, 991, 993, 995, 996, 1007, 1009, 1012, 1013, 1014, 1016, 1017, 1028, 1032, 1033, 1034, 1041, 1047, 1048, 1054, 1055, 1060, 1061, 1063, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1109, 1115, 1117, 1121, 1122, 1127, 1132, 1139, 1140, 1146, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1161, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1175, 1177, 1179, 1180, 1181, 1183, 1190, 1200, 1201, 1208, 1210, 1215, 1224, 1231, 1237, 1238, 1239, 1240, 1241, 1242, 1256, 1258, 1266, 1274, 1275, 1277, 1278, 1279, 1281, 1282, 1283, 1284, 1285, 1287, 1288, 1289, 1290, 1292, 1293, 1294, 1295, 1296, 1297, 1301, 1302, 1303, 1304, 1305, 1313, 1317, 1322, 1330, 1333, 1340, 1343, 1345, 1346, 1347, 1349, 1358, 1367, 1368, 1372, 1374, 1375, 1376, 1377, 1378, 1380, 1381, 1384, 1386, 1387, 1388, 1389], "return_as_str": [238, 350, 606], "return_dtyp": [41, 259, 350, 589, 590, 645, 646, 757, 791, 804, 805, 843, 1210, 1237, 1238, 1358], "return_typ": [307, 312, 350], "returns_scalar": [145, 589, 590, 791, 805, 843], "reus": [62, 63, 129, 203, 864, 865, 875, 902, 915, 959], "reusabl": 203, "rev": [256, 350, 889, 959], "revers": [210, 226, 313, 350, 420, 434, 435, 436, 437, 438, 615, 617, 619, 749, 770, 776, 843, 859, 922, 959, 1048, 1049, 1050, 1051, 1052, 1358, 1376, 1379], "reverse_": 617, "reverse_a": 617, "reverse_b": 617, "revert": [7, 9, 11], "rhap": [700, 702, 1288], "rhapsodi": [700, 702, 1288], "right": [9, 11, 16, 17, 19, 28, 41, 72, 148, 149, 172, 173, 174, 175, 240, 254, 255, 282, 319, 350, 440, 496, 497, 498, 499, 527, 570, 571, 572, 573, 638, 651, 655, 657, 659, 661, 663, 666, 668, 670, 674, 682, 769, 782, 783, 785, 786, 801, 802, 830, 831, 833, 843, 883, 887, 888, 908, 926, 959, 1054, 1116, 1117, 1118, 1119, 1145, 1191, 1192, 1193, 1194, 1231, 1258, 1269, 1358, 1374, 1379], "right_left": [254, 319, 350, 887, 926, 959], "right_on": [254, 255, 319, 350, 887, 888, 926, 959], "rightmost": [674, 843, 1258, 1358, 1381], "rld": [721, 723, 1309], "rle": [650, 843, 1242, 1358], "rle_id": [649, 843, 1358], "rle_id_a": [650, 843], "rle_id_ab": [650, 843], "rmm": 934, "rn": [148, 149, 163], "role": [33, 151], "roll": [240, 350, 447, 467, 468, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 771, 819, 820, 843, 883, 959, 1060, 1084, 1085, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1358], "rollback": [468, 1085], "rolled_forward": 447, "rollforward": [467, 1084], "rolling_kurtosi": [843, 1358], "rolling_map": [843, 1358], "rolling_max": [843, 1358], "rolling_max_bi": 843, "rolling_mean": [843, 1358], "rolling_mean_bi": 843, "rolling_median": [843, 1358], "rolling_median_bi": 843, "rolling_min": [843, 1358], "rolling_min_bi": 843, "rolling_quantil": [843, 1358], "rolling_quantile_bi": 843, "rolling_row_max": [655, 843], "rolling_row_mean": [657, 843], "rolling_row_median": [659, 843], "rolling_row_min": [661, 843], "rolling_row_quantil": [663, 843], "rolling_row_std": [666, 843], "rolling_row_sum": [668, 843], "rolling_row_var": [670, 843], "rolling_skew": [843, 1358], "rolling_std": [843, 1358], "rolling_std_bi": 843, "rolling_sum": [653, 843, 1244, 1358], "rolling_sum_bi": 843, "rolling_var": [843, 1358], "rolling_var_bi": 843, "rollinggroupbi": [282, 350], "ronaldo": [697, 1283], "root": [152, 164, 427, 603, 614, 615, 617, 619, 621, 622, 686, 842, 843, 1038, 1272, 1358, 1380], "rotat": [350, 353, 1358, 1363], "round": [21, 41, 58, 137, 150, 350, 428, 432, 509, 672, 745, 843, 1039, 1129, 1255, 1358, 1379], "round_sig_fig": [843, 1358], "round_str": 1092, "round_td": 1092, "rounded_corn": 21, "roundmod": [671, 843, 1254, 1358], "row": [15, 21, 26, 38, 39, 41, 47, 48, 51, 53, 56, 57, 59, 64, 104, 110, 118, 126, 133, 134, 135, 136, 137, 143, 144, 148, 149, 150, 153, 154, 156, 157, 158, 159, 160, 163, 166, 167, 168, 169, 172, 173, 179, 208, 210, 211, 212, 222, 223, 228, 231, 233, 234, 238, 239, 240, 241, 242, 243, 247, 248, 249, 250, 252, 253, 254, 255, 256, 258, 259, 265, 266, 270, 274, 278, 282, 285, 286, 295, 301, 304, 306, 307, 312, 313, 315, 317, 318, 319, 326, 327, 331, 333, 335, 336, 344, 350, 354, 375, 376, 384, 399, 420, 421, 502, 510, 514, 520, 543, 554, 581, 631, 632, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 678, 683, 685, 696, 705, 744, 749, 763, 766, 772, 774, 791, 795, 797, 798, 800, 802, 817, 819, 820, 828, 843, 859, 862, 872, 873, 879, 880, 881, 883, 884, 887, 888, 889, 890, 892, 893, 897, 898, 905, 916, 921, 922, 923, 925, 926, 932, 933, 937, 939, 941, 942, 950, 959, 969, 984, 993, 1121, 1122, 1132, 1139, 1164, 1175, 1226, 1243, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1270, 1282, 1291, 1330, 1358, 1367, 1374, 1376, 1387, 1388, 1389], "row_count_nam": [148, 149, 154, 156, 160, 163, 166, 167, 168], "row_count_offset": [148, 149, 154, 156, 160, 163, 166, 167, 168], "row_group": [160, 168], "row_group_s": [47, 51, 350, 959], "row_height": [41, 350], "row_index": [41, 350], "row_index_nam": [148, 149, 154, 156, 158, 160, 163, 166, 167, 168], "row_index_offset": [148, 149, 154, 156, 158, 160, 163, 166, 167, 168], "row_nr": [326, 350, 932, 959], "row_tot": [41, 350], "rowname_col": [350, 354], "rows_by_kei": [252, 284, 303, 350], "rowserror": [283, 350], "rowtotalsdefinit": [41, 350], "rtol": [172, 173, 174, 175], "rtrim": 1379, "ru": 1381, "rule": [148, 160, 163, 168, 233, 350, 690, 714, 729, 1276, 1300, 1315], "run": [48, 49, 50, 51, 62, 63, 71, 95, 129, 150, 179, 182, 183, 184, 239, 254, 257, 259, 289, 315, 325, 336, 350, 425, 439, 553, 589, 590, 649, 650, 708, 821, 843, 864, 865, 875, 882, 887, 893, 897, 902, 904, 911, 915, 923, 930, 934, 959, 963, 965, 1034, 1053, 1174, 1210, 1241, 1242, 1294, 1358, 1386, 1389], "runtim": 963, "runtimeerror": [308, 350, 1339, 1358], "rust": [38, 47, 48, 100, 112, 145, 153, 154, 156, 160, 259, 336, 350, 699, 959, 963, 1210, 1285, 1358], "s1": [55, 96, 97, 174, 175, 233, 350, 769, 773, 775, 1008, 1113, 1114, 1134, 1159, 1169, 1202, 1222, 1234, 1349, 1358], "s2": [1, 55, 96, 97, 174, 175, 233, 350, 769, 773, 775, 1008, 1040, 1057, 1113, 1114, 1134, 1150, 1159, 1169, 1202, 1216, 1222, 1234, 1349, 1358], "s3": [1, 40, 152, 164, 165, 168, 169, 350, 904, 959, 1008, 1202, 1358], "s_": 480, "s_bar": 1376, "s_dt": [480, 1381, 1382], "s_dt1": 1381, "s_dt2": 1381, "s_dtm": 480, "s_foo": 1376, "s_from_str_repr": [1336, 1358], "s_head_5": 703, "s_head_n": 703, "s_tail_5": 727, "s_tail_n": 727, "s_td": 480, "s_tm": [480, 1381, 1382], "safe": [643, 843, 1235, 1358], "sale": [631, 843], "salesforce_format": 196, "sam": 13, "same": [21, 40, 41, 54, 55, 56, 62, 63, 64, 96, 97, 113, 154, 163, 172, 173, 174, 175, 177, 203, 231, 239, 255, 259, 274, 278, 284, 285, 296, 315, 324, 325, 329, 336, 350, 358, 365, 398, 424, 445, 446, 480, 506, 510, 512, 513, 516, 580, 594, 600, 631, 645, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 678, 685, 696, 707, 739, 833, 839, 843, 864, 865, 879, 882, 888, 891, 893, 905, 915, 917, 923, 929, 930, 935, 959, 965, 970, 1007, 1033, 1058, 1059, 1064, 1097, 1201, 1210, 1237, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1282, 1293, 1349, 1358, 1372, 1374, 1382], "samoa": [448, 1061], "sampl": [148, 149, 336, 350, 678, 682, 801, 802, 843, 942, 1269, 1358, 1375], "sample_s": [148, 149], "sampled_from": 1389, "sandwich": [236, 350], "sat": [350, 353], "satisfi": [527, 843, 1145, 1358], "saturdai": [240, 350, 883, 959], "save": [2, 3, 6, 240, 255, 282, 320, 350, 448, 456, 470, 475, 488, 651, 655, 657, 659, 661, 663, 666, 668, 670, 782, 783, 785, 786, 787, 830, 831, 839, 843, 855, 883, 888, 908, 959, 1069, 1087, 1092, 1105], "save_to_fil": 5, "say\u014dnara": 1, "scalar": [145, 208, 250, 259, 283, 293, 350, 425, 589, 674, 676, 703, 708, 716, 727, 791, 803, 805, 843, 914, 959, 969, 1034, 1159, 1258, 1262, 1289, 1294, 1302, 1313, 1358], "scale": [29, 72, 226, 350, 408, 590, 635, 730, 843, 965, 1115, 1316, 1358], "scale_negative_even": [635, 843], "scan": [133, 136, 148, 149, 150, 153, 157, 158, 159, 160, 163, 164, 165, 166, 167, 168, 169, 193, 350, 705, 959, 1291], "scan_csv": [48, 49, 50, 51, 148, 149, 959], "scan_ipc": 154, "scan_ndjson": 158, "scan_parquet": [52, 53, 54, 160, 169, 904, 959], "scan_pyarrow_dataset": [160, 168], "scan_tabl": 201, "scatter": [350, 353, 1358, 1363], "scenario": 1358, "schedul": [63, 865, 959], "schema": [0, 1, 15, 29, 36, 39, 40, 57, 58, 59, 64, 95, 104, 121, 122, 130, 132, 133, 134, 136, 143, 144, 148, 149, 150, 151, 153, 155, 157, 158, 159, 160, 162, 163, 166, 167, 168, 189, 191, 192, 193, 197, 199, 212, 213, 214, 220, 224, 226, 253, 257, 259, 266, 270, 279, 308, 312, 350, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 454, 580, 581, 590, 601, 616, 618, 620, 705, 757, 825, 843, 855, 862, 863, 866, 867, 871, 874, 893, 898, 906, 928, 942, 959, 965, 1043, 1291, 1358, 1367], "schema_mod": [40, 350], "schema_overrid": [130, 132, 133, 134, 135, 136, 148, 149, 150, 151, 153, 157, 158, 159, 163, 167, 253, 308, 350, 959, 965], "schemadefinit": [130, 132, 133, 134, 136, 157, 158, 167, 350, 959], "schemadict": [87, 95, 130, 132, 133, 134, 135, 136, 143, 148, 150, 151, 153, 159, 160, 163, 166, 168, 350, 825, 893, 942, 959], "schemainitdatatyp": 964, "scheme": [52, 53, 54], "schindler": 1367, "scientif": [12, 38, 48, 350, 959], "scikit": [312, 350], "scipi": [539, 682, 843, 1160, 1269, 1358], "scope": [34, 35, 203, 854, 965, 1370, 1373, 1386], "score": [41, 274, 350], "script": [350, 353, 1358, 1363], "scroll": [41, 350], "sdiff": 572, "sdk": 188, "search": [255, 350, 581, 690, 700, 702, 714, 888, 917, 959, 1142, 1276, 1286, 1288, 1300, 1358], "search_sort": [843, 1358], "searchsortedsid": [674, 843, 1258, 1358], "searchstrategi": [176, 178, 179, 180, 181, 183], "season": [712, 713], "sec": [1382, 1389], "second": [38, 48, 158, 163, 166, 167, 172, 173, 174, 175, 240, 255, 282, 320, 350, 458, 462, 464, 465, 469, 470, 473, 475, 480, 487, 488, 497, 651, 655, 657, 659, 661, 663, 666, 668, 670, 712, 713, 726, 729, 784, 785, 786, 787, 829, 830, 831, 843, 883, 888, 908, 959, 965, 1087, 1090, 1092, 1104, 1105, 1117, 1298, 1299, 1312, 1315, 1358, 1381, 1382, 1387, 1389], "second_part": [718, 719, 1304, 1305], "seconds_diff": 487, "secret": [165, 168], "section": [274, 350, 689, 697, 698, 701, 712, 713, 782, 783, 785, 786, 830, 831, 963, 1275, 1283, 1284, 1287, 1298, 1299], "secur": [442, 843, 870, 959], "see": [38, 40, 41, 43, 44, 47, 48, 49, 50, 51, 71, 143, 145, 150, 151, 152, 153, 154, 156, 158, 160, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 179, 183, 193, 205, 216, 231, 240, 254, 273, 274, 278, 319, 350, 354, 413, 414, 416, 417, 429, 480, 505, 539, 589, 682, 689, 697, 698, 701, 703, 712, 713, 727, 782, 783, 785, 786, 817, 830, 831, 839, 843, 879, 883, 905, 926, 934, 959, 963, 965, 967, 1022, 1023, 1025, 1026, 1036, 1042, 1097, 1160, 1269, 1275, 1283, 1284, 1287, 1289, 1298, 1299, 1313, 1358, 1389], "seed": [95, 170, 241, 286, 350, 519, 569, 641, 673, 678, 843, 1138, 1190, 1233, 1256, 1265, 1358], "seed_1": [241, 350, 519, 843, 1138, 1358], "seed_2": [241, 350, 519, 843, 1138, 1358], "seed_3": [241, 350, 519, 843, 1138, 1358], "seen": [480, 1097], "seen_group": 149, "select": [1, 8, 39, 48, 49, 50, 51, 56, 57, 58, 59, 62, 63, 95, 101, 146, 148, 149, 150, 151, 152, 154, 156, 160, 163, 165, 169, 178, 208, 209, 250, 251, 255, 259, 270, 273, 283, 289, 295, 297, 310, 316, 320, 327, 350, 358, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 384, 389, 390, 391, 396, 397, 398, 399, 400, 401, 403, 406, 409, 410, 415, 418, 419, 420, 423, 427, 428, 430, 431, 432, 433, 439, 441, 443, 444, 445, 446, 449, 451, 452, 461, 467, 468, 470, 474, 480, 481, 482, 483, 484, 485, 486, 487, 488, 491, 493, 496, 498, 499, 500, 501, 502, 503, 507, 509, 514, 518, 519, 520, 521, 522, 523, 524, 525, 528, 529, 532, 538, 539, 540, 542, 543, 553, 554, 581, 584, 585, 586, 587, 589, 590, 591, 592, 593, 597, 609, 611, 613, 614, 616, 618, 620, 623, 624, 628, 629, 630, 631, 633, 634, 637, 639, 640, 641, 642, 643, 644, 647, 648, 649, 652, 653, 664, 671, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 696, 697, 698, 699, 700, 701, 702, 704, 709, 726, 737, 739, 740, 743, 744, 745, 746, 748, 749, 751, 752, 753, 754, 755, 758, 760, 762, 765, 766, 767, 770, 771, 773, 774, 775, 776, 779, 786, 787, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 806, 808, 810, 811, 813, 814, 817, 818, 822, 823, 824, 825, 826, 828, 832, 839, 843, 858, 864, 865, 867, 875, 888, 901, 902, 911, 915, 916, 918, 924, 931, 933, 934, 959, 965, 969, 1091, 1131, 1174, 1257, 1259, 1270, 1288, 1292, 1312, 1358, 1367, 1368, 1369, 1370, 1375, 1376, 1377, 1378, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388], "select_from": [178, 181, 183], "select_seq": [350, 959], "selector": [0, 41, 211, 220, 222, 223, 227, 265, 272, 274, 296, 305, 307, 312, 315, 317, 318, 350, 354, 480, 500, 597, 843, 855, 861, 871, 872, 873, 876, 897, 917, 923, 925, 959], "selectortyp": [41, 350, 965], "self": [1, 57, 58, 59, 60, 62, 63, 129, 297, 328, 350, 822, 843, 864, 865, 875, 902, 915, 918, 931, 959, 974, 1020, 1021, 1022, 1023, 1025, 1026, 1029, 1043, 1048, 1122, 1126, 1141, 1208, 1210, 1223, 1227, 1228, 1234, 1237, 1238, 1257, 1259, 1260, 1271, 1346, 1349, 1358, 1369, 1370, 1371, 1373, 1374, 1375, 1376, 1377, 1378, 1380, 1381, 1382, 1383, 1384, 1386], "semi": [144, 254, 350, 887, 959, 1374], "semigraph": 21, "sens": [148, 154, 156, 266, 320, 350, 631, 843, 898, 959], "sensit": [689, 698, 701, 712, 713, 1275, 1284, 1287, 1298, 1299], "sep": 144, "separ": [9, 11, 25, 28, 37, 38, 48, 139, 144, 147, 148, 149, 153, 163, 272, 274, 305, 314, 316, 350, 384, 387, 480, 554, 560, 590, 696, 772, 777, 778, 843, 915, 924, 959, 993, 996, 1097, 1175, 1181, 1282, 1328, 1334, 1358, 1381], "seq": 27, "seq1": 27, "seq2": 27, "sequenc": [41, 47, 52, 54, 56, 87, 130, 132, 133, 134, 136, 144, 148, 149, 150, 153, 157, 158, 159, 163, 167, 177, 178, 179, 180, 181, 210, 218, 227, 228, 254, 255, 265, 270, 272, 273, 274, 285, 296, 305, 307, 312, 313, 317, 318, 319, 320, 350, 399, 420, 440, 513, 531, 581, 589, 635, 638, 645, 646, 685, 714, 724, 725, 739, 749, 766, 777, 778, 791, 793, 801, 802, 804, 805, 814, 817, 823, 843, 859, 869, 876, 887, 888, 897, 901, 917, 922, 925, 926, 959, 965, 1008, 1054, 1055, 1122, 1202, 1231, 1237, 1238, 1300, 1326, 1358], "sequenti": [62, 63, 129, 289, 325, 350, 864, 865, 875, 902, 911, 915, 930, 959], "ser": [1066, 1067, 1095], "seri": [0, 1, 12, 26, 41, 55, 57, 58, 59, 60, 64, 65, 74, 87, 96, 97, 106, 130, 132, 135, 137, 145, 174, 175, 179, 208, 221, 231, 233, 235, 237, 240, 241, 244, 245, 246, 247, 249, 251, 261, 263, 268, 278, 280, 282, 286, 300, 303, 306, 308, 310, 311, 330, 350, 365, 376, 399, 403, 422, 423, 424, 425, 426, 428, 474, 503, 506, 509, 513, 514, 524, 525, 526, 529, 531, 532, 534, 535, 536, 537, 548, 554, 556, 581, 587, 589, 590, 641, 642, 643, 644, 645, 646, 651, 653, 664, 675, 677, 703, 714, 726, 727, 728, 729, 733, 737, 748, 753, 763, 767, 769, 770, 773, 775, 777, 778, 782, 783, 785, 786, 791, 793, 797, 798, 801, 802, 803, 804, 805, 815, 817, 818, 821, 822, 825, 830, 831, 834, 843, 855, 879, 883, 886, 905, 908, 936, 959, 1350, 1352, 1354, 1357, 1359, 1362, 1363, 1364, 1365, 1366, 1368, 1370, 1381, 1386, 1389], "serial": [45, 46, 219, 350, 442, 608, 843, 870, 959], "serializ": [145, 843], "serializationformat": [219, 290, 350, 442, 604, 843, 870, 912, 959], "seriesplot": [1358, 1363], "server": [39, 150, 151, 350], "servic": 33, "service_account": [152, 164], "service_account_json_absolute_path": [152, 164], "session": 150, "set": [2, 3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 16, 17, 18, 21, 26, 27, 28, 31, 38, 39, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 62, 63, 68, 71, 72, 74, 131, 132, 133, 136, 145, 148, 149, 150, 153, 154, 156, 157, 158, 159, 160, 163, 166, 167, 168, 169, 170, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 193, 203, 207, 215, 222, 223, 232, 235, 239, 241, 252, 254, 255, 263, 265, 284, 286, 288, 290, 295, 300, 305, 307, 308, 312, 314, 315, 317, 318, 319, 324, 350, 353, 362, 364, 386, 387, 399, 411, 413, 414, 416, 417, 429, 440, 473, 474, 491, 519, 531, 556, 558, 560, 569, 570, 571, 572, 573, 575, 581, 589, 590, 597, 598, 604, 635, 638, 645, 646, 652, 653, 654, 656, 658, 660, 662, 664, 665, 667, 669, 673, 678, 682, 683, 688, 704, 705, 712, 713, 716, 721, 722, 723, 724, 725, 726, 728, 729, 733, 754, 758, 760, 763, 767, 769, 772, 773, 775, 782, 783, 784, 785, 786, 787, 791, 797, 798, 801, 802, 803, 809, 815, 818, 819, 820, 821, 825, 827, 830, 831, 833, 834, 843, 855, 864, 865, 872, 873, 875, 882, 887, 888, 893, 897, 902, 910, 912, 915, 916, 923, 925, 926, 929, 942, 959, 972, 973, 995, 996, 1008, 1013, 1020, 1022, 1023, 1025, 1026, 1042, 1054, 1090, 1091, 1108, 1128, 1138, 1150, 1157, 1177, 1179, 1181, 1190, 1191, 1192, 1193, 1194, 1196, 1202, 1210, 1231, 1237, 1238, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1256, 1257, 1258, 1265, 1269, 1270, 1274, 1290, 1291, 1298, 1299, 1302, 1307, 1308, 1309, 1312, 1314, 1315, 1319, 1339, 1347, 1358, 1377, 1385, 1389], "set_": 203, "set_auto_structifi": [288, 324, 350, 910, 929, 959], "set_decimal_separ": 28, "set_environ": 182, "set_except": [63, 865, 959], "set_fmt_float": 31, "set_fmt_str_length": [690, 700, 702, 714, 1276, 1288, 1300], "set_index": [240, 350, 883, 959], "set_legend": [41, 350], "set_sort": [282, 320, 350, 651, 843, 908, 959, 1358], "set_stat": 31, "set_streaming_chunk_s": [864, 959], "set_styl": [41, 350], "set_tbl_column_data_type_inlin": 25, "set_tbl_format": [7, 56], "set_tbl_row": 203, "set_tbl_width_char": 714, "set_thousands_separ": 9, "set_titl": [41, 350], "set_verbos": 203, "setosa": [350, 353], "setup": 1389, "seventeen": [523, 843], "sever": [130, 132, 133, 134, 136, 157, 158, 167, 350, 904, 959, 1389], "sfu": 151, "shape": [1, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 55, 56, 57, 58, 59, 60, 64, 65, 83, 87, 95, 96, 97, 104, 123, 130, 131, 132, 133, 134, 135, 136, 137, 144, 148, 157, 158, 163, 169, 176, 179, 183, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 233, 234, 235, 237, 239, 240, 241, 242, 244, 245, 246, 247, 249, 250, 251, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 286, 288, 290, 293, 295, 296, 297, 298, 299, 300, 301, 303, 305, 306, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 350, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 609, 610, 611, 612, 613, 614, 615, 617, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 839, 843, 858, 859, 861, 862, 864, 865, 868, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 912, 914, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 931, 932, 933, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 959, 964, 965, 969, 970, 971, 974, 976, 977, 978, 979, 980, 981, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1077, 1078, 1079, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1113, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1129, 1131, 1132, 1134, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1215, 1222, 1223, 1224, 1226, 1227, 1228, 1229, 1231, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1262, 1263, 1265, 1266, 1267, 1268, 1270, 1271, 1272, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1325, 1328, 1330, 1331, 1332, 1334, 1335, 1336, 1341, 1343, 1344, 1345, 1346, 1347, 1349, 1358, 1367, 1368, 1369, 1370, 1372, 1374, 1375, 1376, 1377, 1378, 1380, 1381, 1382, 1383, 1384, 1386, 1387], "share": [172, 173, 174, 175, 226, 350, 1115, 1358], "shawshank": 1367, "sheet": [41, 153, 159, 350], "sheet1": [41, 350], "sheet_id": [153, 159], "sheet_nam": [153, 159], "sheet_zoom": [41, 350], "sheetnam": [153, 159], "shift": [240, 350, 402, 443, 511, 551, 632, 771, 843, 883, 959, 1011, 1056, 1130, 1172, 1226, 1358], "short": [172, 174, 407, 1016], "shorten": [172, 174], "shorter": [148, 149, 163, 581, 797, 798], "shorthand": [350, 353, 833, 1358, 1363], "should": [11, 39, 41, 47, 48, 49, 50, 51, 64, 95, 130, 132, 134, 136, 143, 144, 153, 157, 158, 163, 165, 167, 169, 176, 177, 179, 183, 220, 252, 254, 255, 259, 283, 284, 285, 296, 304, 305, 316, 336, 350, 360, 439, 442, 447, 491, 497, 500, 534, 535, 553, 590, 604, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 674, 682, 685, 712, 713, 730, 754, 766, 768, 787, 789, 803, 805, 819, 820, 839, 843, 864, 870, 871, 875, 887, 888, 893, 902, 912, 915, 917, 924, 959, 965, 1053, 1060, 1108, 1117, 1174, 1210, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1258, 1269, 1298, 1299, 1316, 1347, 1358, 1368], "show": [31, 41, 218, 223, 238, 257, 271, 350, 521, 605, 843, 869, 902, 915, 959, 1140, 1358, 1372, 1385], "show_graph": [257, 350, 959], "show_plot": [902, 959], "shrink": [294, 350, 677, 843, 1263, 1264, 1358], "shrink_dtyp": [843, 1358], "shrink_to_fit": [350, 1358], "shuffl": [170, 286, 312, 336, 350, 569, 673, 843, 942, 1190, 1256, 1358], "side": [41, 145, 240, 282, 350, 527, 570, 571, 572, 573, 651, 655, 657, 659, 661, 663, 666, 668, 670, 674, 782, 783, 785, 786, 801, 802, 830, 831, 843, 883, 908, 959, 1145, 1191, 1192, 1193, 1194, 1258, 1358], "sign": [70, 71, 73, 78, 79, 80, 81, 82, 88, 470, 643, 712, 713, 736, 843, 965, 1087, 1235, 1298, 1299, 1322, 1358, 1379], "sign_x": 1380, "signed_integ": 965, "signific": [168, 252, 259, 350, 413, 414, 416, 417, 590, 672, 843, 1022, 1023, 1025, 1026, 1210, 1255, 1358], "significantli": [153, 259, 336, 350, 1210, 1358, 1389], "silenc": 104, "silent": [731, 1317], "similar": [37, 47, 147, 185, 233, 255, 293, 315, 317, 350, 394, 477, 480, 574, 631, 676, 741, 800, 833, 843, 879, 888, 914, 923, 925, 959, 1003, 1094, 1097, 1195, 1262, 1358], "similarli": [41, 133, 240, 255, 282, 320, 350, 470, 475, 488, 651, 655, 657, 659, 661, 663, 666, 668, 670, 782, 783, 785, 786, 830, 831, 843, 883, 888, 908, 959, 1087, 1092, 1105], "simpl": [41, 270, 350], "simpler": [965, 1298], "simpli": [163, 777, 791], "simplifi": [48, 49, 50, 51, 62, 63, 129, 864, 865, 875, 902, 915, 959], "simplify_express": [48, 49, 50, 51, 62, 63, 129, 864, 865, 875, 902, 915, 959], "sin": [843, 1358, 1379], "sinc": [40, 65, 70, 71, 88, 148, 149, 150, 152, 158, 163, 164, 166, 167, 176, 177, 178, 179, 183, 186, 209, 265, 308, 326, 331, 350, 454, 457, 491, 512, 589, 608, 645, 688, 696, 756, 765, 773, 793, 843, 858, 875, 897, 917, 931, 932, 937, 959, 1067, 1070, 1076, 1077, 1108, 1137, 1237, 1274, 1282, 1339, 1358], "sind": 1379, "sine": [369, 370, 589, 680, 681, 843, 978, 979, 1267, 1268, 1358, 1383], "singl": [41, 47, 56, 63, 64, 75, 147, 148, 149, 150, 151, 152, 153, 160, 163, 164, 166, 177, 211, 220, 221, 222, 223, 228, 235, 241, 250, 259, 272, 283, 285, 296, 307, 308, 350, 383, 425, 429, 447, 470, 513, 516, 519, 550, 556, 589, 590, 642, 645, 647, 649, 685, 688, 703, 704, 708, 716, 727, 756, 766, 770, 771, 772, 798, 802, 804, 805, 823, 831, 833, 839, 843, 861, 871, 872, 873, 917, 959, 965, 992, 1034, 1042, 1060, 1087, 1122, 1138, 1171, 1177, 1234, 1237, 1239, 1241, 1274, 1289, 1290, 1294, 1302, 1313, 1333, 1339, 1358, 1369], "singlecolselector": 208, "singleindexselector": [208, 969], "sinh": [843, 1358], "sink": 856, "sink_": [52, 54], "sink_csv": [52, 53, 54, 959], "sink_ipc": 959, "sink_ndjson": 959, "sink_parquet": [52, 959], "site_id": [350, 354], "six": [674, 843], "size": [15, 47, 51, 53, 143, 148, 149, 150, 176, 177, 178, 179, 183, 185, 226, 318, 350, 488, 581, 647, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 763, 797, 798, 819, 820, 843, 864, 959, 1105, 1115, 1239, 1243, 1250, 1358, 1389], "sizeunit": [226, 350, 408, 1017, 1115, 1358], "skew": [664, 843, 1250, 1358], "skewtest": [682, 843, 1269, 1358], "skip": [148, 149, 153, 160, 163, 168, 255, 318, 350, 888, 959, 1210, 1358, 1374], "skip_empty_lin": 153, "skip_lin": [148, 163], "skip_nul": [590, 843, 1210, 1358], "skip_row": [148, 149, 163], "skip_rows_after_head": [148, 149, 163], "sklearn": [312, 350], "slice": [48, 49, 50, 51, 57, 62, 63, 129, 145, 226, 242, 253, 301, 350, 559, 579, 590, 601, 603, 653, 654, 656, 658, 660, 662, 665, 667, 669, 703, 727, 843, 864, 865, 875, 893, 902, 915, 959, 1115, 1139, 1180, 1200, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1289, 1313, 1330, 1358, 1381], "slice_pushdown": [48, 49, 50, 51, 62, 63, 129, 864, 865, 875, 893, 902, 915, 959], "slide": [439, 843, 1053, 1358], "slightli": [48, 49, 50, 51, 100, 510, 843, 959, 1382], "slot": [439, 443, 551, 843, 1053, 1056, 1172, 1358], "slow": [116, 133, 136, 148, 149, 150, 153, 157, 158, 159, 163, 167, 168, 350, 439, 590, 653, 705, 843, 942, 959, 1053, 1244, 1291, 1358], "slower": [134, 136, 153, 239, 259, 272, 320, 336, 350, 590, 805, 843, 882, 942, 959, 1210, 1358], "small": [12, 151, 475, 959, 1389], "smaller": [47, 51, 53, 226, 350, 959, 1115, 1358], "smallest": [210, 313, 350, 419, 420, 749, 843, 859, 922, 959, 1028, 1358, 1375, 1378], "smooth": [496, 498, 499, 843, 1116, 1118, 1119, 1358], "snappi": [36, 47, 51, 350, 959], "snapshot": 165, "snapshot_id": 165, "snowflak": [150, 151], "snowflake_format": 196, "snowi": [712, 713], "so": [1, 41, 151, 153, 163, 185, 203, 238, 240, 256, 274, 282, 350, 376, 386, 442, 510, 527, 558, 581, 590, 651, 712, 713, 714, 721, 722, 723, 737, 843, 870, 883, 889, 908, 959, 965, 995, 1179, 1298, 1299, 1300, 1307, 1308, 1309], "softwar": [37, 147, 350], "solut": [39, 350], "solv": [95, 143], "some": [15, 31, 41, 47, 51, 55, 64, 97, 133, 148, 149, 150, 163, 207, 223, 274, 285, 308, 350, 354, 712, 713, 839, 904, 959, 1150, 1298, 1299, 1358, 1389], "some_account": [698, 1284], "some_t": 1388, "someth": [589, 843], "sometim": [787, 842], "somewher": [698, 1284], "sort": [54, 56, 57, 210, 240, 255, 266, 273, 274, 282, 291, 313, 320, 333, 344, 350, 375, 419, 420, 497, 506, 590, 631, 651, 675, 685, 748, 749, 754, 756, 766, 782, 785, 805, 843, 859, 875, 883, 888, 898, 901, 902, 908, 913, 915, 922, 939, 950, 959, 965, 984, 1028, 1117, 1157, 1260, 1343, 1344, 1347, 1358, 1374, 1387, 1389], "sort_bi": 843, "sort_column": [274, 350], "sorted": [255, 350, 888, 959], "sorted_asc": [1128, 1358], "sorted_desc": [1128, 1358], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 350, 353, 354, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 839, 843, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 959, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1325, 1326, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1358, 1363, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1386], "source_ac": 137, "source_actor_id": 137, "source_alia": [40, 350], "source_cha": 137, "source_channel_id": 137, "south": 74, "space": [21, 240, 350, 480, 801, 802, 883, 959, 965, 1097], "spam": [262, 350, 698, 1284], "span": [496, 498, 499, 843, 1116, 1118, 1119, 1358], "spanner": [350, 354], "spark": [47, 350], "sparklin": [41, 350], "speak": [682, 843, 1269, 1358], "spearman": 773, "speci": [350, 353], "special": [39, 54, 148, 149, 151, 163, 312, 327, 350, 653, 698, 712, 713, 843, 933, 959, 1210, 1244, 1284, 1298, 1299, 1358], "specif": [1, 31, 40, 41, 43, 44, 49, 100, 130, 132, 134, 136, 144, 148, 151, 152, 153, 157, 158, 159, 164, 165, 167, 211, 252, 254, 302, 307, 350, 477, 480, 726, 728, 729, 733, 754, 843, 861, 887, 959, 964, 965, 1094, 1097, 1312, 1314, 1315, 1319, 1333, 1337, 1347, 1358, 1374, 1386, 1388, 1389], "specifi": [10, 38, 39, 40, 41, 47, 48, 56, 101, 104, 107, 122, 125, 148, 153, 159, 160, 163, 168, 180, 189, 191, 192, 193, 210, 211, 226, 227, 230, 235, 239, 240, 254, 255, 272, 274, 282, 283, 285, 288, 289, 293, 296, 307, 313, 316, 324, 325, 329, 350, 420, 429, 473, 480, 496, 498, 499, 500, 505, 631, 644, 646, 654, 656, 658, 660, 662, 665, 667, 669, 676, 685, 741, 749, 766, 769, 770, 771, 772, 782, 783, 785, 786, 787, 789, 821, 825, 830, 831, 839, 843, 859, 861, 876, 878, 882, 883, 887, 888, 908, 910, 911, 914, 917, 922, 924, 929, 930, 935, 959, 965, 1042, 1090, 1097, 1115, 1116, 1118, 1119, 1125, 1238, 1262, 1337, 1358, 1374, 1381, 1388], "speed": [51, 291, 350, 590, 843, 913, 959, 963, 1389], "speedup": [56, 168, 252, 259, 350, 590, 843, 1210, 1358], "split": [1, 41, 47, 52, 53, 54, 57, 253, 350, 696, 718, 719, 1282, 1304, 1305, 1381], "split_by_column_dtyp": 59, "split_inclus": 717, "split_part": 1379, "splitfram": [1, 57], "spreadsheet": [37, 147, 153, 159, 274, 350], "spring": [712, 713], "sql": [0, 39, 119, 120, 128, 150, 151, 254, 293, 350, 394, 574, 676, 800, 823, 843, 855, 914, 959, 1003, 1195, 1262, 1358, 1367, 1368, 1370, 1372, 1375, 1376, 1377, 1378, 1380, 1381, 1382, 1383, 1384, 1387, 1388], "sql_expr": 1386, "sqlalchemi": [39, 150, 171, 350], "sqlcontext": [297, 350, 822, 918, 959, 1385], "sqldw_format": 196, "sqlite": [39, 150, 350], "sqrt": [590, 682, 741, 843, 1210, 1269, 1358, 1379], "sqrt_x": 1380, "squar": [1, 60, 336, 539, 647, 686, 843, 942, 1160, 1239, 1272, 1358, 1380], "st": [33, 1389], "stabil": [241, 350, 519, 843, 1138, 1358], "stabl": [160, 205, 216, 218, 219, 241, 286, 290, 297, 350, 442, 519, 586, 604, 747, 843, 869, 870, 897, 912, 917, 918, 959, 967, 1138, 1341, 1358], "stack": [64, 244, 322, 350, 353, 1368], "stage": [915, 959], "stai": [589, 678, 843], "standalon": [177, 965], "standard": [7, 11, 41, 150, 298, 307, 312, 350, 461, 498, 665, 666, 682, 687, 706, 709, 824, 839, 843, 919, 959, 1074, 1113, 1118, 1222, 1269, 1273, 1292, 1295, 1358, 1375, 1389], "standardis": [41, 350], "start": [41, 48, 49, 50, 51, 54, 146, 148, 149, 151, 153, 154, 156, 158, 159, 160, 163, 166, 167, 168, 185, 234, 239, 240, 257, 295, 320, 326, 327, 350, 403, 406, 409, 422, 426, 447, 455, 459, 466, 471, 475, 488, 489, 500, 514, 557, 575, 650, 655, 657, 659, 661, 663, 666, 668, 670, 683, 689, 694, 698, 702, 711, 716, 720, 721, 723, 724, 727, 736, 763, 768, 777, 781, 782, 783, 784, 785, 786, 789, 791, 797, 798, 801, 802, 830, 831, 833, 839, 843, 881, 882, 883, 902, 916, 932, 933, 959, 965, 1018, 1030, 1035, 1060, 1062, 1065, 1068, 1070, 1071, 1078, 1080, 1082, 1083, 1086, 1088, 1092, 1096, 1105, 1106, 1132, 1178, 1196, 1242, 1270, 1280, 1284, 1288, 1297, 1302, 1306, 1307, 1309, 1313, 1322, 1358, 1374, 1381, 1389], "start_bi": [240, 350, 883, 959], "startbi": [240, 350, 883, 959], "starts_a": 1381, "starts_with": [57, 274, 350, 354, 403, 406, 422, 597, 689, 694, 822, 918, 959, 965, 1030, 1280, 1379], "starts_with_expr": 409, "starts_with_lit": 409, "startup": [307, 350], "stat": [539, 682, 843, 1160, 1269, 1358], "state": [4, 5, 112, 777, 855, 1386], "statement": [631, 833, 843, 1372, 1387], "static": [93, 942], "statist": [47, 51, 148, 149, 160, 166, 168, 218, 350, 498, 499, 539, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 682, 843, 869, 959, 1055, 1118, 1119, 1160, 1243, 1250, 1269, 1358], "std": [218, 350, 665, 666, 843, 869, 959, 1055, 1251, 1358], "std_dev": [41, 350], "stddev": 1379, "stddev_samp": 1375, "stdev": [41, 350, 1375], "stdev_samp": 1375, "stdout": [203, 238, 350, 606], "step": [318, 350, 510, 763, 797, 798, 843], "steve": [266, 350, 898, 959], "still": [150, 151], "stock": [350, 353], "stop": [143, 146, 148, 149, 154, 156, 158, 160, 163, 166, 167, 168, 655, 657, 659, 661, 663, 666, 668, 670, 843, 1062, 1065, 1070, 1071, 1078, 1080, 1082, 1086, 1092, 1096], "storag": [38, 40, 43, 47, 48, 49, 50, 51, 148, 152, 154, 156, 158, 160, 163, 164, 165, 166, 167, 168, 193, 350, 959], "storage_loc": [194, 197, 198], "storage_opt": [38, 40, 43, 47, 48, 49, 50, 51, 148, 152, 154, 156, 158, 160, 163, 164, 165, 166, 167, 168, 193, 350, 959], "store": [40, 165, 228, 252, 284, 350, 423, 649, 843, 1031, 1122, 1241, 1358], "store_id": [631, 843], "str": [1, 2, 3, 5, 6, 9, 11, 13, 16, 17, 18, 21, 22, 27, 28, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 71, 74, 75, 98, 129, 130, 131, 132, 133, 134, 136, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 176, 177, 179, 182, 183, 184, 188, 189, 191, 192, 193, 194, 195, 197, 198, 203, 210, 211, 215, 218, 219, 220, 221, 222, 223, 224, 226, 227, 231, 232, 233, 235, 236, 238, 239, 240, 242, 244, 245, 247, 249, 250, 252, 254, 255, 256, 258, 260, 262, 264, 265, 266, 267, 270, 272, 274, 276, 278, 279, 280, 281, 282, 283, 284, 286, 290, 291, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 350, 359, 360, 361, 382, 387, 399, 403, 404, 405, 406, 409, 410, 415, 418, 420, 422, 423, 426, 434, 440, 442, 444, 452, 470, 474, 475, 477, 480, 488, 497, 500, 506, 508, 512, 513, 516, 524, 527, 548, 549, 558, 559, 560, 575, 579, 581, 590, 601, 603, 604, 605, 606, 608, 615, 616, 617, 618, 619, 620, 621, 622, 628, 631, 635, 638, 644, 645, 646, 648, 650, 651, 655, 657, 659, 661, 663, 666, 668, 670, 677, 684, 685, 737, 738, 739, 740, 749, 754, 756, 757, 758, 759, 760, 761, 762, 764, 765, 771, 772, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 799, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 839, 843, 850, 859, 861, 864, 865, 867, 869, 870, 871, 872, 873, 875, 876, 879, 882, 883, 885, 887, 888, 889, 897, 898, 901, 902, 905, 906, 907, 908, 912, 913, 915, 916, 917, 918, 922, 923, 924, 925, 926, 931, 932, 933, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 959, 964, 965, 971, 991, 996, 1008, 1014, 1029, 1030, 1031, 1035, 1054, 1055, 1065, 1087, 1091, 1092, 1094, 1097, 1105, 1117, 1125, 1128, 1169, 1170, 1181, 1202, 1218, 1219, 1220, 1231, 1236, 1237, 1238, 1259, 1323, 1325, 1326, 1334, 1335, 1336, 1337, 1347, 1358, 1364, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1378, 1381, 1382, 1386, 1387, 1389], "str_date": 1381, "str_timestamp": 1381, "str_valu": [52, 141], "strategi": [38, 48, 56, 64, 148, 168, 176, 177, 178, 179, 180, 181, 183, 230, 240, 254, 255, 269, 319, 320, 350, 402, 435, 438, 505, 511, 581, 590, 843, 856, 878, 883, 887, 888, 904, 926, 959, 1011, 1125, 1130, 1202, 1358], "stream": [10, 15, 43, 44, 48, 49, 50, 51, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 239, 254, 315, 350, 589, 843, 864, 875, 882, 887, 893, 897, 902, 915, 917, 923, 959], "streamabl": [893, 897, 925, 959], "streaming_t": 200, "strftime": [100, 480, 1097, 1379, 1381], "strict": [132, 133, 136, 144, 211, 220, 279, 350, 404, 421, 480, 689, 692, 701, 726, 728, 729, 731, 733, 843, 861, 871, 906, 959, 965, 1013, 1029, 1097, 1114, 1275, 1278, 1287, 1312, 1314, 1315, 1317, 1319, 1358], "strictli": [38, 48, 55, 97, 255, 350, 888, 959], "string": [1, 2, 3, 5, 6, 13, 15, 16, 17, 21, 36, 38, 39, 40, 41, 45, 46, 48, 55, 68, 71, 74, 87, 94, 96, 97, 98, 100, 106, 124, 133, 137, 144, 148, 149, 150, 151, 163, 172, 173, 174, 175, 176, 183, 187, 210, 211, 214, 219, 224, 226, 233, 235, 238, 239, 240, 255, 272, 274, 282, 285, 287, 288, 289, 290, 296, 306, 307, 313, 314, 318, 320, 324, 325, 329, 350, 359, 382, 387, 406, 420, 422, 424, 425, 426, 429, 442, 470, 475, 477, 480, 488, 497, 500, 508, 512, 527, 560, 604, 606, 631, 635, 645, 646, 651, 655, 657, 659, 661, 663, 666, 668, 670, 685, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 741, 749, 757, 759, 761, 766, 769, 770, 771, 772, 780, 782, 783, 785, 786, 792, 807, 809, 812, 821, 825, 827, 830, 831, 833, 839, 843, 855, 859, 861, 866, 870, 874, 875, 882, 883, 888, 908, 909, 910, 911, 912, 917, 922, 929, 930, 935, 959, 964, 965, 996, 1013, 1014, 1015, 1030, 1032, 1033, 1034, 1035, 1087, 1092, 1094, 1097, 1105, 1117, 1145, 1181, 1237, 1238, 1274, 1275, 1276, 1277, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1325, 1336, 1337, 1358, 1367, 1368, 1376, 1379, 1382, 1385, 1389], "string_to_arrai": 1379, "stringcach": [96, 97, 254, 350, 855, 1032, 1036], "stringio": [157, 158, 512, 843], "strings_hex": 693, "strip": [29, 721, 722, 723, 724, 725, 1307, 1308, 1309, 1381], "strip_chars_end": [723, 725], "strip_chars_start": [722, 724], "strip_prefix": [723, 725], "strip_suffix": [722, 724], "strongli": [41, 185, 259, 283, 336, 350, 590, 843, 1210, 1358], "strpo": 1379, "strptime": [282, 350, 474, 651, 843, 908, 959, 1091, 1379], "struct": [8, 75, 125, 137, 270, 288, 311, 316, 324, 350, 399, 440, 521, 581, 589, 590, 616, 618, 620, 638, 649, 650, 699, 705, 718, 719, 747, 754, 777, 778, 780, 804, 833, 843, 910, 924, 929, 942, 959, 1008, 1054, 1202, 1210, 1231, 1241, 1285, 1291, 1304, 1305, 1339, 1341, 1358], "struct_col": [737, 739, 740], "struct_seri": 942, "structarrai": [226, 350, 1115, 1358], "structfieldnotfounderror": 739, "structur": [41, 43, 44, 49, 106, 109, 123, 144, 228, 273, 285, 302, 308, 350, 635, 843, 901, 959, 1122, 1333, 1358, 1386], "student": [274, 350], "style": [7, 21, 41, 52, 150, 274, 350], "sub": [336, 380, 381, 382, 385, 386, 387, 388, 389, 390, 391, 392, 396, 397, 401, 560, 567, 843, 989, 990, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1005, 1006, 1010, 1181, 1188], "subarrai": [378, 379, 987, 988], "subclass": [1, 350], "subexpress": [62, 63, 129, 864, 865, 875, 902, 915, 959], "subinterv": 1375, "subject": [47, 165, 274, 350], "sublist": [386, 546, 547, 549, 551, 555, 556, 557, 558, 559, 560, 561, 570, 575, 579, 581, 995, 1150, 1167, 1168, 1170, 1172, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1191, 1196, 1200, 1202, 1358], "subplan": [62, 63, 129, 864, 865, 875, 902, 915, 959], "subsequ": [41, 160, 168, 277, 309, 350, 581, 822, 833, 875, 959, 1340, 1358, 1373], "subset": [222, 223, 270, 315, 350, 872, 873, 923, 959], "substr": [403, 406, 409, 422, 426, 689, 694, 701, 712, 713, 716, 717, 718, 719, 720, 965, 1012, 1015, 1018, 1030, 1035, 1275, 1280, 1287, 1298, 1299, 1302, 1303, 1304, 1305, 1306, 1379], "subtl": [41, 350], "subtli": [510, 843], "subtract": [539, 742, 843, 1160, 1358], "succe": [148, 149, 163], "success": [691, 698, 1277, 1284], "successfulli": [864, 875, 902, 915, 959], "suffer": 54, "suffix": [254, 255, 256, 288, 324, 329, 350, 361, 406, 420, 422, 534, 535, 536, 537, 595, 615, 617, 620, 621, 622, 648, 694, 722, 725, 749, 843, 887, 888, 889, 910, 929, 931, 935, 959, 965, 1015, 1030, 1280, 1311], "suffix_field": [616, 618], "sugar": [319, 350, 645, 646, 714, 758, 760, 762, 774, 776, 779, 789, 794, 795, 796, 806, 808, 810, 811, 813, 815, 816, 821, 824, 826, 828, 832, 834, 843, 926, 959, 1237, 1238, 1272, 1300, 1358], "suggest": [350, 353, 1358, 1363], "suitabl": [56, 64, 150, 177, 259, 350, 590, 674, 843, 1210, 1258, 1358], "sum": [41, 95, 145, 226, 233, 239, 240, 250, 274, 282, 300, 329, 350, 437, 438, 442, 493, 506, 581, 590, 601, 603, 604, 605, 606, 607, 645, 646, 651, 667, 668, 756, 758, 770, 777, 779, 780, 791, 805, 817, 827, 843, 864, 865, 870, 875, 882, 883, 900, 902, 904, 908, 912, 915, 935, 959, 965, 1051, 1052, 1111, 1115, 1252, 1358, 1367, 1374, 1376, 1379, 1386], "sum_": [682, 843, 1269, 1358], "sum_a": [282, 350, 651, 843, 908, 959], "sum_horizont": [56, 350, 826], "summari": [218, 350, 869, 959, 1055, 1358, 1374], "summer": [712, 713], "sun": [350, 353, 726, 1312], "sundai": [240, 350, 447, 459, 477, 480, 490, 768, 883, 959, 1060, 1072, 1094, 1097, 1107], "sunni": [712, 713, 1298, 1299], "supercast": [233, 350], "supertyp": [64, 145, 230, 308, 312, 350, 365, 771, 843, 878, 959, 1358], "suppli": [39, 41, 130, 132, 133, 134, 136, 150, 157, 158, 167, 231, 278, 283, 307, 350, 506, 635, 843, 879, 905, 959, 1337, 1349, 1358], "support": [1, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 62, 63, 64, 130, 131, 132, 133, 134, 135, 136, 137, 150, 151, 152, 153, 157, 158, 159, 160, 163, 164, 165, 166, 167, 168, 176, 180, 183, 193, 203, 252, 253, 254, 255, 284, 285, 295, 296, 304, 309, 312, 350, 480, 497, 575, 631, 645, 646, 683, 685, 690, 700, 702, 703, 712, 713, 714, 716, 727, 839, 843, 849, 864, 865, 875, 887, 888, 902, 915, 916, 917, 959, 965, 1097, 1117, 1196, 1237, 1238, 1270, 1276, 1286, 1288, 1289, 1298, 1299, 1300, 1302, 1313, 1340, 1342, 1358, 1362, 1376, 1381, 1382, 1384, 1385, 1386], "supportsinterchang": 131, "suppos": [208, 274, 350, 590, 843, 1210, 1358], "sure": [64, 130, 131, 135, 145, 148, 149, 152, 154, 156, 160, 164, 277, 350, 843], "surreal_query_to_fram": 150, "surrealdb": 150, "surrealql": 150, "suscept": 959, "swap": [833, 906, 959], "swim": 772, "switch": [62, 63, 448, 864, 865, 875, 902, 915, 959, 1061], "sy": 203, "sydnei": 784, "symbol": [37, 38, 48, 350, 843, 959], "symmetr": [572, 965, 1193], "symmetri": [867, 874, 909, 928, 959], "sync": [48, 49, 50, 51, 959], "sync_on_clos": [48, 49, 50, 51, 959], "synchron": [150, 953], "synconclosemethod": [48, 49, 50, 51, 959], "syntact": [319, 350, 645, 646, 714, 758, 760, 762, 774, 776, 779, 789, 794, 795, 796, 806, 808, 810, 811, 813, 815, 816, 821, 824, 826, 828, 832, 834, 843, 926, 959, 1237, 1238, 1272, 1300, 1358], "syntax": [41, 120, 231, 259, 270, 278, 350, 605, 689, 697, 698, 701, 712, 713, 797, 798, 839, 879, 905, 915, 959, 1275, 1283, 1284, 1287, 1298, 1299, 1358, 1382, 1384], "system": [37, 148, 149, 350, 452, 864, 875, 902, 915, 959, 1065], "t": [37, 38, 40, 48, 64, 95, 143, 147, 148, 153, 159, 163, 240, 255, 259, 273, 315, 318, 350, 439, 448, 456, 474, 480, 493, 496, 498, 499, 553, 590, 631, 635, 697, 701, 712, 713, 723, 726, 729, 734, 833, 843, 883, 888, 901, 923, 959, 965, 1053, 1091, 1097, 1111, 1116, 1118, 1119, 1174, 1210, 1283, 1287, 1298, 1299, 1308, 1309, 1312, 1315, 1320, 1358, 1370, 1371, 1381], "t_": [316, 350, 497, 843, 924, 959, 1117, 1358], "t_0": [282, 350, 497, 651, 655, 657, 659, 661, 663, 666, 668, 670, 843, 908, 959, 1117, 1358], "t_1": [282, 350, 497, 651, 655, 657, 659, 661, 663, 666, 668, 670, 843, 908, 959, 1117, 1358], "t_a": [316, 350, 924, 959], "t_b": [316, 350, 924, 959], "t_c": [316, 350, 924, 959], "t_d": [316, 350, 924, 959], "t_i": [497, 843, 1117, 1358], "t_id": [256, 350, 889, 959], "t_n": [282, 350, 651, 655, 657, 659, 661, 663, 666, 668, 670, 843, 908, 959], "t_struct": [316, 350, 924, 959], "tab_spann": [350, 354], "tab_stub": [350, 354], "tab_styl": [350, 354], "tabl": [7, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 39, 40, 41, 42, 130, 137, 144, 152, 153, 159, 164, 165, 189, 192, 193, 195, 198, 199, 254, 256, 274, 297, 302, 309, 318, 319, 350, 354, 822, 855, 887, 889, 918, 926, 959, 1368, 1369, 1370, 1371, 1373, 1374, 1385, 1386], "table_id": 198, "table_nam": [39, 41, 153, 189, 193, 297, 350, 918, 959], "table_path": [40, 152, 164, 165, 350], "table_styl": [41, 350], "table_typ": 198, "tableinfo": [189, 192, 201], "tablemerg": [40, 350], "tablenotfounderror": [40, 350], "tables_scale_100": [139, 149], "tabletyp": [198, 201], "tail": [238, 242, 350, 365, 682, 843, 959, 1139, 1269, 1358], "take": [41, 95, 144, 153, 159, 179, 180, 203, 233, 234, 240, 263, 266, 273, 274, 279, 350, 375, 447, 459, 470, 506, 513, 514, 556, 557, 589, 616, 618, 620, 685, 766, 768, 788, 790, 799, 843, 881, 883, 898, 904, 906, 959, 984, 1060, 1072, 1087, 1131, 1132, 1177, 1178, 1349, 1358, 1376], "taken": [575, 716, 1196, 1302], "talkin": [734, 1320], "tan": [843, 1358, 1379], "tand": 1379, "tangent": [371, 372, 745, 746, 843, 980, 981, 1331, 1332, 1358, 1383], "tanh": [274, 350, 843, 1358], "target": [1, 39, 40, 41, 42, 61, 153, 312, 350, 697, 712, 713, 726, 728, 729, 833, 965, 1283, 1298, 1299, 1312, 1314, 1315, 1381], "target_alia": [40, 350], "target_t": [39, 350], "task": [63, 865, 959], "tau": [496, 497, 843, 1116, 1117, 1358], "tb": [172, 174, 226, 350, 408, 1115, 1358], "tbl": [95, 137, 139, 149, 1388], "tbl0": 1373, "tbl1": [1371, 1373], "tbl2": [1371, 1373], "tbl3": 1371, "tbl4": 1371, "tbl_cell_numeric_align": [9, 11, 28], "tbl_col": 18, "tbl_format": [21, 203], "tbl_hide_column_data_typ": 21, "tbl_hide_dataframe_shap": 21, "tbl_row": [26, 218, 350, 869, 959], "tbl_width_char": 787, "td": 480, "td1": 965, "td2": 965, "td3": 965, "tdf": [273, 350], "technic": 839, "tell": [690, 714, 1276, 1300], "tempor": [100, 211, 240, 252, 282, 284, 285, 304, 350, 429, 480, 527, 651, 655, 657, 659, 661, 663, 666, 668, 670, 801, 843, 855, 861, 883, 908, 959, 965, 1042, 1097, 1145, 1358, 1379, 1385], "temporalliter": [429, 801, 802, 843, 1042, 1076, 1077, 1358], "temporari": [39, 350], "temporarili": [185, 203, 240, 282, 350, 651, 843, 883, 908, 959], "tenant": 34, "tenant_id": 34, "tend": [172, 174], "tensor": [312, 350, 1342, 1358], "tensordataset": [312, 350], "term": [496, 498, 499, 703, 716, 727, 843, 1116, 1118, 1119, 1289, 1302, 1313, 1358], "termin": [38, 48, 350, 959], "terminologi": 197, "test": [0, 39, 150, 151, 153, 159, 165, 225, 274, 350, 855, 1114, 1358, 1381], "test1": 1373, "test2": 1373, "test3": 1373, "test_1": [274, 350], "test_1_math": [274, 350], "test_1_phys": [274, 350], "test_2": [274, 350], "test_2_math": [274, 350], "test_2_phys": [274, 350], "test_data": 150, "test_df_height": 179, "test_func": 804, "test_lf": [931, 959], "test_miscellan": 1389, "test_numer": 1389, "test_price_calcul": 1389, "test_series_len": 183, "test_tabl": 151, "test_unique_xyz": 177, "testdb": 151, "testing1234": 1373, "text": [147, 150, 196, 424, 425, 695, 703, 707, 708, 709, 712, 713, 715, 716, 727, 823, 904, 959, 1033, 1034, 1289, 1293, 1294, 1301, 1302, 1313, 1373, 1389], "text1": 713, "text2": 713, "textclaus": 150, "texttt": [682, 843, 1269, 1358], "th": [234, 350, 514, 557, 570, 682, 703, 727, 843, 881, 959, 1132, 1178, 1191, 1269, 1289, 1313, 1358, 1381], "than": [41, 48, 49, 50, 51, 54, 103, 126, 134, 136, 148, 149, 150, 153, 159, 163, 169, 212, 239, 252, 254, 255, 259, 272, 283, 284, 286, 318, 336, 350, 424, 510, 512, 515, 517, 527, 541, 569, 588, 589, 590, 606, 638, 650, 673, 682, 703, 707, 710, 711, 719, 727, 736, 773, 805, 833, 843, 882, 887, 888, 942, 959, 1033, 1145, 1190, 1210, 1231, 1242, 1256, 1269, 1289, 1293, 1296, 1297, 1305, 1313, 1322, 1339, 1358, 1389], "the_aws_access_key_id": [40, 152, 164, 165, 350], "the_aws_region": [40, 350], "the_aws_secret_access_kei": [40, 152, 164, 165, 350], "thei": [38, 41, 48, 55, 63, 64, 96, 97, 133, 145, 163, 203, 255, 257, 285, 350, 631, 714, 722, 723, 843, 864, 875, 888, 902, 915, 959, 963, 965, 1300], "them": [63, 130, 132, 133, 134, 136, 150, 151, 153, 157, 158, 159, 160, 163, 166, 167, 168, 203, 227, 228, 240, 255, 266, 274, 282, 312, 320, 350, 387, 497, 527, 560, 623, 624, 631, 651, 771, 782, 783, 785, 786, 830, 831, 843, 865, 876, 883, 888, 898, 908, 959, 965, 996, 1117, 1122, 1181, 1219, 1220, 1358, 1376, 1386], "then1": 833, "then2": 833, "therebi": [163, 166, 167], "therefor": [54, 148, 154, 158, 160, 226, 350, 590, 843, 1115, 1358], "theta": [496, 498, 499, 843, 1116, 1118, 1119, 1358], "thi": [1, 4, 5, 11, 13, 15, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 62, 63, 64, 70, 71, 72, 73, 78, 88, 95, 97, 104, 130, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 197, 199, 203, 205, 207, 208, 209, 210, 213, 214, 216, 218, 219, 222, 223, 226, 228, 232, 233, 238, 239, 240, 241, 245, 247, 249, 250, 251, 252, 254, 255, 256, 257, 259, 260, 262, 264, 265, 266, 267, 269, 270, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 288, 289, 290, 291, 293, 295, 297, 298, 299, 302, 304, 307, 308, 309, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 331, 336, 349, 350, 353, 354, 362, 365, 366, 375, 387, 393, 394, 395, 400, 402, 419, 420, 423, 429, 439, 440, 442, 447, 448, 449, 459, 461, 467, 468, 470, 474, 477, 480, 491, 495, 502, 511, 512, 519, 521, 524, 525, 527, 531, 553, 554, 560, 569, 570, 571, 572, 573, 574, 576, 581, 582, 586, 587, 589, 590, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 608, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 631, 638, 641, 642, 643, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 675, 676, 677, 678, 683, 684, 685, 688, 690, 697, 700, 702, 704, 705, 709, 710, 711, 714, 721, 722, 723, 724, 725, 730, 734, 736, 738, 741, 748, 749, 751, 752, 753, 754, 758, 762, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 790, 791, 793, 795, 796, 799, 800, 801, 802, 805, 808, 810, 813, 815, 821, 824, 828, 832, 833, 834, 839, 843, 855, 858, 859, 860, 863, 864, 865, 866, 867, 869, 870, 872, 873, 874, 875, 879, 882, 883, 885, 887, 888, 889, 891, 893, 897, 898, 902, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 922, 923, 925, 926, 928, 929, 930, 931, 932, 933, 934, 937, 942, 956, 957, 958, 959, 963, 964, 965, 967, 974, 975, 984, 996, 1002, 1003, 1004, 1009, 1011, 1028, 1031, 1036, 1037, 1042, 1043, 1053, 1054, 1060, 1061, 1062, 1064, 1072, 1074, 1084, 1085, 1087, 1091, 1094, 1097, 1108, 1110, 1113, 1115, 1121, 1122, 1130, 1132, 1134, 1138, 1140, 1150, 1159, 1174, 1175, 1181, 1190, 1191, 1192, 1193, 1194, 1195, 1197, 1203, 1208, 1210, 1211, 1212, 1213, 1214, 1216, 1217, 1218, 1219, 1220, 1222, 1225, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1256, 1257, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1270, 1271, 1273, 1274, 1276, 1283, 1286, 1288, 1290, 1291, 1295, 1296, 1297, 1300, 1307, 1308, 1309, 1316, 1320, 1322, 1323, 1325, 1328, 1329, 1333, 1335, 1337, 1338, 1339, 1340, 1342, 1343, 1344, 1346, 1347, 1348, 1358, 1363, 1367, 1368, 1369, 1373, 1381, 1384, 1385, 1386, 1387, 1389], "thing": [163, 170], "think": [467, 468, 1084, 1085], "third": [589, 843], "thoma": [266, 350, 898, 959], "those": [5, 31, 41, 148, 153, 231, 278, 285, 309, 319, 350, 510, 641, 697, 805, 843, 905, 926, 959, 965, 1233, 1283, 1340, 1358], "though": [39, 150, 240, 350, 839, 883, 959], "thought": 833, "thousand": [9, 28], "thousands_separ": [9, 11, 28], "thread": [15, 38, 48, 63, 139, 148, 149, 151, 185, 186, 296, 350, 553, 590, 685, 766, 843, 865, 917, 959, 1004, 1174, 1197, 1271, 1358], "thread_loc": [590, 843], "thread_pool_s": 186, "three": [41, 208, 282, 311, 350, 440, 638, 651, 674, 703, 712, 727, 843, 908, 959, 1008, 1054, 1202, 1231, 1289, 1299, 1313, 1358], "threshold": [288, 350, 910, 959], "through": [150, 839, 965, 1358, 1373], "throughout": 203, "throw": [40, 132, 133, 136, 220, 279, 350, 705, 706, 861, 871, 906, 959, 1291, 1292, 1358], "thu": [41, 228, 350, 353, 773, 963, 1122, 1358], "thursdai": [240, 350, 447, 459, 768, 883, 959, 1060, 1072], "ti": [641, 843, 1233, 1358], "time": [13, 38, 40, 43, 47, 48, 49, 50, 51, 54, 61, 62, 63, 71, 73, 113, 152, 158, 160, 163, 164, 166, 167, 168, 179, 180, 183, 193, 218, 228, 240, 255, 256, 282, 320, 350, 382, 419, 420, 448, 449, 451, 452, 453, 456, 457, 467, 468, 470, 473, 474, 475, 477, 479, 480, 488, 491, 497, 548, 549, 581, 650, 651, 655, 657, 659, 661, 663, 666, 668, 670, 678, 726, 729, 733, 747, 748, 749, 771, 772, 782, 783, 784, 785, 786, 787, 793, 801, 830, 831, 843, 864, 865, 869, 883, 888, 889, 902, 908, 959, 965, 991, 1028, 1061, 1062, 1064, 1065, 1069, 1070, 1087, 1090, 1091, 1092, 1094, 1096, 1097, 1105, 1108, 1117, 1122, 1169, 1170, 1242, 1265, 1312, 1315, 1319, 1341, 1343, 1358, 1367, 1373, 1382, 1389], "time_column": [320, 350], "time_format": [38, 48, 350, 959], "time_unit": [71, 73, 449, 451, 457, 479, 491, 729, 784, 785, 786, 787, 793, 964, 965, 1062, 1064, 1070, 1096, 1108, 1315], "time_unit_m": [449, 1062], "time_unit_n": [449, 1062], "time_unit_u": 491, "time_zon": [71, 452, 454, 474, 729, 784, 785, 786, 964, 965, 1061, 1065, 1069, 1091, 1315], "timedelta": [240, 255, 282, 320, 350, 470, 475, 480, 488, 497, 651, 655, 657, 659, 661, 663, 666, 668, 670, 782, 783, 785, 786, 830, 831, 843, 883, 888, 908, 959, 964, 965, 1075, 1081, 1087, 1092, 1105, 1117, 1219, 1220, 1273, 1348, 1358], "timeout": [63, 865, 959], "timestamp": [137, 152, 164, 240, 350, 474, 475, 488, 793, 883, 959, 1091, 1092, 1105, 1379], "timestamp_m": 479, "timestamp_n": 1096, "timestamp_u": [479, 1096], "timestep": 793, "timeunit": [38, 48, 71, 73, 350, 449, 451, 479, 491, 729, 784, 785, 786, 787, 959, 965, 1062, 1064, 1096, 1108, 1315], "timezon": [71, 152, 164, 454, 965, 1382], "tip": [590, 843], "titl": [41, 350, 353, 1358, 1363, 1367], "titlecas": [734, 1320], "tm": [451, 480, 965, 1382], "to_arrow": [253, 350, 1339, 1358, 1386], "to_batch": [253, 350], "to_dict": [211, 285, 350, 861, 959, 965], "to_dummi": [307, 312, 350, 1358], "to_fram": [423, 457, 475, 479, 488, 726, 964, 1054, 1231, 1257, 1259, 1304, 1305, 1312, 1358, 1363], "to_init_repr": [137, 350, 1358], "to_jax": [312, 350, 1358], "to_list": [137, 282, 350, 1275, 1287, 1358], "to_lowercas": 622, "to_numpi": [307, 312, 350, 589, 843, 1358], "to_panda": [350, 1358], "to_phys": [843, 1036, 1358], "to_python": 964, "to_seri": [57, 235, 350, 726, 767, 818, 1312, 1381], "to_sql": [39, 350], "to_str": [477, 1094], "to_struct": [350, 698], "to_torch": [307, 350, 1358], "to_uppercas": [361, 621, 699, 843], "togeth": 1381, "token": [38, 43, 47, 48, 49, 50, 51, 158, 160, 163, 165, 166, 167, 168, 188, 193, 350, 959], "tokyo": [137, 965], "tokyo_tz": 965, "toler": [172, 173, 174, 175, 255, 350, 888, 959], "tone": [41, 350], "tonight": [690, 714, 1276, 1300], "too": [15, 274, 350, 407, 631, 843, 959, 1016], "tooltip": [350, 353, 1358, 1363], "toomanyrowsreturnederror": [283, 350], "top": [41, 297, 313, 350, 353, 749, 843, 918, 922, 959, 1358, 1363, 1386], "top_col": [41, 350], "top_k": [210, 350, 419, 420, 749, 843, 859, 959, 1028, 1358], "top_k_bi": [419, 420, 748, 843], "top_row": [41, 350], "tor_id": 137, "torch": [171, 312, 350, 1342, 1358], "torchexporttyp": [312, 350], "total": [41, 226, 331, 350, 481, 482, 483, 484, 485, 486, 487, 542, 562, 843, 937, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1115, 1163, 1183, 1358], "total_gross": 1367, "toward": [331, 542, 562, 843, 937, 1163, 1183, 1358], "tp": [1, 59], "tpu": [307, 350, 1337, 1358], "tr15": [709, 1295], "trace": 74, "traceback": [172, 173, 174, 175, 308, 350, 646, 843, 1238, 1339, 1358], "tracebacktyp": 1386, "track": [152, 164, 165, 259, 350, 581, 1386], "trail": [29, 238, 350, 721, 722, 1307, 1308], "train": [312, 350], "train_lf": [931, 959], "transfer": 151, "transferencod": [404, 405, 692, 693, 1013, 1014, 1278, 1279], "transform": [259, 297, 350, 589, 734, 822, 843, 918, 959, 1320], "transform_dens": [1358, 1363], "transit": [231, 278, 350, 879, 905, 959], "translat": 150, "transpar": [864, 875, 902, 915, 959], "transpos": [274, 350], "travel": [152, 164], "travers": [654, 656, 658, 660, 662, 665, 667, 669, 843, 1245, 1246, 1248, 1251, 1252, 1253, 1358], "treat": [148, 149, 163, 205, 497, 531, 689, 691, 701, 712, 713, 833, 843, 967, 1117, 1150, 1275, 1277, 1287, 1298, 1299, 1358], "tree": [606, 875, 959], "tree_format": [875, 959], "trend": [41, 350], "tri": [259, 350], "triangl": [336, 942], "trigger": [40, 145, 257, 309, 350, 843, 1340, 1358], "trigonometri": [1379, 1385], "trim": [137, 1381], "trim_decimal_zero": 29, "trip": 150, "true": [7, 8, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 54, 62, 63, 64, 95, 129, 130, 131, 132, 133, 135, 136, 137, 139, 144, 145, 148, 149, 150, 152, 153, 154, 156, 159, 160, 163, 164, 166, 168, 169, 172, 173, 174, 175, 176, 177, 179, 180, 182, 183, 188, 203, 207, 211, 212, 213, 218, 220, 225, 230, 231, 233, 235, 237, 238, 239, 240, 247, 248, 249, 252, 254, 255, 256, 257, 262, 263, 269, 270, 272, 274, 275, 278, 279, 283, 284, 285, 286, 288, 296, 297, 300, 303, 305, 307, 308, 309, 312, 314, 315, 316, 318, 319, 320, 324, 330, 332, 334, 337, 338, 339, 340, 341, 342, 343, 350, 353, 360, 361, 362, 363, 364, 365, 376, 378, 379, 382, 386, 387, 395, 399, 403, 404, 406, 409, 410, 415, 418, 420, 421, 422, 426, 434, 435, 436, 437, 438, 440, 447, 449, 452, 455, 457, 459, 460, 467, 468, 470, 471, 474, 475, 476, 479, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 493, 494, 495, 496, 498, 499, 506, 513, 515, 516, 517, 518, 521, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 544, 545, 549, 556, 558, 560, 576, 581, 588, 589, 590, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 625, 626, 628, 630, 633, 634, 638, 643, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 677, 678, 682, 684, 685, 688, 689, 690, 691, 692, 694, 700, 701, 702, 704, 705, 706, 712, 713, 717, 718, 720, 726, 728, 729, 731, 733, 737, 739, 740, 749, 751, 754, 757, 758, 759, 760, 761, 763, 766, 767, 768, 769, 773, 775, 782, 785, 791, 797, 801, 802, 809, 815, 818, 821, 822, 825, 827, 830, 833, 834, 843, 861, 862, 863, 864, 865, 869, 871, 875, 878, 879, 882, 883, 887, 888, 889, 891, 893, 897, 902, 905, 906, 910, 915, 917, 918, 923, 924, 925, 926, 929, 934, 936, 938, 940, 943, 944, 945, 946, 947, 948, 949, 958, 959, 964, 965, 972, 973, 985, 987, 988, 991, 995, 996, 1004, 1012, 1013, 1015, 1018, 1029, 1030, 1032, 1035, 1037, 1040, 1041, 1054, 1060, 1061, 1062, 1065, 1068, 1069, 1070, 1071, 1072, 1073, 1077, 1078, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1091, 1092, 1093, 1096, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1111, 1113, 1114, 1116, 1118, 1119, 1126, 1136, 1140, 1142, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1160, 1165, 1166, 1170, 1177, 1179, 1181, 1197, 1210, 1216, 1222, 1224, 1227, 1228, 1231, 1234, 1235, 1243, 1250, 1269, 1271, 1274, 1275, 1276, 1277, 1278, 1280, 1286, 1287, 1288, 1290, 1291, 1292, 1298, 1299, 1303, 1304, 1306, 1312, 1314, 1315, 1317, 1319, 1334, 1339, 1340, 1347, 1349, 1358, 1363, 1367, 1368, 1370, 1372, 1376, 1378, 1381, 1386, 1389], "truediv": [510, 843], "truncat": [21, 137, 148, 149, 163, 238, 240, 252, 284, 285, 304, 350, 883, 902, 959, 1385], "truncate_nod": [902, 959], "truncate_ragged_lin": [148, 149, 163], "truncate_str": 488, "truncate_td": 488, "trust": [442, 843, 870, 959], "try": [38, 43, 47, 48, 49, 50, 51, 62, 63, 123, 129, 148, 149, 154, 158, 160, 163, 166, 167, 168, 193, 350, 833, 864, 865, 875, 902, 915, 959], "try_cast": 1379, "try_parse_d": [139, 148, 149, 163], "try_parse_hive_d": [160, 166, 168], "ts_local": [474, 1091], "tseri": [467, 468, 1084, 1085], "tstamp": 965, "tstamp_tokyo": 965, "tstamp_utc": 965, "tue": [350, 353], "tuesdai": [240, 350, 883, 959], "tupl": [41, 65, 151, 153, 159, 208, 252, 259, 272, 283, 284, 285, 292, 312, 328, 350, 605, 647, 843, 902, 915, 959, 964, 965, 1239, 1261, 1358], "turn": [8, 48, 49, 50, 51, 62, 63, 129, 148, 149, 163, 254, 255, 350, 864, 865, 875, 887, 888, 893, 902, 959], "twice": [41, 350], "two": [41, 55, 96, 97, 132, 134, 136, 151, 208, 231, 233, 255, 256, 265, 266, 278, 284, 311, 317, 330, 336, 350, 354, 360, 444, 451, 510, 513, 516, 581, 638, 684, 764, 765, 771, 773, 775, 782, 785, 819, 820, 822, 843, 879, 888, 889, 897, 898, 905, 925, 936, 942, 959, 965, 1008, 1057, 1064, 1202, 1231, 1349, 1358, 1373, 1374, 1375, 1378, 1387], "two_a": 1386, "tworld": [723, 1307, 1309], "txt": [1, 13, 163, 689, 701, 1287, 1381], "type": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 40, 41, 48, 49, 50, 51, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 129, 130, 132, 133, 134, 135, 136, 138, 148, 149, 150, 152, 153, 157, 158, 159, 160, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 183, 205, 208, 214, 224, 227, 233, 238, 240, 241, 253, 254, 259, 282, 287, 290, 302, 307, 308, 311, 312, 315, 327, 350, 362, 364, 367, 368, 369, 370, 371, 372, 375, 380, 381, 382, 384, 387, 398, 399, 403, 404, 405, 406, 407, 408, 409, 421, 423, 424, 425, 429, 430, 431, 432, 433, 440, 441, 447, 448, 450, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 497, 500, 502, 513, 516, 519, 527, 528, 529, 530, 531, 532, 533, 542, 546, 547, 549, 554, 560, 562, 580, 581, 589, 590, 604, 638, 640, 644, 645, 646, 647, 649, 650, 651, 655, 657, 659, 661, 663, 666, 668, 670, 679, 680, 681, 688, 691, 692, 693, 696, 697, 698, 699, 702, 703, 704, 706, 707, 708, 716, 717, 718, 719, 726, 727, 731, 745, 746, 747, 754, 763, 771, 774, 781, 782, 783, 784, 785, 786, 787, 789, 797, 798, 800, 801, 802, 803, 804, 805, 815, 818, 829, 830, 831, 834, 839, 843, 855, 864, 865, 874, 875, 876, 883, 887, 902, 908, 909, 915, 923, 933, 959, 964, 967, 972, 973, 985, 987, 988, 989, 990, 991, 993, 995, 996, 1007, 1008, 1009, 1012, 1013, 1014, 1016, 1017, 1029, 1031, 1033, 1034, 1042, 1054, 1055, 1060, 1061, 1063, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1078, 1079, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1114, 1117, 1121, 1138, 1146, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1165, 1166, 1167, 1168, 1170, 1175, 1181, 1183, 1201, 1202, 1224, 1231, 1237, 1238, 1239, 1241, 1242, 1264, 1266, 1274, 1275, 1277, 1278, 1279, 1281, 1282, 1283, 1284, 1285, 1288, 1289, 1290, 1292, 1293, 1294, 1302, 1303, 1304, 1305, 1312, 1313, 1317, 1338, 1339, 1341, 1349, 1358, 1367, 1374, 1379, 1381, 1385, 1386], "type_coercion": [48, 49, 50, 51, 62, 63, 129, 864, 865, 875, 902, 915, 959], "type_json": 195, "type_nam": 195, "type_text": 195, "typeerror": [40, 350], "typenam": [41, 350], "typic": [133, 150, 168, 259, 350, 456, 679, 843, 965, 1069, 1210, 1266, 1358], "tz": [729, 1315], "tzinfo": [71, 152, 164, 965], "u": [41, 71, 73, 168, 181, 255, 350, 449, 451, 457, 479, 491, 726, 729, 759, 761, 784, 785, 786, 787, 793, 888, 959, 964, 965, 1062, 1064, 1070, 1096, 1108, 1312, 1315, 1371, 1382], "u1": [308, 350], "u16": [163, 1384, 1389], "u32": [13, 150, 209, 211, 217, 271, 326, 327, 331, 335, 341, 343, 350, 360, 366, 373, 374, 375, 376, 377, 380, 381, 383, 392, 408, 424, 425, 433, 434, 521, 523, 542, 546, 547, 550, 562, 567, 613, 629, 641, 649, 650, 655, 657, 659, 661, 663, 666, 668, 670, 674, 691, 701, 702, 707, 708, 709, 747, 752, 754, 758, 762, 766, 767, 774, 776, 797, 800, 813, 843, 858, 861, 868, 900, 932, 933, 937, 941, 947, 949, 959, 965, 984, 985, 986, 989, 990, 992, 1001, 1029, 1033, 1034, 1036, 1048, 1140, 1167, 1168, 1171, 1183, 1188, 1233, 1241, 1242, 1258, 1277, 1287, 1288, 1293, 1294, 1341, 1345, 1347, 1358, 1367, 1375, 1376, 1377, 1381, 1386], "u64": [241, 327, 350, 519, 643, 843, 902, 933, 959, 965, 1138, 1235, 1358], "u8": [211, 305, 306, 318, 350, 646, 757, 843, 861, 959, 965, 1238, 1334, 1358, 1389], "udf": [185, 259, 273, 336, 350, 442, 590, 635, 805, 843, 870, 901, 942, 959, 1210, 1358], "ufunc": 103, "uid": 150, "uint": 1389, "uint16": [163, 437, 438, 743, 843, 965, 1051, 1052, 1329, 1339, 1342, 1358], "uint2": 1384, "uint32": [138, 171, 211, 226, 282, 327, 350, 375, 380, 381, 408, 424, 425, 433, 497, 513, 516, 542, 546, 547, 562, 644, 649, 650, 651, 655, 657, 659, 661, 663, 666, 668, 670, 691, 702, 707, 708, 747, 774, 797, 800, 843, 861, 908, 933, 959, 965, 985, 989, 990, 1017, 1029, 1033, 1034, 1115, 1117, 1167, 1168, 1183, 1241, 1242, 1277, 1288, 1293, 1294, 1341, 1342, 1358], "uint4": 1386, "uint64": [138, 241, 282, 327, 350, 380, 381, 497, 519, 546, 547, 643, 651, 655, 657, 659, 661, 663, 666, 668, 670, 843, 908, 933, 959, 965, 989, 990, 1117, 1138, 1167, 1168, 1235, 1342, 1358], "uint8": [150, 211, 306, 307, 308, 318, 350, 437, 438, 646, 743, 757, 843, 861, 959, 964, 965, 1051, 1052, 1238, 1329, 1342, 1358, 1389], "uint8_pair": 1389, "uit": [716, 1302], "uk": [698, 1284], "unabl": [105, 153], "unalias": 596, "unari": [627, 843], "unbias": [498, 499, 843, 1118, 1119, 1358], "unchang": [226, 350, 645, 747, 843, 893, 942, 959, 1115, 1237, 1341, 1358], "uncompress": [36, 43, 44, 47, 49, 51, 154, 166, 350, 959], "undefin": [750, 843], "under": [38, 43, 47, 48, 49, 50, 51, 55, 57, 58, 59, 60, 96, 97, 158, 160, 163, 166, 167, 168, 191, 192, 193, 274, 297, 350, 835, 836, 838, 839, 844, 845, 848, 850, 851, 852, 918, 959, 1350, 1352, 1354, 1359, 1364, 1365, 1366], "underestim": [226, 350, 1115, 1358], "underli": [1, 55, 70, 71, 73, 88, 97, 102, 112, 130, 132, 133, 134, 136, 150, 151, 153, 157, 158, 159, 160, 167, 176, 179, 183, 227, 228, 252, 253, 284, 302, 308, 350, 404, 449, 450, 451, 455, 458, 460, 461, 462, 463, 464, 465, 466, 469, 471, 472, 474, 476, 480, 489, 490, 491, 492, 643, 671, 689, 692, 701, 843, 876, 959, 965, 1013, 1036, 1062, 1063, 1064, 1068, 1071, 1073, 1074, 1078, 1079, 1080, 1082, 1083, 1086, 1088, 1089, 1091, 1093, 1097, 1106, 1107, 1108, 1109, 1122, 1235, 1254, 1264, 1275, 1278, 1287, 1333, 1339, 1358, 1386], "understood": 805, "undo": [607, 614, 615, 617, 619, 621, 622], "unexpect": [112, 121, 150, 231, 278, 350, 589, 590, 843, 879, 905, 959, 1210, 1358], "unhelpfulli": [172, 174], "unicod": [21, 425, 703, 708, 709, 716, 727, 965, 1034, 1289, 1294, 1295, 1302, 1313, 1381], "unicodeform": [709, 1295], "unifi": [41, 307, 312, 350, 965], "uniform": [41, 350, 521, 638, 843, 1140, 1231, 1358], "unimod": [682, 843, 1269, 1358], "union": [62, 63, 64, 129, 573, 864, 865, 875, 902, 915, 959, 965, 1194, 1385, 1386], "uniqu": [47, 51, 56, 74, 145, 153, 176, 177, 178, 181, 183, 209, 249, 254, 270, 274, 285, 341, 350, 366, 377, 392, 440, 538, 567, 613, 638, 726, 728, 729, 733, 752, 754, 762, 813, 843, 858, 887, 947, 959, 975, 986, 1001, 1054, 1158, 1188, 1217, 1231, 1312, 1314, 1315, 1319, 1345, 1347, 1358, 1374, 1376], "unique_column_valu": [274, 350], "unique_count": [843, 1358], "uniquekeepstrategi": [315, 350, 923, 959], "unit": [41, 71, 73, 145, 172, 173, 174, 175, 179, 183, 226, 350, 408, 449, 451, 457, 473, 479, 491, 497, 503, 587, 602, 726, 729, 753, 770, 784, 785, 786, 787, 793, 843, 902, 959, 965, 1017, 1062, 1064, 1070, 1090, 1096, 1108, 1115, 1117, 1123, 1208, 1312, 1315, 1346, 1358, 1389], "uniti": [188, 189, 191, 192, 193, 201, 855], "unity_catalog": 196, "univers": [205, 967], "unix": [70, 71, 457, 488, 793, 1070, 1105], "unknown": [581, 697, 803, 1283], "unless": [41, 56, 132, 254, 307, 312, 350, 721, 722, 818, 887, 959, 1307, 1381], "unlik": [144, 240, 319, 350, 883, 926, 959], "unnam": [699, 1285], "unnest": [144, 350, 440, 638, 649, 698, 699, 718, 719, 739, 741, 754, 833, 843, 959, 1008, 1054, 1202, 1231, 1241, 1304, 1305, 1358, 1379, 1385], "unpivot": [265, 350, 897, 959], "unregist": [1369, 1370, 1371, 1386, 1388], "unsaf": [145, 843], "unset": [39, 160, 166, 178, 335, 350, 412, 413, 414, 416, 417, 474, 581, 843, 941, 1021, 1022, 1023, 1025, 1026, 1091, 1358, 1367], "unsign": [89, 90, 91, 92, 643, 843, 965, 1235, 1358], "unsigned_integ": 965, "unstabl": [32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 63, 72, 78, 127, 140, 141, 142, 143, 144, 150, 152, 158, 160, 163, 164, 165, 166, 167, 168, 169, 176, 177, 179, 180, 181, 182, 183, 184, 188, 189, 190, 191, 192, 193, 199, 297, 307, 312, 319, 350, 353, 354, 439, 440, 447, 459, 521, 590, 638, 652, 653, 655, 657, 659, 661, 663, 664, 666, 668, 670, 768, 770, 843, 864, 865, 875, 902, 915, 918, 926, 959, 1037, 1053, 1054, 1060, 1072, 1140, 1231, 1243, 1244, 1247, 1249, 1250, 1337, 1342, 1358, 1363], "unstack": 350, "unstackdirect": [318, 350], "unsuit": 128, "unsupport": [40, 350], "until": [48, 49, 50, 51, 95, 96, 240, 257, 350, 710, 711, 736, 883, 959, 1296, 1297, 1322], "up": [11, 41, 87, 151, 252, 255, 274, 284, 285, 291, 304, 350, 428, 429, 590, 703, 712, 713, 727, 843, 887, 888, 893, 913, 959, 965, 1039, 1289, 1298, 1299, 1313, 1358], "upcast": [365, 843], "upcast_integer_typ": [1, 59], "updat": [40, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 203, 218, 350, 869, 959], "updated_at": [194, 197, 198], "updated_bi": [194, 197, 198], "upgrad": 108, "upheld": [893, 959], "upon": 149, "upper": [148, 149, 150, 226, 240, 350, 429, 521, 527, 581, 616, 753, 763, 782, 783, 785, 786, 801, 802, 830, 831, 843, 883, 959, 1042, 1115, 1140, 1145, 1208, 1346, 1358, 1376, 1379], "upper_bound": [240, 350, 429, 527, 581, 843, 883, 959, 1042, 1145, 1208, 1358], "uppercas": [622, 735, 1321, 1381], "upsampl": [240, 350, 883, 959], "urandom": [408, 1017], "uri": [39, 40, 150, 151, 152, 164, 165, 350], "url": [150, 151, 160, 166, 168, 188, 697, 699, 1283, 1285], "urllib": 151, "us": [1, 7, 9, 10, 12, 13, 15, 21, 26, 28, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 62, 63, 64, 65, 71, 87, 96, 97, 100, 104, 127, 131, 133, 134, 136, 138, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 188, 209, 210, 211, 214, 218, 220, 222, 223, 229, 230, 231, 233, 239, 240, 247, 249, 251, 252, 253, 255, 259, 265, 269, 270, 272, 273, 274, 278, 282, 283, 284, 285, 286, 288, 289, 291, 296, 297, 298, 302, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 317, 318, 319, 320, 321, 324, 325, 326, 327, 329, 336, 350, 353, 360, 362, 364, 366, 375, 376, 399, 404, 405, 407, 420, 422, 424, 425, 426, 429, 439, 442, 445, 446, 454, 473, 474, 475, 477, 480, 488, 491, 493, 496, 497, 498, 499, 500, 504, 505, 506, 510, 525, 526, 527, 539, 553, 569, 577, 581, 583, 589, 590, 593, 614, 617, 619, 621, 622, 631, 638, 641, 643, 645, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 673, 675, 677, 678, 682, 684, 685, 687, 688, 689, 690, 692, 693, 694, 696, 697, 698, 700, 701, 702, 705, 706, 707, 708, 709, 712, 713, 714, 716, 718, 720, 722, 723, 724, 725, 726, 728, 729, 733, 736, 737, 741, 749, 755, 756, 758, 759, 760, 761, 762, 765, 766, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 791, 793, 797, 798, 800, 801, 803, 805, 806, 807, 809, 811, 812, 815, 818, 819, 820, 821, 822, 824, 825, 826, 827, 830, 831, 832, 833, 834, 839, 842, 843, 854, 855, 858, 859, 860, 861, 864, 865, 867, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 882, 883, 888, 891, 897, 902, 905, 908, 909, 910, 911, 913, 915, 917, 918, 919, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 942, 959, 963, 964, 965, 972, 973, 975, 1004, 1008, 1013, 1014, 1016, 1033, 1034, 1037, 1053, 1055, 1058, 1059, 1067, 1076, 1077, 1090, 1091, 1092, 1094, 1097, 1105, 1108, 1111, 1116, 1117, 1118, 1119, 1124, 1125, 1131, 1137, 1144, 1145, 1160, 1174, 1190, 1197, 1202, 1210, 1231, 1233, 1235, 1237, 1239, 1241, 1242, 1243, 1244, 1256, 1257, 1259, 1260, 1263, 1269, 1271, 1273, 1274, 1275, 1276, 1278, 1279, 1282, 1283, 1284, 1286, 1287, 1288, 1293, 1294, 1295, 1298, 1299, 1300, 1302, 1304, 1312, 1314, 1315, 1319, 1322, 1333, 1334, 1336, 1339, 1340, 1348, 1358, 1367, 1368, 1369, 1370, 1371, 1373, 1374, 1381, 1382, 1386, 1388, 1389], "usag": [179, 183, 294, 350, 833, 965, 1264, 1358], "usd": [238, 350, 1389], "use_abs_path": 145, "use_pyarrow": [47, 51, 148, 152, 154, 156, 160, 164, 308, 350, 959, 1339, 1358], "use_pyarrow_extension_arrai": [309, 350, 1340, 1358], "use_pyarrow_write_to_dataset": [47, 350], "use_statist": [160, 168], "user": [39, 143, 145, 150, 151, 205, 259, 273, 336, 350, 589, 590, 635, 675, 791, 805, 843, 901, 942, 959, 963, 967, 1210, 1260, 1358], "user_conn": 150, "usernam": [148, 151, 154, 156], "userwarn": 1, "usr": 150, "usual": [104, 151, 203, 312, 350, 448, 1061], "utc": [152, 164, 448, 452, 454, 456, 474, 726, 729, 964, 965, 1061, 1065, 1069, 1091, 1312, 1315], "utc_tz": 965, "utf": [38, 48, 86, 350, 959], "utf8": [21, 148, 149, 163, 703, 716, 727, 1289, 1302, 1313], "utf8_borders_onli": 21, "utf8_ful": [21, 56, 137], "utf8_full_condens": [7, 21, 137], "utf8_horizontal_onli": 21, "utf8_no_bord": 21, "util": [312, 350, 793, 959], "uvloop": 150, "uvw": [698, 1284], "v": [8, 9, 10, 47, 226, 350, 674, 759, 761, 843, 1258, 1358, 1370, 1371], "v1": 33, "v2": [8, 10, 154, 166], "val": [41, 281, 350, 590, 635, 747, 833, 843, 907, 959], "valid": [38, 41, 48, 71, 95, 143, 148, 150, 154, 156, 160, 163, 183, 203, 220, 226, 254, 255, 279, 350, 439, 689, 691, 697, 698, 699, 701, 706, 712, 713, 833, 843, 871, 887, 888, 906, 934, 959, 965, 1053, 1115, 1275, 1277, 1283, 1284, 1285, 1287, 1292, 1298, 1299, 1358, 1367, 1368], "validate_output_schema": [893, 959], "validate_schema": [95, 143], "vals_phys": [747, 843], "valu": [4, 5, 11, 12, 13, 14, 18, 21, 29, 31, 37, 38, 41, 47, 48, 51, 52, 54, 55, 56, 64, 65, 68, 74, 75, 83, 84, 93, 97, 106, 132, 133, 135, 136, 141, 148, 149, 150, 151, 160, 163, 166, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 203, 207, 209, 210, 211, 218, 222, 223, 225, 228, 229, 230, 231, 235, 238, 240, 241, 242, 246, 250, 252, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 270, 272, 274, 275, 276, 278, 279, 282, 283, 284, 285, 286, 293, 296, 298, 299, 300, 301, 303, 304, 308, 309, 313, 314, 317, 318, 319, 320, 321, 328, 331, 332, 334, 337, 338, 340, 341, 350, 353, 354, 358, 359, 360, 362, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 383, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 400, 401, 402, 404, 405, 406, 407, 408, 409, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 438, 439, 440, 443, 445, 446, 451, 455, 466, 471, 480, 489, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 544, 545, 546, 547, 550, 551, 552, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 574, 576, 577, 578, 579, 581, 582, 583, 585, 587, 588, 589, 590, 591, 592, 593, 598, 609, 610, 611, 612, 613, 623, 624, 625, 626, 629, 631, 632, 635, 636, 638, 639, 641, 644, 645, 646, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 676, 679, 680, 681, 682, 684, 685, 686, 688, 689, 691, 692, 693, 694, 695, 697, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 727, 736, 738, 742, 743, 745, 746, 748, 749, 750, 751, 752, 753, 754, 757, 758, 759, 760, 761, 762, 766, 769, 771, 772, 774, 776, 777, 778, 779, 780, 790, 791, 796, 797, 798, 799, 801, 802, 803, 806, 807, 808, 809, 810, 811, 812, 813, 817, 818, 819, 820, 826, 827, 833, 843, 858, 859, 869, 872, 873, 877, 878, 879, 883, 885, 886, 887, 888, 894, 895, 896, 897, 899, 900, 903, 904, 905, 906, 908, 914, 917, 919, 920, 922, 925, 926, 927, 937, 938, 940, 943, 944, 946, 947, 959, 965, 970, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989, 990, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1029, 1030, 1033, 1034, 1035, 1039, 1042, 1044, 1045, 1046, 1048, 1053, 1054, 1055, 1056, 1058, 1059, 1064, 1068, 1083, 1088, 1097, 1106, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1122, 1123, 1124, 1125, 1129, 1130, 1131, 1132, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1163, 1164, 1165, 1166, 1167, 1168, 1171, 1172, 1173, 1176, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1195, 1197, 1198, 1199, 1200, 1203, 1204, 1210, 1211, 1212, 1214, 1215, 1217, 1219, 1220, 1222, 1223, 1225, 1226, 1230, 1231, 1232, 1233, 1237, 1238, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1256, 1257, 1258, 1259, 1262, 1266, 1267, 1268, 1269, 1271, 1274, 1275, 1277, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1304, 1305, 1306, 1313, 1322, 1325, 1329, 1330, 1331, 1332, 1339, 1340, 1341, 1345, 1347, 1349, 1358, 1367, 1372, 1374, 1375, 1376, 1377, 1378, 1380, 1381, 1382, 1384, 1386, 1388, 1389], "value1": [685, 843], "value2": [685, 843], "value_a": 1386, "value_b": 1386, "value_count": [752, 843, 1358], "value_cum_sum": [438, 843], "value_cum_sum_all_fil": [438, 843], "value_nam": [265, 317, 350, 897, 925, 959], "value_var": [265, 317, 350, 897, 925, 959], "valueerror": [10, 16, 21], "valueexcept": 803, "var": [41, 184, 350, 669, 670, 843, 959, 1358, 1375], "var_samp": 1375, "vari": [153, 159, 448, 1061, 1389], "variabl": [31, 38, 43, 47, 48, 49, 50, 51, 62, 63, 83, 158, 160, 163, 166, 167, 168, 182, 185, 193, 265, 305, 317, 350, 864, 865, 875, 897, 902, 915, 925, 959, 1334, 1358, 1368, 1370, 1386], "variable_nam": [265, 317, 350, 897, 925, 959], "variad": 150, "varianc": [321, 350, 499, 539, 669, 670, 755, 832, 843, 927, 959, 1119, 1160, 1253, 1348, 1358, 1379], "variou": [150, 208, 214, 350, 843, 866, 959, 964, 965, 1358], "vector": [654, 656, 658, 660, 662, 665, 667, 669, 843, 1245, 1246, 1248, 1251, 1252, 1253, 1358], "vector_index_format": 196, "vectoris": [467, 468, 1084, 1085], "vein": 203, "verbos": [30, 172, 174, 203, 698, 1284], "veri": [150, 252, 314, 350, 590, 843, 942, 1380], "verifi": [255, 350, 888, 959], "versicolor": [350, 353], "version": [39, 40, 43, 44, 54, 61, 65, 131, 137, 148, 149, 152, 153, 154, 156, 160, 163, 164, 166, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 186, 193, 207, 209, 210, 219, 240, 241, 254, 265, 274, 282, 290, 297, 302, 307, 308, 312, 313, 320, 326, 331, 350, 353, 420, 439, 442, 447, 454, 467, 468, 480, 491, 496, 498, 499, 512, 519, 597, 598, 604, 608, 645, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 688, 696, 730, 741, 749, 756, 765, 768, 773, 817, 819, 820, 822, 843, 858, 859, 870, 875, 883, 887, 897, 904, 908, 912, 918, 922, 931, 932, 937, 959, 965, 1053, 1060, 1067, 1076, 1077, 1084, 1085, 1097, 1108, 1114, 1116, 1118, 1119, 1137, 1138, 1237, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1274, 1282, 1316, 1333, 1337, 1339, 1342, 1358, 1363, 1386], "versu": [218, 350, 869, 959], "vertic": [64, 228, 318, 322, 350, 688, 704, 1274, 1290], "vertical_relax": 64, "via": [31, 148, 149, 150, 154, 158, 160, 163, 166, 167, 168, 206, 208, 219, 252, 284, 350, 442, 590, 699, 843, 870, 904, 959, 968, 1285], "view": [200, 590, 843], "virtual": 145, "visibl": [18, 226, 350, 1115, 1358], "visit": [439, 843, 1053, 1358], "visual": [247, 249, 350, 605, 915, 959], "volk": 144, "vote": [697, 699, 1283, 1285], "vowel": [712, 713, 1298, 1299], "vstack": [64, 228, 350], "w": [41, 150, 240, 285, 350, 691, 695, 697, 699, 759, 761, 883, 959, 965, 1277, 1281, 1283, 1285, 1308, 1370, 1371, 1374], "w_i": [496, 498, 499, 843, 1116, 1118, 1119, 1358], "wa": [39, 43, 44, 61, 104, 137, 148, 149, 153, 154, 156, 160, 163, 166, 167, 168, 172, 173, 174, 175, 210, 219, 240, 254, 274, 282, 302, 307, 308, 313, 320, 350, 353, 420, 439, 442, 496, 498, 499, 646, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 714, 749, 787, 819, 820, 843, 859, 870, 883, 887, 908, 922, 959, 965, 1053, 1114, 1116, 1118, 1119, 1238, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1300, 1333, 1339, 1358, 1363, 1381, 1386], "wai": [96, 97, 130, 132, 133, 134, 136, 157, 158, 167, 239, 253, 273, 296, 329, 350, 475, 635, 685, 697, 774, 833, 839, 843, 867, 874, 882, 901, 909, 917, 928, 935, 942, 959, 963, 1092, 1283], "wait": [48, 49, 50, 51, 959], "walk": 772, "want": [63, 133, 135, 148, 153, 154, 158, 160, 163, 203, 228, 259, 270, 282, 297, 350, 424, 447, 459, 506, 589, 590, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 678, 690, 707, 712, 713, 714, 768, 777, 782, 785, 791, 815, 818, 834, 843, 865, 918, 934, 959, 965, 1033, 1060, 1072, 1122, 1210, 1276, 1293, 1298, 1299, 1300, 1358, 1373], "warehous": 151, "warn": [99, 100, 103, 104, 107, 114, 116, 117, 127, 165, 631, 801, 802, 843, 1358], "watermark": [47, 350], "wb": [41, 350], "we": [47, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 208, 218, 219, 240, 255, 274, 282, 320, 350, 353, 442, 470, 475, 488, 521, 553, 581, 589, 590, 651, 655, 657, 659, 661, 663, 666, 668, 670, 699, 712, 713, 731, 781, 782, 783, 784, 785, 786, 803, 830, 831, 833, 843, 869, 870, 879, 883, 888, 893, 905, 908, 959, 1087, 1092, 1105, 1140, 1174, 1210, 1285, 1299, 1317, 1358, 1363, 1370], "weather": [712, 713, 1298, 1299], "wed": [350, 353], "wednesdai": [240, 350, 477, 480, 883, 959, 1094, 1097], "week": [240, 255, 282, 320, 350, 447, 459, 470, 475, 488, 490, 497, 651, 655, 657, 659, 661, 663, 666, 668, 670, 768, 782, 783, 785, 786, 787, 830, 831, 843, 883, 888, 908, 959, 965, 1060, 1072, 1087, 1092, 1105, 1107, 1117, 1358, 1382], "week_mask": [447, 459, 768, 1060, 1072], "weekdai": [455, 471], "weekend": [447, 459, 768, 1060, 1072], "weekli": [240, 350, 488, 883, 959, 1105], "weghorst": [699, 1285], "weight": [144, 496, 497, 498, 499, 653, 654, 656, 658, 660, 662, 665, 667, 669, 682, 843, 1116, 1117, 1118, 1119, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1269, 1358], "wei\u00df": 1381, "well": [41, 148, 149, 150, 163, 350, 527, 822, 843, 1145, 1358, 1386], "were": [203, 645, 646, 839, 843, 1237, 1238, 1358], "west": [74, 256, 350, 889, 959], "what": [52, 208, 270, 350, 447, 589, 690, 714, 843, 1060, 1276, 1300], "whatev": 203, "when": [10, 11, 15, 18, 20, 24, 38, 39, 40, 41, 43, 44, 47, 48, 49, 50, 51, 52, 55, 71, 87, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 143, 144, 148, 149, 150, 151, 153, 154, 156, 158, 159, 160, 163, 164, 166, 167, 168, 169, 172, 173, 174, 175, 179, 183, 203, 210, 218, 224, 226, 228, 230, 231, 233, 240, 254, 256, 259, 266, 273, 279, 283, 285, 288, 289, 293, 296, 302, 305, 307, 308, 312, 313, 315, 319, 325, 350, 394, 407, 424, 425, 429, 447, 459, 496, 498, 499, 505, 574, 581, 602, 635, 645, 646, 676, 684, 685, 690, 696, 700, 702, 703, 707, 708, 714, 716, 721, 722, 723, 726, 727, 766, 768, 777, 791, 801, 843, 859, 869, 878, 883, 887, 889, 893, 898, 906, 910, 911, 914, 917, 922, 923, 926, 930, 956, 959, 1003, 1016, 1033, 1034, 1042, 1055, 1060, 1072, 1115, 1116, 1118, 1119, 1122, 1125, 1150, 1195, 1237, 1238, 1257, 1259, 1262, 1276, 1282, 1286, 1288, 1289, 1293, 1294, 1300, 1302, 1307, 1308, 1309, 1312, 1313, 1333, 1334, 1339, 1358, 1373, 1386], "when1": 833, "when2": 833, "when_matched_update_al": [40, 350], "when_not_matched_insert_al": [40, 350], "where": [41, 54, 56, 104, 150, 151, 153, 222, 223, 228, 231, 240, 252, 256, 265, 274, 278, 284, 297, 298, 307, 312, 317, 319, 321, 350, 376, 480, 490, 493, 495, 497, 506, 577, 583, 589, 626, 644, 674, 682, 685, 687, 714, 734, 755, 767, 773, 775, 819, 820, 822, 824, 832, 833, 843, 872, 873, 879, 883, 889, 897, 905, 918, 919, 925, 926, 927, 959, 985, 1097, 1107, 1111, 1113, 1117, 1122, 1126, 1222, 1258, 1269, 1273, 1300, 1320, 1348, 1349, 1358, 1367, 1375, 1385, 1386, 1388], "wherea": [148, 163, 282, 350, 422, 426, 475, 488, 623, 624, 651, 843, 908, 959, 1092, 1105, 1219, 1220, 1358], "wherev": [41, 259, 336, 350, 590, 843, 1210, 1358], "whether": [38, 48, 52, 54, 95, 134, 136, 143, 144, 153, 159, 160, 166, 168, 183, 187, 225, 251, 255, 291, 296, 350, 362, 364, 378, 379, 459, 460, 476, 518, 544, 545, 631, 675, 685, 700, 702, 766, 791, 843, 888, 893, 904, 913, 917, 959, 965, 972, 973, 987, 988, 1032, 1037, 1072, 1073, 1093, 1114, 1136, 1137, 1165, 1166, 1286, 1288, 1358, 1370, 1386], "which": [1, 6, 10, 11, 21, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 57, 58, 59, 60, 64, 133, 135, 148, 149, 150, 151, 152, 153, 158, 159, 160, 163, 164, 165, 166, 167, 168, 179, 182, 184, 203, 210, 211, 218, 219, 222, 223, 226, 228, 229, 239, 240, 245, 254, 255, 274, 282, 290, 307, 308, 313, 315, 319, 320, 350, 362, 399, 407, 442, 447, 459, 470, 475, 477, 488, 497, 503, 527, 529, 532, 534, 535, 536, 537, 581, 589, 590, 602, 604, 651, 655, 657, 659, 661, 663, 666, 668, 670, 713, 731, 768, 782, 783, 785, 786, 787, 801, 802, 830, 831, 833, 843, 859, 861, 864, 867, 869, 870, 872, 873, 874, 875, 883, 887, 888, 902, 904, 908, 912, 915, 922, 923, 926, 928, 959, 965, 1008, 1016, 1060, 1072, 1087, 1092, 1094, 1105, 1115, 1117, 1122, 1123, 1145, 1148, 1151, 1153, 1154, 1155, 1156, 1202, 1259, 1317, 1337, 1339, 1358, 1368, 1374, 1386, 1389], "while": [40, 63, 149, 152, 153, 164, 168, 179, 183, 193, 203, 252, 265, 314, 317, 319, 350, 425, 645, 708, 843, 865, 897, 925, 926, 959, 1034, 1237, 1294, 1358], "white": [41, 350], "whitespac": [137, 721, 722, 723, 1307, 1308, 1309, 1381], "whole": [589, 684, 685, 697, 843, 942, 959, 1283], "whose": [56, 98, 255, 274, 350, 500, 789, 843, 888, 959, 965], "why": [864, 875, 902, 915, 959], "wide": [150, 238, 265, 274, 317, 318, 350, 897, 925, 959], "width": [27, 41, 65, 148, 149, 163, 350, 353, 580, 770, 959, 1201, 1358, 1363], "wiki": 21, "wikipedia": 21, "wildcard": [145, 500, 737, 777, 778, 791, 817, 839, 843], "win_loss": [41, 350], "window": [148, 149, 163, 240, 282, 350, 439, 496, 498, 499, 590, 631, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 771, 819, 820, 843, 883, 908, 959, 1053, 1116, 1118, 1119, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1358], "window_s": [652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 819, 820, 843, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1358], "windowmappingstrategi": [631, 843], "winter": [700, 702, 712, 713, 1286, 1288], "wise": [41, 56, 150, 233, 350, 367, 368, 369, 370, 371, 372, 430, 431, 432, 501, 585, 679, 680, 681, 745, 746, 791, 817, 843, 976, 977, 978, 979, 980, 981, 1044, 1045, 1046, 1120, 1206, 1207, 1266, 1267, 1268, 1331, 1332, 1358], "wish": [210, 313, 350, 419, 420, 748, 749, 843, 859, 922, 959, 1028, 1343, 1358], "with_column": [1, 13, 59, 62, 63, 129, 143, 240, 273, 282, 312, 318, 325, 350, 359, 361, 376, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 392, 393, 394, 395, 399, 404, 405, 407, 408, 421, 422, 424, 425, 426, 429, 434, 435, 436, 437, 438, 440, 443, 447, 448, 450, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 489, 490, 492, 494, 495, 497, 504, 505, 510, 515, 517, 519, 525, 526, 527, 530, 531, 533, 534, 535, 536, 537, 541, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 588, 589, 590, 610, 612, 614, 615, 617, 619, 621, 622, 625, 626, 627, 631, 632, 635, 636, 638, 641, 645, 646, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 672, 676, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 730, 731, 732, 734, 735, 736, 738, 741, 742, 747, 750, 757, 759, 761, 764, 768, 769, 770, 771, 772, 777, 778, 780, 781, 783, 784, 788, 798, 801, 802, 804, 807, 809, 812, 823, 827, 829, 831, 833, 839, 843, 864, 865, 875, 883, 885, 901, 902, 908, 915, 930, 959, 965, 1054, 1091, 1231, 1288, 1358, 1386], "with_column_nam": 163, "with_columns_seq": [350, 959], "with_context": 959, "with_field": [590, 843], "with_replac": [286, 350, 569, 673, 843, 1190, 1256, 1358], "with_row_count": [350, 959], "with_row_index": [1, 282, 326, 350, 655, 657, 659, 661, 663, 666, 668, 670, 843, 932, 959, 1257, 1358, 1363], "within": [47, 65, 75, 83, 172, 173, 174, 175, 194, 195, 197, 239, 240, 241, 255, 282, 320, 350, 519, 641, 685, 843, 883, 888, 908, 959, 1138, 1358, 1386], "without": [1, 32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 61, 63, 72, 78, 104, 107, 137, 140, 141, 142, 143, 144, 152, 155, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 176, 177, 179, 180, 181, 182, 183, 184, 188, 189, 190, 191, 192, 193, 199, 254, 256, 297, 307, 308, 312, 318, 319, 350, 353, 354, 439, 440, 447, 459, 521, 590, 638, 652, 653, 655, 657, 659, 661, 663, 664, 666, 668, 670, 690, 700, 702, 714, 768, 770, 774, 801, 802, 821, 843, 864, 865, 887, 889, 918, 926, 959, 963, 1032, 1037, 1053, 1054, 1060, 1072, 1140, 1231, 1243, 1244, 1247, 1249, 1250, 1276, 1286, 1288, 1300, 1337, 1339, 1342, 1358, 1363, 1388], "without_fil": [152, 164, 165], "wod": [723, 1309], "womp": [316, 350, 924, 959], "word": [151, 712, 713, 722, 723, 734, 1320, 1381], "work": [41, 72, 78, 148, 149, 154, 158, 160, 169, 289, 325, 350, 362, 364, 400, 424, 425, 428, 429, 500, 509, 553, 582, 589, 590, 614, 615, 617, 619, 621, 622, 631, 703, 707, 708, 716, 727, 751, 801, 843, 904, 911, 930, 959, 963, 965, 972, 973, 1009, 1033, 1034, 1039, 1042, 1129, 1174, 1203, 1289, 1293, 1294, 1302, 1313, 1344, 1358], "workaround": 350, "workbook": [41, 153, 159, 350], "workday_raas_format": 196, "worker": [904, 959], "working_with_conditional_format": [41, 350], "working_with_sparklin": [41, 350], "worksheet": [41, 153, 159, 350], "workspac": 188, "workspace_url": 188, "world": [1, 21, 690, 714, 721, 722, 723, 965, 1181, 1276, 1300, 1307, 1308, 1309, 1369, 1372, 1381], "wors": [917, 959], "worth": [553, 1174], "worthwhil": [172, 174], "would": [103, 148, 149, 163, 208, 308, 312, 350, 353, 375, 386, 447, 459, 558, 589, 590, 601, 631, 641, 766, 768, 843, 984, 995, 1060, 1072, 1179, 1233, 1339, 1358, 1363, 1384], "wrap": [85, 137, 421, 527, 589, 843, 1029, 1358], "wrap_numer": [421, 843, 1029, 1358], "wrapper": [63, 865, 959], "writabl": [36, 38, 43, 44, 45, 46, 47, 290, 308, 350, 1339, 1358], "write": [36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 147, 149, 154, 203, 214, 350, 429, 605, 608, 843, 891, 915, 959, 965, 1042, 1358], "write_avro": 350, "write_clipboard": [147, 350], "write_csv": [37, 149, 163, 350], "write_databas": 350, "write_delta": 350, "write_excel": 350, "write_iceberg": 350, "write_ipc": [154, 350], "write_ipc_stream": 350, "write_json": 350, "write_markdown_frame_to_stdout": 203, "write_ndjson": [45, 350], "write_parquet": 350, "write_t": [47, 350], "write_to_dataset": [47, 350], "writeabl": [308, 350, 1339, 1358], "writer": [40, 350], "writer_properti": [40, 350], "writerproperti": [40, 350], "written": [6, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 290, 350, 604, 912, 959], "ww": [1381, 1388], "www": [709, 739, 1295], "x": [28, 56, 64, 87, 106, 131, 137, 148, 149, 151, 153, 159, 163, 176, 177, 179, 207, 226, 244, 247, 249, 254, 274, 284, 285, 314, 317, 318, 350, 353, 359, 361, 363, 382, 387, 408, 434, 441, 494, 495, 510, 515, 517, 519, 541, 548, 560, 586, 588, 589, 590, 610, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 630, 636, 644, 645, 646, 650, 679, 682, 718, 741, 742, 747, 750, 757, 759, 761, 764, 765, 771, 775, 777, 778, 780, 791, 803, 804, 807, 809, 812, 817, 822, 827, 833, 843, 887, 893, 916, 918, 925, 959, 964, 965, 996, 1036, 1048, 1125, 1144, 1210, 1237, 1238, 1266, 1269, 1304, 1337, 1341, 1342, 1358, 1363, 1370, 1371, 1374, 1380, 1381, 1386, 1388], "x00": [403, 404, 405, 406, 407, 409, 692, 1012, 1013, 1014, 1015, 1016, 1018, 1278], "x01": [407, 1016], "x05": [407, 1016], "x07": 408, "x1": 408, "x10": [407, 1016], "x80": 408, "x83": 408, "x88": 408, "x8e": 408, "x99": 408, "x_": [497, 843, 1117, 1358], "x_0": [318, 350, 496, 497, 498, 499, 843, 1116, 1117, 1118, 1119, 1358], "x_1": [318, 350, 497, 843, 1117, 1358], "x_2": [496, 498, 499, 843, 1116, 1118, 1119, 1358], "x_i": [497, 843, 1117, 1358], "x_invers": [636, 843], "x_pow_8": 1380, "x_round": 1380, "x_round_1": 1380, "x_squar": [636, 843], "x_t": [496, 498, 499, 843, 1116, 1118, 1119, 1358], "x_uniqu": [613, 843], "x_y": [387, 560], "xb": 408, "xb9neq": 408, "xbd": 408, "xc14": 408, "xd3": 408, "xdist": 1389, "xee": 408, "xf4v": 408, "xf9": 408, "xfb": 408, "xff": [403, 404, 405, 406, 409, 692, 1012, 1013, 1014, 1015, 1018, 1278], "xi": [698, 1284], "xl": 153, "xlog2": [612, 636, 843], "xlsb": 153, "xlsx": [41, 153, 350], "xlsx2csv": [153, 171], "xlsx2csv_option": 153, "xlsxwriter": [41, 171, 350], "xor": [418, 843, 1027, 1358, 1377], "xor_xi": [757, 843], "xx": [11, 57, 59, 183, 218, 245, 297, 350, 869, 959, 965, 1374, 1381, 1388], "xxx": [222, 350, 739, 872, 959], "xy": [57, 59], "xyz": [7, 17, 19, 20, 21, 22, 23, 24, 25, 26, 359, 691, 698, 843, 1277, 1284, 1335, 1358, 1381], "y": [28, 56, 64, 87, 106, 131, 137, 176, 177, 179, 207, 226, 247, 249, 254, 274, 284, 285, 314, 317, 318, 350, 353, 359, 361, 363, 382, 387, 408, 477, 480, 494, 495, 515, 517, 541, 548, 560, 588, 590, 613, 615, 617, 619, 621, 622, 625, 626, 630, 644, 645, 646, 650, 726, 728, 729, 741, 750, 757, 759, 761, 764, 765, 775, 780, 787, 803, 807, 809, 812, 822, 827, 843, 887, 916, 918, 925, 959, 964, 965, 996, 1036, 1094, 1097, 1237, 1238, 1312, 1314, 1315, 1358, 1363, 1374, 1381, 1382, 1388], "y_": [496, 497, 498, 499, 843, 1116, 1117, 1118, 1119, 1358], "y_0": [318, 350, 496, 497, 498, 499, 843, 1116, 1117, 1118, 1119, 1358], "y_1": [318, 350], "y_i": [497, 843, 1117, 1358], "y_mul": 741, "y_t": [496, 498, 499, 843, 1116, 1118, 1119, 1358], "y_uniqu": [613, 843], "ya": [716, 1302], "ya29": 165, "ye": 833, "year": [52, 54, 240, 255, 282, 297, 320, 350, 447, 459, 460, 461, 470, 471, 473, 475, 488, 489, 651, 655, 657, 659, 661, 663, 666, 668, 670, 768, 781, 782, 783, 784, 785, 786, 830, 831, 843, 883, 888, 908, 959, 965, 1060, 1072, 1073, 1074, 1087, 1088, 1090, 1092, 1105, 1106, 1382], "yellow": [350, 354, 403, 404, 405, 406, 409], "yield": [134, 136, 148, 149, 150, 163, 226, 228, 251, 314, 350, 510, 589, 631, 843, 959, 1115, 1122, 1358], "you": [1, 11, 15, 41, 47, 51, 56, 63, 64, 130, 132, 133, 134, 135, 136, 145, 148, 149, 150, 151, 153, 154, 157, 158, 160, 163, 167, 169, 203, 210, 228, 231, 240, 251, 252, 255, 259, 270, 274, 278, 282, 283, 284, 285, 297, 304, 307, 313, 314, 315, 317, 336, 350, 353, 419, 420, 424, 447, 459, 467, 468, 470, 474, 477, 480, 500, 506, 527, 553, 581, 589, 590, 605, 631, 636, 643, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 678, 690, 707, 712, 713, 714, 734, 737, 748, 749, 768, 777, 782, 785, 787, 791, 801, 805, 815, 818, 822, 834, 843, 859, 865, 879, 883, 888, 904, 905, 908, 915, 918, 922, 923, 925, 934, 942, 959, 963, 965, 1028, 1033, 1060, 1072, 1084, 1085, 1091, 1094, 1097, 1122, 1145, 1174, 1210, 1229, 1235, 1276, 1293, 1298, 1299, 1300, 1320, 1337, 1343, 1358, 1363, 1368, 1373, 1389], "your": [39, 41, 55, 56, 97, 143, 148, 149, 150, 151, 153, 169, 203, 252, 254, 259, 284, 285, 288, 304, 324, 329, 336, 350, 353, 452, 497, 512, 590, 699, 726, 728, 729, 736, 805, 843, 887, 893, 910, 929, 935, 942, 959, 963, 1065, 1117, 1210, 1285, 1312, 1314, 1315, 1322, 1358, 1363, 1389], "yy": [11, 57, 59, 183, 218, 245, 297, 350, 869, 959, 965, 1374, 1381, 1388], "yyi": [222, 350, 739, 872, 959], "yyyi": [41, 350], "yz": [57, 59], "z": [41, 64, 87, 137, 177, 226, 247, 249, 254, 284, 285, 314, 317, 318, 350, 359, 361, 363, 519, 548, 590, 615, 617, 619, 621, 622, 630, 644, 645, 646, 690, 698, 700, 702, 714, 726, 729, 759, 761, 780, 807, 809, 812, 818, 822, 827, 843, 887, 916, 918, 925, 959, 964, 965, 1125, 1237, 1238, 1276, 1284, 1286, 1288, 1300, 1312, 1315, 1358, 1370, 1374, 1386, 1388], "z_0": [318, 350], "z_1": [318, 350], "zap": 965, "zero": [29, 41, 130, 131, 146, 148, 149, 154, 156, 160, 178, 181, 207, 230, 240, 252, 283, 297, 302, 308, 309, 350, 505, 581, 586, 674, 682, 736, 750, 843, 862, 878, 883, 959, 1041, 1125, 1202, 1269, 1322, 1333, 1339, 1340, 1358, 1380, 1386], "zero_copy_onli": [1339, 1358], "zfill": [711, 757, 843, 1297], "zip": 1389, "zip_with": [233, 350, 1358], "zone": [71, 179, 180, 183, 448, 452, 474, 497, 729, 784, 785, 786, 843, 965, 1061, 1065, 1091, 1117, 1315, 1358], "zoneinfo": [71, 965], "zoom": [41, 350], "zstd": [40, 43, 44, 47, 49, 51, 350, 959], "zz": [183, 218, 245, 297, 350, 869, 959, 1374, 1381, 1388], "zzz": 739, "\u03bc": [137, 211, 240, 252, 282, 284, 285, 304, 320, 350, 448, 449, 451, 452, 453, 454, 456, 458, 462, 464, 465, 467, 468, 469, 470, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 491, 651, 655, 657, 659, 661, 663, 666, 668, 670, 726, 729, 784, 785, 786, 787, 793, 843, 861, 883, 908, 959, 965, 1061, 1062, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1077, 1078, 1082, 1084, 1085, 1086, 1087, 1091, 1092, 1095, 1096, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1108, 1312, 1315, 1381], "\u0441\u0438\u043d\u0438\u0439": 1381, "\u0967\u096f\u096f\u096f": 965, "\u0968\u0966\u096d\u096d": 965, "\u4eac\u90fd": 965, "\u5927\u962a": 965, "\u6771\u4eac": [424, 425, 707, 708, 965, 1033, 1034, 1293, 1294], "\u90fd\u5e02": 965, "\uff4b\uff41\uff44\uff4f\uff4b\uff41\uff57\uff41": [709, 1295], "\uff54\uff45\uff53\uff54": 1381, "\ud835\udd4b\ud835\udd56\ud835\udd64\ud835\udd65": 1381, "\ud835\udd7f\ud835\udd8a\ud835\udd98\ud835\udd99": 1381, "\ud835\udde7\ud835\uddf2\ud835\ude00\ud835\ude01": 1381, "\ud835\udf0b": 1380}, "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_engine_affinity", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.CredentialProvider", "polars.CredentialProviderAWS", "polars.CredentialProviderAzure", "polars.CredentialProviderGCP", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_iceberg", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.PartitionByKey", "polars.PartitionMaxSize", "polars.PartitionParted", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Field", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int128", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.defer", "polars.disable_string_cache", "polars.enable_string_cache", "polars.escape_regex", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.explain_all", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.io.partition.BasePartitionContext", "polars.io.partition.KeyedPartition", "polars.io.partition.KeyedPartitionContext", "polars.io.plugins.register_io_source", "polars.json_normalize", "polars.plugins.register_plugin_function", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_metadata", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "polars.Catalog", "polars.Catalog.get_table_info", "polars.Catalog.list_catalogs", "polars.Catalog.list_namespaces", "polars.Catalog.list_tables", "polars.Catalog.scan_table", "polars.catalog.unity.CatalogInfo", "polars.catalog.unity.ColumnInfo", "polars.catalog.unity.DataSourceFormat", "polars.catalog.unity.NamespaceInfo", "polars.catalog.unity.TableInfo", "polars.catalog.unity.TableInfo.get_polars_schema", "polars.catalog.unity.TableType", "Catalog", "Unity Catalog", "Config", "Aggregation", "polars.DataFrame.__array__", "polars.DataFrame.__arrow_c_stream__", "polars.DataFrame.__dataframe__", "polars.DataFrame.__getitem__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nans", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.join_where", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.remove", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unpivot", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.reinterpret", "polars.Expr.bin.size", "polars.Expr.bin.starts_with", "polars.Expr.bitwise_and", "polars.Expr.bitwise_count_ones", "polars.Expr.bitwise_count_zeros", "polars.Expr.bitwise_leading_ones", "polars.Expr.bitwise_leading_zeros", "polars.Expr.bitwise_or", "polars.Expr.bitwise_trailing_ones", "polars.Expr.bitwise_trailing_zeros", "polars.Expr.bitwise_xor", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.ends_with", "polars.Expr.cat.get_categories", "polars.Expr.cat.len_bytes", "polars.Expr.cat.len_chars", "polars.Expr.cat.starts_with", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_business_day", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.index_of", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_literal", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.show_graph", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.replace_strict", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_kurtosis", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.escape_regex", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.extract_many", "polars.Expr.str.find", "polars.Expr.str.find_many", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.normalize", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.unnest", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_arr", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.linear_space", "polars.linear_spaces", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nans", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.join_where", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.remote", "polars.LazyFrame.remove", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.unpivot", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.engine_config.GPUEngine", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "polars.lazyframe.in_process.InProcessQuery.cancel", "polars.lazyframe.in_process.InProcessQuery.fetch", "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "Attributes", "Descriptive", "GPUEngine", "GroupBy", "InProcessQuery", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.__array__", "polars.Series.__arrow_c_stream__", "polars.Series.__getitem__", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.approx_n_unique", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.backward_fill", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.reinterpret", "polars.Series.bin.size", "polars.Series.bin.starts_with", "polars.Series.bitwise_and", "polars.Series.bitwise_count_ones", "polars.Series.bitwise_count_zeros", "polars.Series.bitwise_leading_ones", "polars.Series.bitwise_leading_zeros", "polars.Series.bitwise_or", "polars.Series.bitwise_trailing_ones", "polars.Series.bitwise_trailing_zeros", "polars.Series.bitwise_xor", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.ends_with", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.len_bytes", "polars.Series.cat.len_chars", "polars.Series.cat.starts_with", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.count", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_business_day", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.eq", "polars.Series.eq_missing", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.first", "polars.Series.flags", "polars.Series.floor", "polars.Series.forward_fill", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.ge", "polars.Series.get_chunks", "polars.Series.gt", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.index_of", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.last", "polars.Series.le", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.lt", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.ne", "polars.Series.ne_missing", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.pow", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.replace_strict", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_kurtosis", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.escape_regex", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.extract_many", "polars.Series.str.find", "polars.Series.str.find_many", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.normalize", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Operators", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Bitwise", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "Types", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "titleterms": {"BY": [1374, 1387], "IF": 1378, "__array__": [205, 967], "__arrow_c_stream__": [206, 968], "__dataframe__": 207, "__getitem__": [208, 969], "__iter__": 328, "ab": [358, 970, 1380], "aco": 1383, "acosd": 1383, "add": 359, "add_business_dai": [447, 1060], "agg": [329, 935], "agg_group": 360, "aggreg": [204, 357, 857, 966, 1375], "alia": [361, 971], "alias": [1375, 1380, 1381], "align_fram": 56, "all": [330, 362, 378, 544, 758, 936, 972, 987, 1165, 1387], "all_horizont": 759, "and_": 363, "ani": [364, 379, 545, 760, 973, 988, 1166], "any_horizont": 761, "api": [1, 57, 58, 59, 60, 855, 1386], "append": [365, 974], "approx_n_uniqu": [209, 366, 762, 858, 975], "arang": 763, "arcco": [367, 976], "arccosh": [368, 977], "arcsin": [369, 978], "arcsinh": [370, 979], "arctan": [371, 980], "arctan2": 764, "arctan2d": 765, "arctanh": [372, 981], "arg_max": [373, 380, 546, 982, 989, 1167], "arg_min": [374, 381, 547, 983, 990, 1168], "arg_sort": [375, 984], "arg_sort_bi": 766, "arg_tru": [376, 985], "arg_uniqu": [377, 986], "arg_wher": 767, "arr": [378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "arrai": [65, 835, 1350, 1376], "array_agg": 1376, "array_contain": 1376, "array_get": 1376, "array_length": 1376, "array_low": 1376, "array_mean": 1376, "array_revers": 1376, "array_sum": 1376, "array_to_str": 1376, "array_uniqu": 1376, "array_upp": 1376, "asin": 1383, "asind": 1383, "assert": 1389, "assert_frame_equ": 172, "assert_frame_not_equ": 173, "assert_series_equ": 174, "assert_series_not_equ": 175, "atan": 1383, "atan2": 1383, "atan2d": 1383, "atand": 1383, "attribut": [345, 954, 1351], "avail": 1, "avg": 1375, "avro": 856, "backward_fil": [402, 1011], "base_utc_offset": [448, 1061], "basepartitioncontext": 140, "batched_read": 139, "batchedcsvread": 139, "bin": [403, 404, 405, 406, 407, 408, 409, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "binari": [66, 836, 849, 1352], "bit_and": 1377, "bit_count": 1377, "bit_length": 1381, "bit_or": 1377, "bit_xor": 1377, "bitwis": 1377, "bitwise_and": [410, 1019], "bitwise_count_on": [411, 1020], "bitwise_count_zero": [412, 1021], "bitwise_leading_on": [413, 1022], "bitwise_leading_zero": [414, 1023], "bitwise_or": [415, 1024], "bitwise_trailing_on": [416, 1025], "bitwise_trailing_zero": [417, 1026], "bitwise_xor": [418, 1027], "boolean": [67, 837, 1353], "bottom_k": [210, 419, 859, 1028], "bottom_k_bi": 420, "build_info": 61, "business_day_count": 768, "cach": 860, "cancel": 951, "cast": [211, 421, 861, 1029, 1384], "cast_time_unit": [449, 1062], "cat": [422, 423, 424, 425, 426, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "catalog": [188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "cataloginfo": 194, "categor": 68, "categori": [838, 1354], "categoricalremappingwarn": 99, "cbrt": [427, 1038, 1380], "ceil": [428, 1039, 1380], "centuri": [450, 1063], "chronoformatwarn": 100, "chunk_length": 1040, "claus": 1374, "clear": [212, 862, 1041], "clip": [429, 1042], "clipboard": 856, "clone": [213, 863, 1043], "cloud": 856, "co": [430, 1044, 1383], "coalesc": [769, 1378], "col": 839, "collect": 864, "collect_al": 62, "collect_all_async": 63, "collect_async": 865, "collect_schema": [214, 866], "column": [176, 177, 215, 840, 867], "columninfo": 195, "columnnotfounderror": 101, "combin": [451, 1064], "comparison": [849, 1362], "comput": [346, 841, 1355], "computeerror": 102, "concat": [64, 548, 688, 1169, 1274, 1381], "concat_arr": 770, "concat_list": 771, "concat_str": 772, "concat_w": 1381, "condit": 1378, "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 203], "conjunct": 849, "contain": [382, 403, 549, 689, 991, 1012, 1170, 1275], "contains_ani": [690, 1276], "context": 203, "convers": 854, "convert_time_zon": [452, 1065], "corr": [216, 773], "cosd": 1383, "cosh": [431, 1045], "cot": [432, 1046, 1383], "cotd": 1383, "count": [217, 331, 433, 774, 868, 937, 1047, 1375], "count_match": [383, 550, 691, 992, 1171, 1277], "cov": 775, "creat": 1388, "create_list_strategi": 178, "credenti": 856, "credentialprovid": 32, "credentialprovideraw": 33, "credentialproviderazur": 34, "credentialprovidergcp": 35, "csv": [139, 856], "cum_count": [434, 776, 1048], "cum_fold": 777, "cum_max": [435, 1049], "cum_min": [436, 1050], "cum_prod": [437, 1051], "cum_reduc": 778, "cum_sum": [438, 779, 1052], "cum_sum_horizont": 780, "cumulative_ev": [439, 1053], "customufuncwarn": 103, "cut": [440, 1054], "dai": [455, 1068], "data": 355, "databas": 856, "datafram": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 179, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 350], "dataorientationwarn": 104, "dataset": 856, "datasourceformat": 196, "datatyp": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 355], "date": [70, 453, 781, 1066, 1381], "date_part": 1382, "date_rang": [782, 783], "datetim": [71, 454, 784, 1067], "datetime_rang": [785, 786], "decim": 72, "decod": [404, 692, 1013, 1278], "decor": 203, "defer": 95, "degre": [441, 1383], "delet": 1388, "delta": 856, "describ": [218, 869, 1055], "descript": [347, 955, 1356], "deseri": [219, 442, 870], "diff": [443, 551, 1056, 1172], "disable_string_cach": 96, "distinct": 1374, "div": 1380, "document": 1386, "dot": [444, 1057], "drop": [220, 871, 1388], "drop_in_plac": 221, "drop_nan": [222, 445, 872, 1058], "drop_nul": [223, 446, 552, 873, 1059, 1173], "dst_offset": [456, 1069], "dt": [447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109], "dtype": [180, 224, 874, 1110], "duplicateerror": 105, "durat": [73, 787], "element": 788, "enable_string_cach": 97, "encod": [405, 693, 1014, 1279], "ends_with": [406, 422, 694, 1015, 1030, 1280, 1381], "engine_config": 934, "entropi": [493, 1111], "enum": 74, "epoch": [457, 1070], "eq": [494, 594, 1112], "eq_miss": [495, 1113], "equal": [225, 1114], "error": 356, "escape_regex": [98, 695, 1281], "estimated_s": [226, 1115], "eval": [553, 1174], "ewm_mean": [496, 1116], "ewm_mean_bi": [497, 1117], "ewm_std": [498, 1118], "ewm_var": [499, 1119], "exampl": [1, 965, 1389], "excel": 856, "except": [99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 356, 1387], "exclud": [500, 789], "execut": 1367, "execute_glob": 1368, "exp": [501, 1120, 1380], "explain": [875, 1388], "explain_al": 129, "explod": [227, 384, 502, 554, 696, 876, 993, 1121, 1175, 1282], "export": [348, 1357], "expr": [358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757], "express": [843, 963, 1386], "extend": [1, 228, 1122], "extend_const": [503, 1123], "extract": [697, 1283, 1382], "extract_al": [698, 1284], "extract_group": [699, 1285], "extract_mani": [700, 1286], "feather": 856, "fetch": 952, "fetch_block": 953, "field": [75, 737, 1323, 1324], "fill_nan": [229, 504, 877, 1124], "fill_nul": [230, 505, 878, 1125], "filter": [231, 506, 879, 1126], "find": [701, 1287], "find_mani": [702, 1288], "first": [332, 385, 507, 555, 790, 880, 938, 994, 1127, 1176, 1375], "flag": [232, 1128], "flatten": 508, "float32": 76, "float64": 77, "floor": [509, 1129, 1380], "floordiv": 510, "fold": [233, 791], "format": 792, "forward_fil": [511, 1130], "frame": 1386, "from": 1374, "from_arrow": 130, "from_datafram": 131, "from_dict": [132, 133], "from_epoch": 793, "from_json": 512, "from_numpi": 134, "from_panda": 135, "from_record": 136, "from_repr": 137, "function": [1, 842, 854, 965, 1379], "gather": [513, 556, 1131, 1177], "gather_everi": [234, 514, 557, 881, 1132, 1178], "ge": [515, 1133], "get": [386, 516, 558, 995, 1179], "get_categori": [423, 1031], "get_chunk": 1134, "get_column": [235, 237], "get_column_index": 236, "get_index_typ": 138, "get_polars_schema": 199, "get_table_info": 189, "glimps": 238, "global": 1386, "gpuengin": [934, 956], "greatest": 1378, "group": [794, 1374], "group_bi": [239, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 882, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950], "group_by_dynam": [240, 883], "groupbi": [328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 349, 957], "gt": [517, 1135], "has_multiple_output": 595, "has_nul": [518, 1136], "has_valid": 1137, "hash": [519, 1138], "hash_row": 241, "have": 1374, "head": [242, 333, 520, 559, 703, 795, 884, 939, 1139, 1180, 1289], "height": 243, "helper": 1389, "hist": [521, 1140], "hour": [458, 1071], "hstack": 244, "iceberg": 856, "ifnul": 1378, "implod": [522, 796, 1141], "import": 965, "in_process": [951, 952, 953], "index": 0, "index_of": [523, 1142], "initcap": 1381, "inprocessqueri": [951, 952, 953, 958], "input": 856, "insert_column": 245, "inspect": [524, 885], "instanc": 203, "int128": 78, "int16": 79, "int32": 80, "int64": 81, "int8": 82, "int_rang": [797, 798], "interfac": 1385, "interpol": [246, 525, 886, 1143], "interpolate_bi": [526, 1144], "intersect": 1387, "introduct": 1386, "invalidoperationerror": 106, "io": [139, 140, 141, 142, 143, 963], "ipc": 856, "is_between": [527, 1145], "is_business_dai": [459, 1072], "is_column": 596, "is_column_select": 597, "is_dupl": [247, 528, 1146], "is_empti": [248, 1147], "is_finit": [529, 1148], "is_first_distinct": [530, 1149], "is_in": [531, 1150], "is_infinit": [532, 1151], "is_last_distinct": [533, 1152], "is_leap_year": [460, 1073], "is_liter": 598, "is_loc": 1032, "is_nan": [534, 1153], "is_not_nan": [535, 1154], "is_not_nul": [536, 1155], "is_nul": [537, 1156], "is_regex_project": 599, "is_sort": 1157, "is_uniqu": [249, 538, 1158], "iso_year": [461, 1074], "item": [250, 1159], "iter_column": 251, "iter_row": 252, "iter_slic": 253, "join": [254, 387, 560, 704, 887, 996, 1181, 1290, 1374], "join_asof": [255, 888], "join_wher": [256, 889], "json": 856, "json_decod": [705, 1291], "json_encod": [738, 1325], "json_norm": 144, "json_path_match": [706, 1292], "keep": 614, "keyedpartit": 141, "keyedpartitioncontext": 142, "kurtosi": [539, 1160], "lake": 856, "last": [334, 388, 540, 561, 799, 890, 940, 997, 1161, 1182, 1375], "lazi": [257, 891], "lazyfram": [48, 49, 50, 51, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 959], "lazygroupbi": [935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950], "le": [541, 1162], "least": 1378, "left": 1381, "len": [335, 542, 562, 800, 941, 1163, 1183], "len_byt": [424, 707, 1033, 1293], "len_char": [425, 708, 1034, 1294], "length": 1381, "limit": [258, 543, 892, 1164, 1374], "linear_spac": [801, 802], "list": [83, 181, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 844, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1359], "list_catalog": 190, "list_namespac": 191, "list_tabl": 192, "lit": 803, "ln": 1380, "load": [2, 203], "load_from_fil": 3, "load_profil": 182, "log": [584, 1205, 1380], "log10": [585, 1206, 1380], "log1p": [586, 1207, 1380], "log2": 1380, "lower": 1381, "lower_bound": [587, 1208], "lt": [588, 1209], "ltrim": 1381, "manag": 203, "manipul": [352, 847, 961, 1361], "map": 615, "map_batch": [589, 804, 893], "map_el": [590, 1210], "map_field": 616, "map_group": [336, 805, 942], "map_row": 259, "mapwithoutreturndtypewarn": 107, "math": 1380, "max": [260, 337, 389, 563, 591, 806, 894, 943, 998, 1075, 1184, 1211, 1375], "max_horizont": [261, 807], "mean": [262, 338, 564, 592, 808, 895, 944, 1076, 1185, 1212], "mean_horizont": [263, 809], "median": [264, 339, 390, 565, 593, 810, 896, 945, 999, 1077, 1186, 1213, 1375], "melt": [265, 897], "merge_sort": [266, 898], "meta": [594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 845], "metadata": 962, "method": 1386, "microsecond": [462, 1078], "millennium": [463, 1079], "millisecond": [464, 1080], "min": [267, 340, 391, 566, 609, 811, 899, 946, 1000, 1081, 1187, 1214, 1375], "min_horizont": [268, 812], "minut": [465, 1082], "miscellan": [351, 846, 854, 960, 1360], "mod": [610, 1380], "mode": [611, 1215], "moduleupgraderequirederror": 108, "month": [466, 1083], "month_end": [467, 1084], "month_start": [468, 1085], "mul": 612, "multipl": [203, 854], "n_chunk": [269, 1216], "n_uniqu": [270, 341, 392, 567, 613, 813, 947, 1001, 1188, 1217], "name": [614, 615, 616, 617, 618, 619, 620, 621, 622, 840, 848, 1218, 1387], "namespaceinfo": 197, "nan_max": [623, 1219], "nan_min": [624, 1220], "nanosecond": [469, 1086], "ne": [600, 625, 1221], "ne_miss": [626, 1222], "neg": 627, "nest": 355, "new": 1, "new_from_index": 1223, "next_batch": 139, "nodataerror": 109, "normal": [709, 1295, 1381], "norowsreturnederror": 110, "not_": [628, 1224], "nth": 814, "null": 84, "null_count": [271, 629, 900, 1225], "nullif": 1378, "numer": [355, 849, 1362], "object": 85, "octet_length": 1381, "od": 856, "offset": 1374, "offset_bi": [470, 1087], "ones": 815, "oper": [849, 965, 1362, 1387, 1388], "option": 203, "or_": 630, "order": 1374, "ordinal_dai": [471, 1088], "other": 355, "outofboundserror": 111, "output": 856, "output_nam": 601, "over": 631, "pad_end": [710, 1296], "pad_start": [711, 1297], "panic": 356, "panicexcept": 112, "parametercollisionerror": 113, "parametr": [176, 177, 178, 179, 180, 181, 182, 183, 184, 1389], "parquet": 856, "partit": [140, 141, 142, 856], "partition_bi": 272, "partitionbykei": 52, "partitionmaxs": 53, "partitionpart": 54, "pct_chang": [632, 1226], "peak_max": [633, 1227], "peak_min": [634, 1228], "performancewarn": 114, "pi": 1380, "pipe": [273, 635, 901], "pivot": 274, "plot": [353, 1363], "plugin": [143, 145, 963], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 839, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1389], "polarserror": 115, "polarsinefficientmapwarn": 116, "polarswarn": 117, "pop": 602, "pow": [636, 1229, 1380], "prefix": 617, "prefix_field": 618, "product": [275, 637, 1230], "profil": [902, 1389], "provid": 1, "pyarrow": 856, "python": [855, 1386], "qcut": [638, 1231], "quantil": [276, 342, 639, 816, 903, 948, 1232], "quantile_cont": 1375, "quantile_disc": 1375, "quarter": [472, 1089], "queri": [854, 1386], "radian": [640, 1383], "random": 854, "rank": [641, 1233], "read_avro": 146, "read_clipboard": 147, "read_csv": 148, "read_csv_batch": 149, "read_databas": 150, "read_database_uri": 151, "read_delta": 152, "read_excel": 153, "read_ipc": 154, "read_ipc_schema": 155, "read_ipc_stream": 156, "read_json": 157, "read_ndjson": 158, "read_od": 159, "read_parquet": 160, "read_parquet_metadata": 161, "read_parquet_schema": 162, "rechunk": [277, 642, 1234], "reduc": 817, "refer": 855, "regexp_lik": 1381, "regist": 1369, "register_dataframe_namespac": 57, "register_expr_namespac": 58, "register_glob": 1370, "register_io_sourc": 143, "register_lazyframe_namespac": 59, "register_mani": 1371, "register_plugin_funct": 145, "register_series_namespac": 60, "registr": 1, "reinterpret": [407, 643, 1016, 1235], "remot": 904, "remov": [278, 905], "renam": [279, 906, 1236], "rename_field": [739, 1326], "repeat": 818, "repeat_bi": 644, "replac": [473, 645, 712, 1090, 1237, 1298, 1381], "replace_al": [713, 1299], "replace_column": 280, "replace_mani": [714, 1300], "replace_strict": [646, 1238], "replace_time_zon": [474, 1091], "reshap": [647, 1239], "restore_default": 4, "revers": [281, 393, 568, 648, 715, 907, 1002, 1189, 1240, 1301, 1381], "right": 1381, "rle": [649, 1241], "rle_id": [650, 1242], "roll": [282, 651, 908], "rolling_corr": 819, "rolling_cov": 820, "rolling_kurtosi": [652, 1243], "rolling_map": [653, 1244], "rolling_max": [654, 1245], "rolling_max_bi": 655, "rolling_mean": [656, 1246], "rolling_mean_bi": 657, "rolling_median": [658, 1247], "rolling_median_bi": 659, "rolling_min": [660, 1248], "rolling_min_bi": 661, "rolling_quantil": [662, 1249], "rolling_quantile_bi": 663, "rolling_skew": [664, 1250], "rolling_std": [665, 1251], "rolling_std_bi": 666, "rolling_sum": [667, 1252], "rolling_sum_bi": 668, "rolling_var": [669, 1253], "rolling_var_bi": 670, "root_nam": 603, "round": [475, 671, 1092, 1254, 1380], "round_sig_fig": [672, 1255], "row": [283, 284], "rows_by_kei": 285, "rowserror": 118, "rtrim": 1381, "sampl": [286, 569, 673, 1190, 1256], "save": [5, 203], "save_to_fil": 6, "scan_csv": 163, "scan_delta": 164, "scan_iceberg": 165, "scan_ipc": 166, "scan_ndjson": 167, "scan_parquet": 168, "scan_pyarrow_dataset": 169, "scan_tabl": 193, "scatter": 1257, "schema": [287, 909, 964, 1327], "schemaerror": 121, "schemafieldnotfounderror": 122, "search_sort": [674, 1258], "second": [476, 1093], "select": [288, 352, 821, 847, 910, 961, 1361, 1374], "select_seq": [289, 911], "selector": 965, "seri": [183, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1358], "serial": [290, 351, 604, 912, 960], "set": [965, 1259, 1387], "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_differ": [570, 1191], "set_engine_affin": 10, "set_float_precis": 11, "set_fmt_float": 12, "set_fmt_str_length": 13, "set_fmt_table_cell_list_len": 14, "set_intersect": [571, 1192], "set_profil": 184, "set_random_se": 170, "set_sort": [291, 675, 913, 1260], "set_streaming_chunk_s": 15, "set_symmetric_differ": [572, 1193], "set_tbl_cell_align": 16, "set_tbl_cell_numeric_align": 17, "set_tbl_col": 18, "set_tbl_column_data_type_inlin": 19, "set_tbl_dataframe_shape_below": 20, "set_tbl_format": 21, "set_tbl_hide_column_data_typ": 22, "set_tbl_hide_column_nam": 23, "set_tbl_hide_dataframe_shap": 24, "set_tbl_hide_dtype_separ": 25, "set_tbl_row": 26, "set_tbl_width_char": 27, "set_thousands_separ": 28, "set_trim_decimal_zero": 29, "set_union": [573, 1194], "set_verbos": 30, "shape": [292, 1261], "shapeerror": 123, "shift": [293, 394, 574, 676, 914, 1003, 1195, 1262], "show": 1388, "show_graph": [605, 915], "show_vers": 171, "shrink_dtyp": [677, 1263], "shrink_to_fit": [294, 1264], "shuffl": [678, 1265], "sign": [679, 1266, 1380], "sin": [680, 1267, 1383], "sind": 1383, "sinh": [681, 1268], "sink_csv": 48, "sink_ipc": 49, "sink_ndjson": 50, "sink_parquet": 51, "size": [408, 1017], "skew": [682, 1269], "slice": [295, 575, 683, 716, 916, 1196, 1270, 1302], "sort": [296, 395, 576, 684, 917, 1004, 1197, 1271], "sort_bi": 685, "split": [717, 1303], "split_exact": [718, 1304], "split_part": 1381, "splitn": [719, 1305], "sql": [297, 822, 918, 1374, 1379, 1385, 1386], "sql_expr": 823, "sqlcontext": [1367, 1368, 1369, 1370, 1371, 1372, 1373, 1386], "sqlinterfaceerror": 119, "sqlsyntaxerror": 120, "sqrt": [686, 1272, 1380], "starts_with": [409, 426, 720, 1018, 1035, 1306, 1381], "state": [31, 203], "std": [298, 396, 577, 687, 824, 919, 1005, 1198, 1273], "stddev": 1375, "str": [688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322], "strategi": 1389, "strftime": [477, 1094, 1382], "string": [86, 355, 850, 1364, 1381], "string_to_arrai": 1381, "stringcach": [55, 854], "stringcachemismatcherror": 124, "strip_char": [721, 1307], "strip_chars_end": [722, 1308], "strip_chars_start": [723, 1309], "strip_prefix": [724, 1310], "strip_suffix": [725, 1311], "strpo": 1381, "strptime": [726, 1312, 1381], "struct": [87, 737, 738, 739, 740, 741, 825, 851, 1323, 1324, 1325, 1326, 1327, 1328, 1365], "structfieldnotfounderror": 125, "style": 354, "sub": 742, "substr": 1381, "suffix": 619, "suffix_field": 620, "sum": [299, 343, 397, 578, 743, 826, 920, 949, 1006, 1199, 1329, 1375], "sum_horizont": [300, 827], "tabl": [1372, 1388], "tableinfo": [198, 199], "tabletyp": 200, "tail": [301, 344, 579, 727, 744, 828, 921, 950, 1200, 1313, 1330], "tan": [745, 1331, 1383], "tand": 1383, "tanh": [746, 1332], "tempor": [355, 852, 1366, 1382], "test": [172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 1389], "thread_pool_s": 185, "threadpool_s": 186, "time": [88, 478, 829, 1095], "time_rang": [830, 831], "timestamp": [479, 1096, 1381], "to_arrai": [580, 1201], "to_arrow": [302, 1333], "to_dat": [728, 1314], "to_datetim": [729, 1315], "to_decim": [730, 1316], "to_dict": [303, 304], "to_dummi": [305, 1334], "to_fram": 1335, "to_init_repr": [306, 1336], "to_integ": [731, 1317], "to_jax": [307, 1337], "to_list": [398, 1007, 1338], "to_loc": 1036, "to_lowercas": [621, 732, 1318], "to_numpi": [308, 1339], "to_panda": [309, 1340], "to_phys": [747, 1341], "to_seri": 310, "to_str": [480, 1097], "to_struct": [311, 399, 581, 1008, 1202], "to_tim": [733, 1319], "to_titlecas": [734, 1320], "to_torch": [312, 1342], "to_uppercas": [622, 735, 1321], "toomanyrowsreturnederror": 126, "top_k": [313, 748, 922, 1343], "top_k_bi": 749, "total_dai": [481, 1098], "total_hour": [482, 1099], "total_microsecond": [483, 1100], "total_millisecond": [484, 1101], "total_minut": [485, 1102], "total_nanosecond": [486, 1103], "total_second": [487, 1104], "transpos": 314, "tree_format": 606, "trigonometri": 1383, "truediv": 750, "truncat": [488, 1105, 1388], "try_cast": 1384, "type": [355, 1384], "uint16": 89, "uint32": 90, "uint64": 91, "uint8": 92, "undo_alias": 607, "union": 1387, "uniqu": [315, 400, 582, 751, 923, 1009, 1203, 1344], "unique_count": [752, 1345], "uniti": [194, 195, 196, 197, 198, 199, 200, 202], "unknown": 93, "unnest": [316, 740, 924, 1328, 1376, 1388], "unpivot": [317, 925], "unregist": 1373, "unstablewarn": 127, "unstack": 318, "unsuitablesqlerror": 128, "updat": [319, 926], "upper": 1381, "upper_bound": [753, 1346], "upsampl": 320, "us": 203, "uses_lexical_ord": 1037, "using_string_cach": 187, "utf8": 94, "value_count": [754, 1347], "var": [321, 401, 583, 755, 832, 927, 1010, 1204, 1348], "varianc": 1375, "vstack": 322, "warn": 356, "week": [489, 1106], "weekdai": [490, 1107], "when": 833, "where": [756, 1374], "width": [323, 928], "window": 853, "with_column": [324, 929], "with_columns_seq": [325, 930], "with_context": 931, "with_field": 741, "with_row_count": [326, 932], "with_row_index": [327, 933], "with_time_unit": [491, 1108], "write_avro": 36, "write_clipboard": 37, "write_csv": 38, "write_databas": 39, "write_delta": 40, "write_excel": 41, "write_iceberg": 42, "write_ipc": 43, "write_ipc_stream": 44, "write_json": [45, 608], "write_ndjson": 46, "write_parquet": 47, "xor": 757, "year": [492, 1109], "zero": 834, "zfill": [736, 1322], "zip_with": 1349}})